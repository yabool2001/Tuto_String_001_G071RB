
Tuto_String_001_G071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004070  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c4  080041c4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041cc  080041cc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080041d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000002c  08004200  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004200  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c31f  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d96  00000000  00000000  0002c373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002e110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b30  00000000  00000000  0002f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b60c  00000000  00000000  00046d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964fe  00000000  00000000  00052354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8852  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  000e88a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004114 	.word	0x08004114

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	08004114 	.word	0x08004114

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fb4b 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f8d1 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f983 	bl	8000944 <MX_GPIO_Init>
  MX_DMA_Init();
 800063e:	f000 f963 	bl	8000908 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f913 	bl	800086c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart2 , rx_buff , sizeof ( rx_buff ) ) ;
 8000646:	495e      	ldr	r1, [pc, #376]	; (80007c0 <main+0x194>)
 8000648:	4b5e      	ldr	r3, [pc, #376]	; (80007c4 <main+0x198>)
 800064a:	2264      	movs	r2, #100	; 0x64
 800064c:	0018      	movs	r0, r3
 800064e:	f003 fc5d 	bl	8003f0c <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 8000652:	4b5d      	ldr	r3, [pc, #372]	; (80007c8 <main+0x19c>)
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff fd55 	bl	8000104 <strlen>
 800065a:	0003      	movs	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	495a      	ldr	r1, [pc, #360]	; (80007c8 <main+0x19c>)
 8000660:	4858      	ldr	r0, [pc, #352]	; (80007c4 <main+0x198>)
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	f002 f888 	bl	8002778 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ( received == 1 )
 8000668:	4b58      	ldr	r3, [pc, #352]	; (80007cc <main+0x1a0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d1fb      	bne.n	8000668 <main+0x3c>
	  {
		  if ( strncmp ( (const char *) rx_buff  , pw , 4 ) == 0)
 8000670:	4957      	ldr	r1, [pc, #348]	; (80007d0 <main+0x1a4>)
 8000672:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <main+0x194>)
 8000674:	2204      	movs	r2, #4
 8000676:	0018      	movs	r0, r3
 8000678:	f003 fd3a 	bl	80040f0 <strncmp>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d141      	bne.n	8000704 <main+0xd8>
		  {
			  if ( strlen ( (char *) rx_buff ) > 12 ) // 12 to odpowiednik $PW 3.30300
 8000680:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <main+0x194>)
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff fd3e 	bl	8000104 <strlen>
 8000688:	0003      	movs	r3, r0
 800068a:	2b0c      	cmp	r3, #12
 800068c:	d93a      	bls.n	8000704 <main+0xd8>
			  {
				  uint8_t i ;
				  for ( i = 4 ; i < 8 ; i++ ) // 8 to odpowiednik $PW 3.31
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	2204      	movs	r2, #4
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e02a      	b.n	80006ec <main+0xc0>
				  {
					  if ( rx_buff[i] == 46 || ( rx_buff[i] >= 48 && rx_buff[i] <= 57 ) )
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <main+0x194>)
 800069c:	5cd3      	ldrb	r3, [r2, r3]
 800069e:	2b2e      	cmp	r3, #46	; 0x2e
 80006a0:	d00b      	beq.n	80006ba <main+0x8e>
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4a46      	ldr	r2, [pc, #280]	; (80007c0 <main+0x194>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	2b2f      	cmp	r3, #47	; 0x2f
 80006ac:	d914      	bls.n	80006d8 <main+0xac>
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4a43      	ldr	r2, [pc, #268]	; (80007c0 <main+0x194>)
 80006b4:	5cd3      	ldrb	r3, [r2, r3]
 80006b6:	2b39      	cmp	r3, #57	; 0x39
 80006b8:	d80e      	bhi.n	80006d8 <main+0xac>
						  tx_buff[i-4] = rx_buff[i] ;
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3b04      	subs	r3, #4
 80006c4:	493e      	ldr	r1, [pc, #248]	; (80007c0 <main+0x194>)
 80006c6:	5c89      	ldrb	r1, [r1, r2]
 80006c8:	4a42      	ldr	r2, [pc, #264]	; (80007d4 <main+0x1a8>)
 80006ca:	54d1      	strb	r1, [r2, r3]
				  for ( i = 4 ; i < 8 ; i++ ) // 8 to odpowiednik $PW 3.31
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781a      	ldrb	r2, [r3, #0]
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	3201      	adds	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e009      	b.n	80006ec <main+0xc0>
					  else if ( rx_buff[i] == 42 )
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <main+0x194>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	2b2a      	cmp	r3, #42	; 0x2a
 80006e2:	d008      	beq.n	80006f6 <main+0xca>
						  break ;
					  else
					  {
						  tx_buff[0] = 0 ;
 80006e4:	4b3b      	ldr	r3, [pc, #236]	; (80007d4 <main+0x1a8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
						  break ;
 80006ea:	e005      	b.n	80006f8 <main+0xcc>
				  for ( i = 4 ; i < 8 ; i++ ) // 8 to odpowiednik $PW 3.31
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b07      	cmp	r3, #7
 80006f2:	d9d0      	bls.n	8000696 <main+0x6a>
 80006f4:	e000      	b.n	80006f8 <main+0xcc>
						  break ;
 80006f6:	46c0      	nop			; (mov r8, r8)
					  }
				  }
				  tx_buff[4] = 59 ; // ";"
 80006f8:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <main+0x1a8>)
 80006fa:	223b      	movs	r2, #59	; 0x3b
 80006fc:	711a      	strb	r2, [r3, #4]
				  tx_buff[5] = 0 ; // ";"
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <main+0x1a8>)
 8000700:	2200      	movs	r2, #0
 8000702:	715a      	strb	r2, [r3, #5]
			  }
		  }
		  if ( strncmp ( (const char *) rx_buff  , gn , 4 ) == 0)
 8000704:	4934      	ldr	r1, [pc, #208]	; (80007d8 <main+0x1ac>)
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <main+0x194>)
 8000708:	2204      	movs	r2, #4
 800070a:	0018      	movs	r0, r3
 800070c:	f003 fcf0 	bl	80040f0 <strncmp>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d142      	bne.n	800079a <main+0x16e>
		  {
			  uint8_t i = 4 ;
 8000714:	1dbb      	adds	r3, r7, #6
 8000716:	2204      	movs	r2, #4
 8000718:	701a      	strb	r2, [r3, #0]
			  while ( rx_buff[i] != 42 )
 800071a:	e02c      	b.n	8000776 <main+0x14a>
			  {
				  if ( rx_buff[i] == 44 || rx_buff[i] == 46 || ( rx_buff[i] >= 48 && rx_buff[i] <= 57 ) )
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <main+0x194>)
 8000722:	5cd3      	ldrb	r3, [r2, r3]
 8000724:	2b2c      	cmp	r3, #44	; 0x2c
 8000726:	d011      	beq.n	800074c <main+0x120>
 8000728:	1dbb      	adds	r3, r7, #6
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <main+0x194>)
 800072e:	5cd3      	ldrb	r3, [r2, r3]
 8000730:	2b2e      	cmp	r3, #46	; 0x2e
 8000732:	d00b      	beq.n	800074c <main+0x120>
 8000734:	1dbb      	adds	r3, r7, #6
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <main+0x194>)
 800073a:	5cd3      	ldrb	r3, [r2, r3]
 800073c:	2b2f      	cmp	r3, #47	; 0x2f
 800073e:	d914      	bls.n	800076a <main+0x13e>
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <main+0x194>)
 8000746:	5cd3      	ldrb	r3, [r2, r3]
 8000748:	2b39      	cmp	r3, #57	; 0x39
 800074a:	d80e      	bhi.n	800076a <main+0x13e>
				  {
					  tx_buff[i-4] = rx_buff[i] ;
 800074c:	1dbb      	adds	r3, r7, #6
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	1dbb      	adds	r3, r7, #6
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3b04      	subs	r3, #4
 8000756:	491a      	ldr	r1, [pc, #104]	; (80007c0 <main+0x194>)
 8000758:	5c89      	ldrb	r1, [r1, r2]
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <main+0x1a8>)
 800075c:	54d1      	strb	r1, [r2, r3]
					  i++ ;
 800075e:	1dbb      	adds	r3, r7, #6
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	1dbb      	adds	r3, r7, #6
 8000764:	3201      	adds	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	e005      	b.n	8000776 <main+0x14a>
				  }
				  else
				  {
					  i++;
 800076a:	1dbb      	adds	r3, r7, #6
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	3201      	adds	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
					  break ;
 8000774:	e005      	b.n	8000782 <main+0x156>
			  while ( rx_buff[i] != 42 )
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <main+0x194>)
 800077c:	5cd3      	ldrb	r3, [r2, r3]
 800077e:	2b2a      	cmp	r3, #42	; 0x2a
 8000780:	d1cc      	bne.n	800071c <main+0xf0>
				  }
			  }
			  tx_buff[i-4] = 59 ;
 8000782:	1dbb      	adds	r3, r7, #6
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b04      	subs	r3, #4
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <main+0x1a8>)
 800078a:	213b      	movs	r1, #59	; 0x3b
 800078c:	54d1      	strb	r1, [r2, r3]
			  tx_buff[i-4+1] = 0 ;
 800078e:	1dbb      	adds	r3, r7, #6
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3b03      	subs	r3, #3
 8000794:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <main+0x1a8>)
 8000796:	2100      	movs	r1, #0
 8000798:	54d1      	strb	r1, [r2, r3]
		  }
		  HAL_UART_Transmit ( &huart2 , (const uint8_t *) tx_buff , strlen ( (char *) tx_buff ) , UART_TX_TIMEOUT ) ;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <main+0x1a8>)
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff fcb1 	bl	8000104 <strlen>
 80007a2:	0003      	movs	r3, r0
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	490b      	ldr	r1, [pc, #44]	; (80007d4 <main+0x1a8>)
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <main+0x198>)
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	f001 ffe4 	bl	8002778 <HAL_UART_Transmit>
		  received = 0 ;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <main+0x1a0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
		  rx_buff[0] = 0 ;
 80007b6:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <main+0x194>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
	  if ( received == 1 )
 80007bc:	e754      	b.n	8000668 <main+0x3c>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000138 	.word	0x20000138
 80007c4:	20000048 	.word	0x20000048
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000200 	.word	0x20000200
 80007d0:	0800412c 	.word	0x0800412c
 80007d4:	2000019c 	.word	0x2000019c
 80007d8:	08004134 	.word	0x08004134

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b093      	sub	sp, #76	; 0x4c
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	2410      	movs	r4, #16
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	2338      	movs	r3, #56	; 0x38
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f003 fc77 	bl	80040e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f2:	003b      	movs	r3, r7
 80007f4:	0018      	movs	r0, r3
 80007f6:	2310      	movs	r3, #16
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 fc70 	bl	80040e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	0018      	movs	r0, r3
 8000806:	f001 f899 	bl	800193c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	0052      	lsls	r2, r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2240      	movs	r2, #64	; 0x40
 8000822:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000824:	193b      	adds	r3, r7, r4
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	f001 f8d1 	bl	80019d4 <HAL_RCC_OscConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000836:	f000 f91f 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	003b      	movs	r3, r7
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000840:	003b      	movs	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	003b      	movs	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000852:	003b      	movs	r3, r7
 8000854:	2100      	movs	r1, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f001 fbd6 	bl	8002008 <HAL_RCC_ClockConfig>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000860:	f000 f90a 	bl	8000a78 <Error_Handler>
  }
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b013      	add	sp, #76	; 0x4c
 800086a:	bd90      	pop	{r4, r7, pc}

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000872:	4a24      	ldr	r2, [pc, #144]	; (8000904 <MX_USART2_UART_Init+0x98>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000878:	22e1      	movs	r2, #225	; 0xe1
 800087a:	0252      	lsls	r2, r2, #9
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_USART2_UART_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_USART2_UART_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 ff08 	bl	80026cc <HAL_UART_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008c0:	f000 f8da 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	0018      	movs	r0, r3
 80008ca:	f003 fa9d 	bl	8003e08 <HAL_UARTEx_SetTxFifoThreshold>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008d2:	f000 f8d1 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008d8:	2100      	movs	r1, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f003 fad4 	bl	8003e88 <HAL_UARTEx_SetRxFifoThreshold>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008e4:	f000 f8c8 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x94>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f003 fa52 	bl	8003d94 <HAL_UARTEx_DisableFifoMode>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008f4:	f000 f8c0 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000048 	.word	0x20000048
 8000904:	40004400 	.word	0x40004400

08000908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_DMA_Init+0x38>)
 8000910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_DMA_Init+0x38>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	639a      	str	r2, [r3, #56]	; 0x38
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_DMA_Init+0x38>)
 800091c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2009      	movs	r0, #9
 800092c:	f000 fb00 	bl	8000f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000930:	2009      	movs	r0, #9
 8000932:	f000 fb12 	bl	8000f5a <HAL_NVIC_EnableIRQ>

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40021000 	.word	0x40021000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	240c      	movs	r4, #12
 800094c:	193b      	adds	r3, r7, r4
 800094e:	0018      	movs	r0, r3
 8000950:	2314      	movs	r3, #20
 8000952:	001a      	movs	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	f003 fbc3 	bl	80040e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <MX_GPIO_Init+0xd0>)
 800095c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095e:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <MX_GPIO_Init+0xd0>)
 8000960:	2104      	movs	r1, #4
 8000962:	430a      	orrs	r2, r1
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <MX_GPIO_Init+0xd0>)
 8000968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096a:	2204      	movs	r2, #4
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <MX_GPIO_Init+0xd0>)
 8000974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_GPIO_Init+0xd0>)
 8000978:	2120      	movs	r1, #32
 800097a:	430a      	orrs	r2, r1
 800097c:	635a      	str	r2, [r3, #52]	; 0x34
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <MX_GPIO_Init+0xd0>)
 8000980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000982:	2220      	movs	r2, #32
 8000984:	4013      	ands	r3, r2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <MX_GPIO_Init+0xd0>)
 800098c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_GPIO_Init+0xd0>)
 8000990:	2101      	movs	r1, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_GPIO_Init+0xd0>)
 8000998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099a:	2201      	movs	r2, #1
 800099c:	4013      	ands	r3, r2
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80009a2:	23a0      	movs	r3, #160	; 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 ff74 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	0192      	lsls	r2, r2, #6
 80009b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2284      	movs	r2, #132	; 0x84
 80009bc:	0392      	lsls	r2, r2, #14
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <MX_GPIO_Init+0xd4>)
 80009ca:	0019      	movs	r1, r3
 80009cc:	0010      	movs	r0, r2
 80009ce:	f000 fdff 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2220      	movs	r2, #32
 80009d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2201      	movs	r2, #1
 80009de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 80009ec:	187a      	adds	r2, r7, r1
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fdeb 	bl	80015d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 fa96 	bl	8000f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a04:	2007      	movs	r0, #7
 8000a06:	f000 faa8 	bl	8000f5a <HAL_NVIC_EnableIRQ>

}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b009      	add	sp, #36	; 0x24
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	40021000 	.word	0x40021000
 8000a18:	50000800 	.word	0x50000800

08000a1c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	0002      	movs	r2, r0
 8000a24:	1dbb      	adds	r3, r7, #6
 8000a26:	801a      	strh	r2, [r3, #0]
	__NOP () ;
 8000a28:	46c0      	nop			; (mov r8, r8)
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	000a      	movs	r2, r1
 8000a3e:	1cbb      	adds	r3, r7, #2
 8000a40:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART2 )
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_UARTEx_RxEventCallback+0x34>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d102      	bne.n	8000a52 <HAL_UARTEx_RxEventCallback+0x1e>
    	received = 1 ;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_UARTEx_RxEventCallback+0x38>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA ( &huart2 , rx_buff , sizeof ( rx_buff ) ) ;
 8000a52:	4907      	ldr	r1, [pc, #28]	; (8000a70 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_UARTEx_RxEventCallback+0x40>)
 8000a56:	2264      	movs	r2, #100	; 0x64
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f003 fa57 	bl	8003f0c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	20000200 	.word	0x20000200
 8000a70:	20000138 	.word	0x20000138
 8000a74:	20000048 	.word	0x20000048

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	430a      	orrs	r2, r1
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	0549      	lsls	r1, r1, #21
 8000aac:	430a      	orrs	r2, r1
 8000aae:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_MspInit+0x44>)
 8000ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	055b      	lsls	r3, r3, #21
 8000ab8:	4013      	ands	r3, r2
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b097      	sub	sp, #92	; 0x5c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	2344      	movs	r3, #68	; 0x44
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2314      	movs	r3, #20
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f003 fafe 	bl	80040e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	2410      	movs	r4, #16
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2334      	movs	r3, #52	; 0x34
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f003 faf6 	bl	80040e0 <memset>
  if(huart->Instance==USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a3b      	ldr	r2, [pc, #236]	; (8000be8 <HAL_UART_MspInit+0x11c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d170      	bne.n	8000be0 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2202      	movs	r2, #2
 8000b02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 fc25 	bl	800235c <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b16:	f7ff ffaf 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	4b34      	ldr	r3, [pc, #208]	; (8000bec <HAL_UART_MspInit+0x120>)
 8000b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <HAL_UART_MspInit+0x120>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0289      	lsls	r1, r1, #10
 8000b24:	430a      	orrs	r2, r1
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b28:	4b30      	ldr	r3, [pc, #192]	; (8000bec <HAL_UART_MspInit+0x120>)
 8000b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	029b      	lsls	r3, r3, #10
 8000b30:	4013      	ands	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <HAL_UART_MspInit+0x120>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <HAL_UART_MspInit+0x120>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <HAL_UART_MspInit+0x120>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8000b4e:	2144      	movs	r1, #68	; 0x44
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2202      	movs	r2, #2
 8000b5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	187a      	adds	r2, r7, r1
 8000b70:	23a0      	movs	r3, #160	; 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fd2a 	bl	80015d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <HAL_UART_MspInit+0x128>)
 8000b80:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000b84:	2234      	movs	r2, #52	; 0x34
 8000b86:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 f9ed 	bl	8000f94 <HAL_DMA_Init>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000bbe:	f7ff ff5b 	bl	8000a78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000bc8:	505a      	str	r2, [r3, r1]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_UART_MspInit+0x124>)
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	201c      	movs	r0, #28
 8000bd6:	f000 f9ab 	bl	8000f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 f9bd 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b017      	add	sp, #92	; 0x5c
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	200000dc 	.word	0x200000dc
 8000bf4:	40020008 	.word	0x40020008

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8c0 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fe50 	bl	80018d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <DMA1_Channel1_IRQHandler+0x14>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fb82 	bl	800134c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	200000dc 	.word	0x200000dc

08000c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <USART2_IRQHandler+0x14>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fe28 	bl	80028b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000048 	.word	0x20000048

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c7c:	f7ff fff6 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c82:	490d      	ldr	r1, [pc, #52]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c98:	4c0a      	ldr	r4, [pc, #40]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ca6:	f003 f9f7 	bl	8004098 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000caa:	f7ff fcbf 	bl	800062c <main>

08000cae <LoopForever>:

LoopForever:
  b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   r0, =_estack
 8000cb0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000cbc:	080041d4 	.word	0x080041d4
  ldr r2, =_sbss
 8000cc0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000cc4:	20000208 	.word	0x20000208

08000cc8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_COMP_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_Init+0x3c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_Init+0x3c>)
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	0049      	lsls	r1, r1, #1
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f810 	bl	8000d0c <HAL_InitTick>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e001      	b.n	8000cfc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fec4 	bl	8000a84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	230f      	movs	r3, #15
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_InitTick+0x88>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d02b      	beq.n	8000d7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_InitTick+0x8c>)
 8000d26:	681c      	ldr	r4, [r3, #0]
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_InitTick+0x88>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	23fa      	movs	r3, #250	; 0xfa
 8000d30:	0098      	lsls	r0, r3, #2
 8000d32:	f7ff f9ef 	bl	8000114 <__udivsi3>
 8000d36:	0003      	movs	r3, r0
 8000d38:	0019      	movs	r1, r3
 8000d3a:	0020      	movs	r0, r4
 8000d3c:	f7ff f9ea 	bl	8000114 <__udivsi3>
 8000d40:	0003      	movs	r3, r0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 f919 	bl	8000f7a <HAL_SYSTICK_Config>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d112      	bne.n	8000d72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d80a      	bhi.n	8000d68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	2301      	movs	r3, #1
 8000d56:	425b      	negs	r3, r3
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 f8e8 	bl	8000f30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_InitTick+0x90>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e00d      	b.n	8000d84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d68:	230f      	movs	r3, #15
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e008      	b.n	8000d84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d72:	230f      	movs	r3, #15
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e003      	b.n	8000d84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d84:	230f      	movs	r3, #15
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	781b      	ldrb	r3, [r3, #0]
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b005      	add	sp, #20
 8000d90:	bd90      	pop	{r4, r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000028 	.word	0x20000028
 8000d98:	20000020 	.word	0x20000020
 8000d9c:	20000024 	.word	0x20000024

08000da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x1c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	001a      	movs	r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_IncTick+0x20>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	18d2      	adds	r2, r2, r3
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_IncTick+0x20>)
 8000db2:	601a      	str	r2, [r3, #0]
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	20000028 	.word	0x20000028
 8000dc0:	20000204 	.word	0x20000204

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <HAL_GetTick+0x10>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000204 	.word	0x20000204

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	0002      	movs	r2, r0
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dea:	d809      	bhi.n	8000e00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	001a      	movs	r2, r3
 8000df2:	231f      	movs	r3, #31
 8000df4:	401a      	ands	r2, r3
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_EnableIRQ+0x30>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	000a      	movs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b002      	add	sp, #8
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	0002      	movs	r2, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e20:	d828      	bhi.n	8000e74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e22:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <__NVIC_SetPriority+0xd4>)
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	33c0      	adds	r3, #192	; 0xc0
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	589b      	ldr	r3, [r3, r2]
 8000e32:	1dfa      	adds	r2, r7, #7
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	0011      	movs	r1, r2
 8000e38:	2203      	movs	r2, #3
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	00d2      	lsls	r2, r2, #3
 8000e3e:	21ff      	movs	r1, #255	; 0xff
 8000e40:	4091      	lsls	r1, r2
 8000e42:	000a      	movs	r2, r1
 8000e44:	43d2      	mvns	r2, r2
 8000e46:	401a      	ands	r2, r3
 8000e48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	019b      	lsls	r3, r3, #6
 8000e4e:	22ff      	movs	r2, #255	; 0xff
 8000e50:	401a      	ands	r2, r3
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	0018      	movs	r0, r3
 8000e58:	2303      	movs	r3, #3
 8000e5a:	4003      	ands	r3, r0
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e60:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <__NVIC_SetPriority+0xd4>)
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	33c0      	adds	r3, #192	; 0xc0
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e72:	e031      	b.n	8000ed8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <__NVIC_SetPriority+0xd8>)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	400b      	ands	r3, r1
 8000e80:	3b08      	subs	r3, #8
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3306      	adds	r3, #6
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	18d3      	adds	r3, r2, r3
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	0011      	movs	r1, r2
 8000e94:	2203      	movs	r2, #3
 8000e96:	400a      	ands	r2, r1
 8000e98:	00d2      	lsls	r2, r2, #3
 8000e9a:	21ff      	movs	r1, #255	; 0xff
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	401a      	ands	r2, r3
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	4003      	ands	r3, r0
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <__NVIC_SetPriority+0xd8>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	001c      	movs	r4, r3
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	4023      	ands	r3, r4
 8000ec8:	3b08      	subs	r3, #8
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	3306      	adds	r3, #6
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	18c3      	adds	r3, r0, r3
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	601a      	str	r2, [r3, #0]
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b003      	add	sp, #12
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	045b      	lsls	r3, r3, #17
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d301      	bcc.n	8000f00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efc:	2301      	movs	r3, #1
 8000efe:	e010      	b.n	8000f22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <SysTick_Config+0x44>)
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	3a01      	subs	r2, #1
 8000f06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f08:	2301      	movs	r3, #1
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f7ff ff7c 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <SysTick_Config+0x44>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <SysTick_Config+0x44>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	1c02      	adds	r2, r0, #0
 8000f40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	0002      	movs	r2, r0
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ff33 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ffaf 	bl	8000ee8 <SysTick_Config>
 8000f8a:	0003      	movs	r3, r0
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e077      	b.n	8001096 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a3d      	ldr	r2, [pc, #244]	; (80010a0 <HAL_DMA_Init+0x10c>)
 8000fac:	4694      	mov	ip, r2
 8000fae:	4463      	add	r3, ip
 8000fb0:	2114      	movs	r1, #20
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f7ff f8ae 	bl	8000114 <__udivsi3>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	009a      	lsls	r2, r3, #2
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2225      	movs	r2, #37	; 0x25
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4934      	ldr	r1, [pc, #208]	; (80010a4 <HAL_DMA_Init+0x110>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0018      	movs	r0, r3
 8001012:	f000 fa8d 	bl	8001530 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	01db      	lsls	r3, r3, #7
 800101e:	429a      	cmp	r2, r3
 8001020:	d102      	bne.n	8001028 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001030:	213f      	movs	r1, #63	; 0x3f
 8001032:	400a      	ands	r2, r1
 8001034:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800103e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d011      	beq.n	800106c <HAL_DMA_Init+0xd8>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d80d      	bhi.n	800106c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	0018      	movs	r0, r3
 8001054:	f000 fa98 	bl	8001588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	e008      	b.n	800107e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2225      	movs	r2, #37	; 0x25
 8001088:	2101      	movs	r1, #1
 800108a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2224      	movs	r2, #36	; 0x24
 8001090:	2100      	movs	r1, #0
 8001092:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	bffdfff8 	.word	0xbffdfff8
 80010a4:	ffff800f 	.word	0xffff800f

080010a8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010b6:	2317      	movs	r3, #23
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2224      	movs	r2, #36	; 0x24
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d101      	bne.n	80010cc <HAL_DMA_Start_IT+0x24>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e06f      	b.n	80011ac <HAL_DMA_Start_IT+0x104>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2224      	movs	r2, #36	; 0x24
 80010d0:	2101      	movs	r1, #1
 80010d2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2225      	movs	r2, #37	; 0x25
 80010d8:	5c9b      	ldrb	r3, [r3, r2]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d157      	bne.n	8001190 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2225      	movs	r2, #37	; 0x25
 80010e4:	2102      	movs	r1, #2
 80010e6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2101      	movs	r1, #1
 80010fa:	438a      	bics	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 f9d3 	bl	80014b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	2b00      	cmp	r3, #0
 8001110:	d008      	beq.n	8001124 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	210e      	movs	r1, #14
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e00f      	b.n	8001144 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2104      	movs	r1, #4
 8001130:	438a      	bics	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	210a      	movs	r1, #10
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	4013      	ands	r3, r2
 8001150:	d008      	beq.n	8001164 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0049      	lsls	r1, r1, #1
 8001160:	430a      	orrs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	0049      	lsls	r1, r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e00a      	b.n	80011a6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2224      	movs	r2, #36	; 0x24
 800119a:	2100      	movs	r1, #0
 800119c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800119e:	2317      	movs	r3, #23
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80011a6:	2317      	movs	r3, #23
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	781b      	ldrb	r3, [r3, #0]
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b006      	add	sp, #24
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e050      	b.n	8001268 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2225      	movs	r2, #37	; 0x25
 80011ca:	5c9b      	ldrb	r3, [r3, r2]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d008      	beq.n	80011e4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2204      	movs	r2, #4
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2224      	movs	r2, #36	; 0x24
 80011dc:	2100      	movs	r1, #0
 80011de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e041      	b.n	8001268 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	210e      	movs	r1, #14
 80011f0:	438a      	bics	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	491c      	ldr	r1, [pc, #112]	; (8001270 <HAL_DMA_Abort+0xbc>)
 8001200:	400a      	ands	r2, r1
 8001202:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2101      	movs	r1, #1
 8001210:	438a      	bics	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_DMA_Abort+0xc0>)
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	221c      	movs	r2, #28
 800121e:	4013      	ands	r3, r2
 8001220:	2201      	movs	r2, #1
 8001222:	409a      	lsls	r2, r3
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_DMA_Abort+0xc0>)
 8001226:	430a      	orrs	r2, r1
 8001228:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001232:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00c      	beq.n	8001256 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001246:	490a      	ldr	r1, [pc, #40]	; (8001270 <HAL_DMA_Abort+0xbc>)
 8001248:	400a      	ands	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001254:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2225      	movs	r2, #37	; 0x25
 800125a:	2101      	movs	r1, #1
 800125c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2224      	movs	r2, #36	; 0x24
 8001262:	2100      	movs	r1, #0
 8001264:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}
 8001270:	fffffeff 	.word	0xfffffeff
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001280:	210f      	movs	r1, #15
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2225      	movs	r2, #37	; 0x25
 800128c:	5c9b      	ldrb	r3, [r3, r2]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d006      	beq.n	80012a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e049      	b.n	8001336 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	210e      	movs	r1, #14
 80012ae:	438a      	bics	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	438a      	bics	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	491d      	ldr	r1, [pc, #116]	; (8001344 <HAL_DMA_Abort_IT+0xcc>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_DMA_Abort_IT+0xd0>)
 80012d4:	6859      	ldr	r1, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	221c      	movs	r2, #28
 80012dc:	4013      	ands	r3, r2
 80012de:	2201      	movs	r2, #1
 80012e0:	409a      	lsls	r2, r3
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_DMA_Abort_IT+0xd0>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001304:	490f      	ldr	r1, [pc, #60]	; (8001344 <HAL_DMA_Abort_IT+0xcc>)
 8001306:	400a      	ands	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001312:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2225      	movs	r2, #37	; 0x25
 8001318:	2101      	movs	r1, #1
 800131a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2224      	movs	r2, #36	; 0x24
 8001320:	2100      	movs	r1, #0
 8001322:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	0010      	movs	r0, r2
 8001334:	4798      	blx	r3
    }
  }
  return status;
 8001336:	230f      	movs	r3, #15
 8001338:	18fb      	adds	r3, r7, r3
 800133a:	781b      	ldrb	r3, [r3, #0]
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b004      	add	sp, #16
 8001342:	bd80      	pop	{r7, pc}
 8001344:	fffffeff 	.word	0xfffffeff
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001354:	4b55      	ldr	r3, [pc, #340]	; (80014ac <HAL_DMA_IRQHandler+0x160>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	221c      	movs	r2, #28
 8001368:	4013      	ands	r3, r2
 800136a:	2204      	movs	r2, #4
 800136c:	409a      	lsls	r2, r3
 800136e:	0013      	movs	r3, r2
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4013      	ands	r3, r2
 8001374:	d027      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x7a>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2204      	movs	r2, #4
 800137a:	4013      	ands	r3, r2
 800137c:	d023      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2220      	movs	r2, #32
 8001386:	4013      	ands	r3, r2
 8001388:	d107      	bne.n	800139a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2104      	movs	r1, #4
 8001396:	438a      	bics	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800139a:	4b44      	ldr	r3, [pc, #272]	; (80014ac <HAL_DMA_IRQHandler+0x160>)
 800139c:	6859      	ldr	r1, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	221c      	movs	r2, #28
 80013a4:	4013      	ands	r3, r2
 80013a6:	2204      	movs	r2, #4
 80013a8:	409a      	lsls	r2, r3
 80013aa:	4b40      	ldr	r3, [pc, #256]	; (80014ac <HAL_DMA_IRQHandler+0x160>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d100      	bne.n	80013ba <HAL_DMA_IRQHandler+0x6e>
 80013b8:	e073      	b.n	80014a2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	0010      	movs	r0, r2
 80013c2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80013c4:	e06d      	b.n	80014a2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	221c      	movs	r2, #28
 80013cc:	4013      	ands	r3, r2
 80013ce:	2202      	movs	r2, #2
 80013d0:	409a      	lsls	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	d02e      	beq.n	8001438 <HAL_DMA_IRQHandler+0xec>
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2202      	movs	r2, #2
 80013de:	4013      	ands	r3, r2
 80013e0:	d02a      	beq.n	8001438 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2220      	movs	r2, #32
 80013ea:	4013      	ands	r3, r2
 80013ec:	d10b      	bne.n	8001406 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	210a      	movs	r1, #10
 80013fa:	438a      	bics	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2225      	movs	r2, #37	; 0x25
 8001402:	2101      	movs	r1, #1
 8001404:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_DMA_IRQHandler+0x160>)
 8001408:	6859      	ldr	r1, [r3, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	221c      	movs	r2, #28
 8001410:	4013      	ands	r3, r2
 8001412:	2202      	movs	r2, #2
 8001414:	409a      	lsls	r2, r3
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <HAL_DMA_IRQHandler+0x160>)
 8001418:	430a      	orrs	r2, r1
 800141a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2224      	movs	r2, #36	; 0x24
 8001420:	2100      	movs	r1, #0
 8001422:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	2b00      	cmp	r3, #0
 800142a:	d03a      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	0010      	movs	r0, r2
 8001434:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001436:	e034      	b.n	80014a2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	221c      	movs	r2, #28
 800143e:	4013      	ands	r3, r2
 8001440:	2208      	movs	r2, #8
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	d02b      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x158>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2208      	movs	r2, #8
 8001450:	4013      	ands	r3, r2
 8001452:	d027      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	210e      	movs	r1, #14
 8001460:	438a      	bics	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_DMA_IRQHandler+0x160>)
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	221c      	movs	r2, #28
 800146e:	4013      	ands	r3, r2
 8001470:	2201      	movs	r2, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_DMA_IRQHandler+0x160>)
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2225      	movs	r2, #37	; 0x25
 8001484:	2101      	movs	r1, #1
 8001486:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2224      	movs	r2, #36	; 0x24
 800148c:	2100      	movs	r1, #0
 800148e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	0010      	movs	r0, r2
 80014a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46c0      	nop			; (mov r8, r8)
}
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020000 	.word	0x40020000

080014b0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014d8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <DMA_SetConfig+0x7c>)
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	221c      	movs	r2, #28
 80014e4:	4013      	ands	r3, r2
 80014e6:	2201      	movs	r2, #1
 80014e8:	409a      	lsls	r2, r3
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <DMA_SetConfig+0x7c>)
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d108      	bne.n	8001512 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001510:	e007      	b.n	8001522 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	60da      	str	r2, [r3, #12]
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40020000 	.word	0x40020000

08001530 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001540:	4694      	mov	ip, r2
 8001542:	4463      	add	r3, ip
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	001a      	movs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	001a      	movs	r2, r3
 8001552:	23ff      	movs	r3, #255	; 0xff
 8001554:	4013      	ands	r3, r2
 8001556:	3b08      	subs	r3, #8
 8001558:	2114      	movs	r1, #20
 800155a:	0018      	movs	r0, r3
 800155c:	f7fe fdda 	bl	8000114 <__udivsi3>
 8001560:	0003      	movs	r3, r0
 8001562:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a07      	ldr	r2, [pc, #28]	; (8001584 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001568:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	221f      	movs	r2, #31
 800156e:	4013      	ands	r3, r2
 8001570:	2201      	movs	r2, #1
 8001572:	409a      	lsls	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	10008200 	.word	0x10008200
 8001584:	40020880 	.word	0x40020880

08001588 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	223f      	movs	r2, #63	; 0x3f
 8001596:	4013      	ands	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800159e:	4694      	mov	ip, r2
 80015a0:	4463      	add	r3, ip
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	001a      	movs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	4013      	ands	r3, r2
 80015b8:	2201      	movs	r2, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	659a      	str	r2, [r3, #88]	; 0x58
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b004      	add	sp, #16
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	1000823f 	.word	0x1000823f
 80015cc:	40020940 	.word	0x40020940

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e147      	b.n	8001870 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4091      	lsls	r1, r2
 80015ea:	000a      	movs	r2, r1
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d100      	bne.n	80015f8 <HAL_GPIO_Init+0x28>
 80015f6:	e138      	b.n	800186a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2203      	movs	r2, #3
 80015fe:	4013      	ands	r3, r2
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	4013      	ands	r3, r2
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	409a      	lsls	r2, r3
 800161e:	0013      	movs	r3, r2
 8001620:	43da      	mvns	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	409a      	lsls	r2, r3
 8001632:	0013      	movs	r3, r2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	2201      	movs	r2, #1
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2203      	movs	r2, #3
 8001678:	4013      	ands	r3, r2
 800167a:	2b03      	cmp	r3, #3
 800167c:	d017      	beq.n	80016ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	409a      	lsls	r2, r3
 800168c:	0013      	movs	r3, r2
 800168e:	43da      	mvns	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d123      	bne.n	8001702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	58d3      	ldr	r3, [r2, r3]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2207      	movs	r2, #7
 80016cc:	4013      	ands	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	43da      	mvns	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2107      	movs	r1, #7
 80016e6:	400b      	ands	r3, r1
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	409a      	lsls	r2, r3
 80016ec:	0013      	movs	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	6939      	ldr	r1, [r7, #16]
 8001700:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	43da      	mvns	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2203      	movs	r2, #3
 8001720:	401a      	ands	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	0013      	movs	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	23c0      	movs	r3, #192	; 0xc0
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	4013      	ands	r3, r2
 8001740:	d100      	bne.n	8001744 <HAL_GPIO_Init+0x174>
 8001742:	e092      	b.n	800186a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001744:	4a50      	ldr	r2, [pc, #320]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3318      	adds	r3, #24
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	589b      	ldr	r3, [r3, r2]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	220f      	movs	r2, #15
 800175c:	409a      	lsls	r2, r3
 800175e:	0013      	movs	r3, r2
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	23a0      	movs	r3, #160	; 0xa0
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	429a      	cmp	r2, r3
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x1ca>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a45      	ldr	r2, [pc, #276]	; (800188c <HAL_GPIO_Init+0x2bc>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x1c6>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a44      	ldr	r2, [pc, #272]	; (8001890 <HAL_GPIO_Init+0x2c0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x1c2>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a43      	ldr	r2, [pc, #268]	; (8001894 <HAL_GPIO_Init+0x2c4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x1be>
 800178a:	2303      	movs	r3, #3
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x1cc>
 800178e:	2305      	movs	r3, #5
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x1cc>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x1cc>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x1cc>
 800179a:	2300      	movs	r3, #0
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	2103      	movs	r1, #3
 80017a0:	400a      	ands	r2, r1
 80017a2:	00d2      	lsls	r2, r2, #3
 80017a4:	4093      	lsls	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017ac:	4936      	ldr	r1, [pc, #216]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3318      	adds	r3, #24
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	035b      	lsls	r3, r3, #13
 80017d2:	4013      	ands	r3, r2
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43da      	mvns	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	039b      	lsls	r3, r3, #14
 80017fc:	4013      	ands	r3, r2
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800180e:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001810:	2384      	movs	r3, #132	; 0x84
 8001812:	58d3      	ldr	r3, [r2, r3]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43da      	mvns	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	029b      	lsls	r3, r3, #10
 8001828:	4013      	ands	r3, r2
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001834:	4914      	ldr	r1, [pc, #80]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001836:	2284      	movs	r2, #132	; 0x84
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	58d3      	ldr	r3, [r2, r3]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	025b      	lsls	r3, r3, #9
 8001856:	4013      	ands	r3, r2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001862:	4909      	ldr	r1, [pc, #36]	; (8001888 <HAL_GPIO_Init+0x2b8>)
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	40da      	lsrs	r2, r3
 8001878:	1e13      	subs	r3, r2, #0
 800187a:	d000      	beq.n	800187e <HAL_GPIO_Init+0x2ae>
 800187c:	e6b0      	b.n	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b006      	add	sp, #24
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021800 	.word	0x40021800
 800188c:	50000400 	.word	0x50000400
 8001890:	50000800 	.word	0x50000800
 8001894:	50000c00 	.word	0x50000c00

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	0008      	movs	r0, r1
 80018a2:	0011      	movs	r1, r2
 80018a4:	1cbb      	adds	r3, r7, #2
 80018a6:	1c02      	adds	r2, r0, #0
 80018a8:	801a      	strh	r2, [r3, #0]
 80018aa:	1c7b      	adds	r3, r7, #1
 80018ac:	1c0a      	adds	r2, r1, #0
 80018ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b0:	1c7b      	adds	r3, r7, #1
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b8:	1cbb      	adds	r3, r7, #2
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c0:	e003      	b.n	80018ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c2:	1cbb      	adds	r3, r7, #2
 80018c4:	881a      	ldrh	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0002      	movs	r2, r0
 80018dc:	1dbb      	adds	r3, r7, #6
 80018de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	1dba      	adds	r2, r7, #6
 80018e6:	8812      	ldrh	r2, [r2, #0]
 80018e8:	4013      	ands	r3, r2
 80018ea:	d008      	beq.n	80018fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80018ee:	1dba      	adds	r2, r7, #6
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80018f4:	1dbb      	adds	r3, r7, #6
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 f815 	bl	8001928 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	1dba      	adds	r2, r7, #6
 8001904:	8812      	ldrh	r2, [r2, #0]
 8001906:	4013      	ands	r3, r2
 8001908:	d008      	beq.n	800191c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800190c:	1dba      	adds	r2, r7, #6
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001912:	1dbb      	adds	r3, r7, #6
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff f880 	bl	8000a1c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021800 	.word	0x40021800

08001928 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	0002      	movs	r2, r0
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800194a:	4013      	ands	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d11f      	bne.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	0013      	movs	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	189b      	adds	r3, r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4912      	ldr	r1, [pc, #72]	; (80019b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbd0 	bl	8000114 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800197a:	e008      	b.n	800198e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3b01      	subs	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e001      	b.n	800198e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e009      	b.n	80019a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	401a      	ands	r2, r3
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	429a      	cmp	r2, r3
 800199e:	d0ed      	beq.n	800197c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b004      	add	sp, #16
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40007000 	.word	0x40007000
 80019b0:	fffff9ff 	.word	0xfffff9ff
 80019b4:	20000020 	.word	0x20000020
 80019b8:	000f4240 	.word	0x000f4240

080019bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	23e0      	movs	r3, #224	; 0xe0
 80019c6:	01db      	lsls	r3, r3, #7
 80019c8:	4013      	ands	r3, r2
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e2fe      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x1e>
 80019f0:	e07c      	b.n	8001aec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f2:	4bc3      	ldr	r3, [pc, #780]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2238      	movs	r2, #56	; 0x38
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019fc:	4bc0      	ldr	r3, [pc, #768]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2203      	movs	r2, #3
 8001a02:	4013      	ands	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3e>
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d10b      	bne.n	8001a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	4bb9      	ldr	r3, [pc, #740]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	029b      	lsls	r3, r3, #10
 8001a20:	4013      	ands	r3, r2
 8001a22:	d062      	beq.n	8001aea <HAL_RCC_OscConfig+0x116>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d15e      	bne.n	8001aea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e2d9      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	025b      	lsls	r3, r3, #9
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x78>
 8001a3c:	4bb0      	ldr	r3, [pc, #704]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4baf      	ldr	r3, [pc, #700]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	0249      	lsls	r1, r1, #9
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e020      	b.n	8001a8e <HAL_RCC_OscConfig+0xba>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	23a0      	movs	r3, #160	; 0xa0
 8001a52:	02db      	lsls	r3, r3, #11
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d10e      	bne.n	8001a76 <HAL_RCC_OscConfig+0xa2>
 8001a58:	4ba9      	ldr	r3, [pc, #676]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4ba8      	ldr	r3, [pc, #672]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	02c9      	lsls	r1, r1, #11
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4ba6      	ldr	r3, [pc, #664]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4ba5      	ldr	r3, [pc, #660]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	0249      	lsls	r1, r1, #9
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e00b      	b.n	8001a8e <HAL_RCC_OscConfig+0xba>
 8001a76:	4ba2      	ldr	r3, [pc, #648]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4ba1      	ldr	r3, [pc, #644]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	49a1      	ldr	r1, [pc, #644]	; (8001d04 <HAL_RCC_OscConfig+0x330>)
 8001a7e:	400a      	ands	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	4b9f      	ldr	r3, [pc, #636]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b9e      	ldr	r3, [pc, #632]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	499f      	ldr	r1, [pc, #636]	; (8001d08 <HAL_RCC_OscConfig+0x334>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d014      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f995 	bl	8000dc4 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f990 	bl	8000dc4 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e298      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab2:	4b93      	ldr	r3, [pc, #588]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	029b      	lsls	r3, r3, #10
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xcc>
 8001abe:	e015      	b.n	8001aec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f980 	bl	8000dc4 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aca:	f7ff f97b 	bl	8000dc4 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e283      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001adc:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	029b      	lsls	r3, r3, #10
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0xf6>
 8001ae8:	e000      	b.n	8001aec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2202      	movs	r2, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d100      	bne.n	8001af8 <HAL_RCC_OscConfig+0x124>
 8001af6:	e099      	b.n	8001c2c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af8:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2238      	movs	r2, #56	; 0x38
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b02:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2203      	movs	r2, #3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d102      	bne.n	8001b18 <HAL_RCC_OscConfig+0x144>
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d002      	beq.n	8001b1e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d135      	bne.n	8001b8a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b1e:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4013      	ands	r3, r2
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x162>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e256      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4a74      	ldr	r2, [pc, #464]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	021a      	lsls	r2, r3, #8
 8001b46:	4b6e      	ldr	r3, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b52:	4b6b      	ldr	r3, [pc, #428]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6e      	ldr	r2, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x33c>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b66:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0adb      	lsrs	r3, r3, #11
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	4013      	ands	r3, r2
 8001b70:	4a68      	ldr	r2, [pc, #416]	; (8001d14 <HAL_RCC_OscConfig+0x340>)
 8001b72:	40da      	lsrs	r2, r3
 8001b74:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x344>)
 8001b76:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_OscConfig+0x348>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff f8c5 	bl	8000d0c <HAL_InitTick>
 8001b82:	1e03      	subs	r3, r0, #0
 8001b84:	d051      	beq.n	8001c2a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e22c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d030      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b92:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a5e      	ldr	r2, [pc, #376]	; (8001d10 <HAL_RCC_OscConfig+0x33c>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ba6:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	0049      	lsls	r1, r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f906 	bl	8000dc4 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f901 	bl	8000dc4 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e209      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a4a      	ldr	r2, [pc, #296]	; (8001d0c <HAL_RCC_OscConfig+0x338>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	021a      	lsls	r2, r3, #8
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	e01b      	b.n	8001c2c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	4949      	ldr	r1, [pc, #292]	; (8001d20 <HAL_RCC_OscConfig+0x34c>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff f8e0 	bl	8000dc4 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f8db 	bl	8000dc4 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1e3      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c1c:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4013      	ands	r3, r2
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x236>
 8001c28:	e000      	b.n	8001c2c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2208      	movs	r2, #8
 8001c32:	4013      	ands	r3, r2
 8001c34:	d047      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c36:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2238      	movs	r2, #56	; 0x38
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b18      	cmp	r3, #24
 8001c40:	d10a      	bne.n	8001c58 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d03c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2f2>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d138      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e1c5      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c64:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f8aa 	bl	8000dc4 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c76:	f7ff f8a5 	bl	8000dc4 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1ad      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d0f1      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2a2>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f890 	bl	8000dc4 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff f88b 	bl	8000dc4 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e193      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d1f1      	bne.n	8001caa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x2fe>
 8001cd0:	e0c6      	b.n	8001e60 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	231f      	movs	r3, #31
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2238      	movs	r2, #56	; 0x38
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d11e      	bne.n	8001d24 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_OscConfig+0x32c>)
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x31e>
 8001cf0:	e0b6      	b.n	8001e60 <HAL_RCC_OscConfig+0x48c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d000      	beq.n	8001cfc <HAL_RCC_OscConfig+0x328>
 8001cfa:	e0b1      	b.n	8001e60 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e171      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
 8001d00:	40021000 	.word	0x40021000
 8001d04:	fffeffff 	.word	0xfffeffff
 8001d08:	fffbffff 	.word	0xfffbffff
 8001d0c:	ffff80ff 	.word	0xffff80ff
 8001d10:	ffffc7ff 	.word	0xffffc7ff
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	20000020 	.word	0x20000020
 8001d1c:	20000024 	.word	0x20000024
 8001d20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d24:	4bb1      	ldr	r3, [pc, #708]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	055b      	lsls	r3, r3, #21
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_OscConfig+0x360>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x362>
 8001d34:	2300      	movs	r3, #0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d011      	beq.n	8001d5e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4bac      	ldr	r3, [pc, #688]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d3e:	4bab      	ldr	r3, [pc, #684]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	0549      	lsls	r1, r1, #21
 8001d44:	430a      	orrs	r2, r1
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d48:	4ba8      	ldr	r3, [pc, #672]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	055b      	lsls	r3, r3, #21
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d56:	231f      	movs	r3, #31
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5e:	4ba4      	ldr	r3, [pc, #656]	; (8001ff0 <HAL_RCC_OscConfig+0x61c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	d11a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d6a:	4ba1      	ldr	r3, [pc, #644]	; (8001ff0 <HAL_RCC_OscConfig+0x61c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4ba0      	ldr	r3, [pc, #640]	; (8001ff0 <HAL_RCC_OscConfig+0x61c>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0049      	lsls	r1, r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d78:	f7ff f824 	bl	8000dc4 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7ff f81f 	bl	8000dc4 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e127      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d94:	4b96      	ldr	r3, [pc, #600]	; (8001ff0 <HAL_RCC_OscConfig+0x61c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3e2>
 8001da8:	4b90      	ldr	r3, [pc, #576]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dac:	4b8f      	ldr	r3, [pc, #572]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001dae:	2101      	movs	r1, #1
 8001db0:	430a      	orrs	r2, r1
 8001db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x41c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x404>
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc2:	4b8a      	ldr	r3, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dca:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001dcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dce:	4b87      	ldr	r3, [pc, #540]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0x41c>
 8001dd8:	4b84      	ldr	r3, [pc, #528]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ddc:	4b83      	ldr	r3, [pc, #524]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de4:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001de8:	4b80      	ldr	r3, [pc, #512]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001dea:	2104      	movs	r1, #4
 8001dec:	438a      	bics	r2, r1
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d014      	beq.n	8001e22 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7fe ffe4 	bl	8000dc4 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e00:	e009      	b.n	8001e16 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7fe ffdf 	bl	8000dc4 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a79      	ldr	r2, [pc, #484]	; (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0e6      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e16:	4b75      	ldr	r3, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x42e>
 8001e20:	e013      	b.n	8001e4a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7fe ffcf 	bl	8000dc4 <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe ffca 	bl	8000dc4 <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4a6f      	ldr	r2, [pc, #444]	; (8001ff4 <HAL_RCC_OscConfig+0x620>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0d1      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e4a:	231f      	movs	r3, #31
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b65      	ldr	r3, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e58:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001e5a:	4967      	ldr	r1, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x624>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d100      	bne.n	8001e6a <HAL_RCC_OscConfig+0x496>
 8001e68:	e0bb      	b.n	8001fe2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6a:	4b60      	ldr	r3, [pc, #384]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2238      	movs	r2, #56	; 0x38
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d100      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4a4>
 8001e76:	e07b      	b.n	8001f70 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d156      	bne.n	8001f2e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b5a      	ldr	r3, [pc, #360]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b59      	ldr	r3, [pc, #356]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001e86:	495d      	ldr	r1, [pc, #372]	; (8001ffc <HAL_RCC_OscConfig+0x628>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ff9a 	bl	8000dc4 <HAL_GetTick>
 8001e90:	0003      	movs	r3, r0
 8001e92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e96:	f7fe ff95 	bl	8000dc4 <HAL_GetTick>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e09d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	049b      	lsls	r3, r3, #18
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb4:	4b4d      	ldr	r3, [pc, #308]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a51      	ldr	r2, [pc, #324]	; (8002000 <HAL_RCC_OscConfig+0x62c>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	4b42      	ldr	r3, [pc, #264]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b40      	ldr	r3, [pc, #256]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	0449      	lsls	r1, r1, #17
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ef6:	4b3d      	ldr	r3, [pc, #244]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0549      	lsls	r1, r1, #21
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe ff5e 	bl	8000dc4 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7fe ff59 	bl	8000dc4 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e061      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f20:	4b32      	ldr	r3, [pc, #200]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	049b      	lsls	r3, r3, #18
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x53a>
 8001f2c:	e059      	b.n	8001fe2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001f34:	4931      	ldr	r1, [pc, #196]	; (8001ffc <HAL_RCC_OscConfig+0x628>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff43 	bl	8000dc4 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ff3e 	bl	8000dc4 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e046      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f56:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	049b      	lsls	r3, r3, #18
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001f68:	4926      	ldr	r1, [pc, #152]	; (8002004 <HAL_RCC_OscConfig+0x630>)
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	e038      	b.n	8001fe2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e033      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x618>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2203      	movs	r2, #3
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d126      	bne.n	8001fde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2270      	movs	r2, #112	; 0x70
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d11f      	bne.n	8001fde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	23fe      	movs	r3, #254	; 0xfe
 8001fa2:	01db      	lsls	r3, r3, #7
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d116      	bne.n	8001fde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	23f8      	movs	r3, #248	; 0xf8
 8001fb4:	039b      	lsls	r3, r3, #14
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d10e      	bne.n	8001fde <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	23e0      	movs	r3, #224	; 0xe0
 8001fc4:	051b      	lsls	r3, r3, #20
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	0f5b      	lsrs	r3, r3, #29
 8001fd4:	075a      	lsls	r2, r3, #29
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b008      	add	sp, #32
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	00001388 	.word	0x00001388
 8001ff8:	efffffff 	.word	0xefffffff
 8001ffc:	feffffff 	.word	0xfeffffff
 8002000:	11c1808c 	.word	0x11c1808c
 8002004:	eefefffc 	.word	0xeefefffc

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0e9      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2207      	movs	r2, #7
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d91e      	bls.n	8002068 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2207      	movs	r2, #7
 8002030:	4393      	bics	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800203c:	f7fe fec2 	bl	8000dc4 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002044:	e009      	b.n	800205a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7fe febd 	bl	8000dc4 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	4a6a      	ldr	r2, [pc, #424]	; (80021fc <HAL_RCC_ClockConfig+0x1f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0ca      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2207      	movs	r2, #7
 8002060:	4013      	ands	r3, r2
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d015      	beq.n	800209e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d006      	beq.n	800208a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800207c:	4b60      	ldr	r3, [pc, #384]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002082:	21e0      	movs	r1, #224	; 0xe0
 8002084:	01c9      	lsls	r1, r1, #7
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4a5d      	ldr	r2, [pc, #372]	; (8002204 <HAL_RCC_ClockConfig+0x1fc>)
 8002090:	4013      	ands	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d057      	beq.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	d12b      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e097      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c8:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	049b      	lsls	r3, r3, #18
 80020d0:	4013      	ands	r3, r2
 80020d2:	d11f      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e08b      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	d113      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e07f      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f8:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d108      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e074      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e06d      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2207      	movs	r2, #7
 800211a:	4393      	bics	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002128:	f7fe fe4c 	bl	8000dc4 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002130:	e009      	b.n	8002146 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002132:	f7fe fe47 	bl	8000dc4 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <HAL_RCC_ClockConfig+0x1f4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e054      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2238      	movs	r2, #56	; 0x38
 800214c:	401a      	ands	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	429a      	cmp	r2, r3
 8002156:	d1ec      	bne.n	8002132 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2207      	movs	r2, #7
 800215e:	4013      	ands	r3, r2
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d21e      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2207      	movs	r2, #7
 800216c:	4393      	bics	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002178:	f7fe fe24 	bl	8000dc4 <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002180:	e009      	b.n	8002196 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7fe fe1f 	bl	8000dc4 <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_RCC_ClockConfig+0x1f4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e02c      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2207      	movs	r2, #7
 800219c:	4013      	ands	r3, r2
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1ee      	bne.n	8002182 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2204      	movs	r2, #4
 80021aa:	4013      	ands	r3, r2
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4a15      	ldr	r2, [pc, #84]	; (8002208 <HAL_RCC_ClockConfig+0x200>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021c2:	f000 f829 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021c6:	0001      	movs	r1, r0
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_ClockConfig+0x1f8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	220f      	movs	r2, #15
 80021d0:	401a      	ands	r2, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_RCC_ClockConfig+0x204>)
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	58d3      	ldr	r3, [r2, r3]
 80021d8:	221f      	movs	r2, #31
 80021da:	4013      	ands	r3, r2
 80021dc:	000a      	movs	r2, r1
 80021de:	40da      	lsrs	r2, r3
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_ClockConfig+0x208>)
 80021e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_ClockConfig+0x20c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7fe fd8f 	bl	8000d0c <HAL_InitTick>
 80021ee:	0003      	movs	r3, r0
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b004      	add	sp, #16
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40022000 	.word	0x40022000
 80021fc:	00001388 	.word	0x00001388
 8002200:	40021000 	.word	0x40021000
 8002204:	fffff0ff 	.word	0xfffff0ff
 8002208:	ffff8fff 	.word	0xffff8fff
 800220c:	0800413c 	.word	0x0800413c
 8002210:	20000020 	.word	0x20000020
 8002214:	20000024 	.word	0x20000024

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221e:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2238      	movs	r2, #56	; 0x38
 8002224:	4013      	ands	r3, r2
 8002226:	d10f      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0adb      	lsrs	r3, r3, #11
 800222e:	2207      	movs	r2, #7
 8002230:	4013      	ands	r3, r2
 8002232:	2201      	movs	r2, #1
 8002234:	409a      	lsls	r2, r3
 8002236:	0013      	movs	r3, r2
 8002238:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	4835      	ldr	r0, [pc, #212]	; (8002314 <HAL_RCC_GetSysClockFreq+0xfc>)
 800223e:	f7fd ff69 	bl	8000114 <__udivsi3>
 8002242:	0003      	movs	r3, r0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e05d      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002248:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2238      	movs	r2, #56	; 0x38
 800224e:	4013      	ands	r3, r2
 8002250:	2b08      	cmp	r3, #8
 8002252:	d102      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_GetSysClockFreq+0x100>)
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e054      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2238      	movs	r2, #56	; 0x38
 8002260:	4013      	ands	r3, r2
 8002262:	2b10      	cmp	r3, #16
 8002264:	d138      	bne.n	80022d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2203      	movs	r2, #3
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	2207      	movs	r2, #7
 8002278:	4013      	ands	r3, r2
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d10d      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	4824      	ldr	r0, [pc, #144]	; (8002318 <HAL_RCC_GetSysClockFreq+0x100>)
 8002288:	f7fd ff44 	bl	8000114 <__udivsi3>
 800228c:	0003      	movs	r3, r0
 800228e:	0019      	movs	r1, r3
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	227f      	movs	r2, #127	; 0x7f
 8002298:	4013      	ands	r3, r2
 800229a:	434b      	muls	r3, r1
 800229c:	617b      	str	r3, [r7, #20]
        break;
 800229e:	e00d      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	481c      	ldr	r0, [pc, #112]	; (8002314 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022a4:	f7fd ff36 	bl	8000114 <__udivsi3>
 80022a8:	0003      	movs	r3, r0
 80022aa:	0019      	movs	r1, r3
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	227f      	movs	r2, #127	; 0x7f
 80022b4:	4013      	ands	r3, r2
 80022b6:	434b      	muls	r3, r1
 80022b8:	617b      	str	r3, [r7, #20]
        break;
 80022ba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0f5b      	lsrs	r3, r3, #29
 80022c2:	2207      	movs	r2, #7
 80022c4:	4013      	ands	r3, r2
 80022c6:	3301      	adds	r3, #1
 80022c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	6978      	ldr	r0, [r7, #20]
 80022ce:	f7fd ff21 	bl	8000114 <__udivsi3>
 80022d2:	0003      	movs	r3, r0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	e015      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2238      	movs	r2, #56	; 0x38
 80022de:	4013      	ands	r3, r2
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d103      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2238      	movs	r2, #56	; 0x38
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b18      	cmp	r3, #24
 80022f6:	d103      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80022f8:	23fa      	movs	r3, #250	; 0xfa
 80022fa:	01db      	lsls	r3, r3, #7
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e001      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002304:	693b      	ldr	r3, [r7, #16]
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b006      	add	sp, #24
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40021000 	.word	0x40021000
 8002314:	00f42400 	.word	0x00f42400
 8002318:	007a1200 	.word	0x007a1200

0800231c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b02      	ldr	r3, [pc, #8]	; (800232c <HAL_RCC_GetHCLKFreq+0x10>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	20000020 	.word	0x20000020

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002334:	f7ff fff2 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002338:	0004      	movs	r4, r0
 800233a:	f7ff fb3f 	bl	80019bc <LL_RCC_GetAPB1Prescaler>
 800233e:	0003      	movs	r3, r0
 8002340:	0b1a      	lsrs	r2, r3, #12
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	58d3      	ldr	r3, [r2, r3]
 8002348:	221f      	movs	r2, #31
 800234a:	4013      	ands	r3, r2
 800234c:	40dc      	lsrs	r4, r3
 800234e:	0023      	movs	r3, r4
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	bdb0      	pop	{r4, r5, r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	0800417c 	.word	0x0800417c

0800235c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002364:	2313      	movs	r3, #19
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800236c:	2312      	movs	r3, #18
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002380:	e0a3      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	2011      	movs	r0, #17
 8002384:	183b      	adds	r3, r7, r0
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4bc3      	ldr	r3, [pc, #780]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	055b      	lsls	r3, r3, #21
 8002392:	4013      	ands	r3, r2
 8002394:	d110      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4bc0      	ldr	r3, [pc, #768]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239a:	4bbf      	ldr	r3, [pc, #764]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	0549      	lsls	r1, r1, #21
 80023a0:	430a      	orrs	r2, r1
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80023a4:	4bbc      	ldr	r3, [pc, #752]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	055b      	lsls	r3, r3, #21
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	183b      	adds	r3, r7, r0
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b8:	4bb8      	ldr	r3, [pc, #736]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4bb7      	ldr	r3, [pc, #732]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	0049      	lsls	r1, r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c6:	f7fe fcfd 	bl	8000dc4 <HAL_GetTick>
 80023ca:	0003      	movs	r3, r0
 80023cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ce:	e00b      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fe fcf8 	bl	8000dc4 <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d904      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80023de:	2313      	movs	r3, #19
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2203      	movs	r2, #3
 80023e4:	701a      	strb	r2, [r3, #0]
        break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023e8:	4bac      	ldr	r3, [pc, #688]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d0ed      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80023f4:	2313      	movs	r3, #19
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d154      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023fe:	4ba6      	ldr	r3, [pc, #664]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002400:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002402:	23c0      	movs	r3, #192	; 0xc0
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4013      	ands	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d019      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	429a      	cmp	r2, r3
 8002418:	d014      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800241a:	4b9f      	ldr	r3, [pc, #636]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	4aa0      	ldr	r2, [pc, #640]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002424:	4b9c      	ldr	r3, [pc, #624]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002428:	4b9b      	ldr	r3, [pc, #620]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	0249      	lsls	r1, r1, #9
 800242e:	430a      	orrs	r2, r1
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002432:	4b99      	ldr	r3, [pc, #612]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002434:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002436:	4b98      	ldr	r3, [pc, #608]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	499a      	ldr	r1, [pc, #616]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800243a:	400a      	ands	r2, r1
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800243e:	4b96      	ldr	r3, [pc, #600]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2201      	movs	r2, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d016      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fcba 	bl	8000dc4 <HAL_GetTick>
 8002450:	0003      	movs	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002454:	e00c      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fcb5 	bl	8000dc4 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4a91      	ldr	r2, [pc, #580]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d904      	bls.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002466:	2313      	movs	r3, #19
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2203      	movs	r2, #3
 800246c:	701a      	strb	r2, [r3, #0]
            break;
 800246e:	e004      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002470:	4b89      	ldr	r3, [pc, #548]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	2202      	movs	r2, #2
 8002476:	4013      	ands	r3, r2
 8002478:	d0ed      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800247a:	2313      	movs	r3, #19
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002484:	4b84      	ldr	r3, [pc, #528]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	4a85      	ldr	r2, [pc, #532]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002492:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002494:	430a      	orrs	r2, r1
 8002496:	65da      	str	r2, [r3, #92]	; 0x5c
 8002498:	e00c      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800249a:	2312      	movs	r3, #18
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	2213      	movs	r2, #19
 80024a0:	18ba      	adds	r2, r7, r2
 80024a2:	7812      	ldrb	r2, [r2, #0]
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e005      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a8:	2312      	movs	r3, #18
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2213      	movs	r2, #19
 80024ae:	18ba      	adds	r2, r7, r2
 80024b0:	7812      	ldrb	r2, [r2, #0]
 80024b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024b4:	2311      	movs	r3, #17
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b76      	ldr	r3, [pc, #472]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c2:	4b75      	ldr	r3, [pc, #468]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c4:	4979      	ldr	r1, [pc, #484]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d4:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	2203      	movs	r2, #3
 80024da:	4393      	bics	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e4:	430a      	orrs	r2, r1
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2202      	movs	r2, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f2:	4b69      	ldr	r3, [pc, #420]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	220c      	movs	r2, #12
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002502:	430a      	orrs	r2, r1
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2210      	movs	r2, #16
 800250c:	4013      	ands	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002510:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	4b5e      	ldr	r3, [pc, #376]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002520:	430a      	orrs	r2, r1
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d009      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	4a5f      	ldr	r2, [pc, #380]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002540:	430a      	orrs	r2, r1
 8002542:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4013      	ands	r3, r2
 800254e:	d009      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002550:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	4b4e      	ldr	r3, [pc, #312]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002560:	430a      	orrs	r2, r1
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2220      	movs	r2, #32
 800256a:	4013      	ands	r3, r2
 800256c:	d009      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800256e:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	4a52      	ldr	r2, [pc, #328]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002574:	4013      	ands	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800257e:	430a      	orrs	r2, r1
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	01db      	lsls	r3, r3, #7
 800258a:	4013      	ands	r3, r2
 800258c:	d015      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800258e:	4b42      	ldr	r3, [pc, #264]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	0899      	lsrs	r1, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800259c:	430a      	orrs	r2, r1
 800259e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	05db      	lsls	r3, r3, #23
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d106      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0249      	lsls	r1, r1, #9
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	031b      	lsls	r3, r3, #12
 80025c2:	4013      	ands	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	4393      	bics	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	039b      	lsls	r3, r3, #14
 80025e2:	4013      	ands	r3, r2
 80025e4:	d016      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025e6:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	4a35      	ldr	r2, [pc, #212]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f4:	4b28      	ldr	r3, [pc, #160]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f6:	430a      	orrs	r2, r1
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	03db      	lsls	r3, r3, #15
 8002602:	429a      	cmp	r2, r3
 8002604:	d106      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	0449      	lsls	r1, r1, #17
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	03db      	lsls	r3, r3, #15
 800261c:	4013      	ands	r3, r2
 800261e:	d016      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002630:	430a      	orrs	r2, r1
 8002632:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	045b      	lsls	r3, r3, #17
 800263c:	429a      	cmp	r2, r3
 800263e:	d106      	bne.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0449      	lsls	r1, r1, #17
 800264a:	430a      	orrs	r2, r1
 800264c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	4013      	ands	r3, r2
 8002658:	d016      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002660:	4013      	ands	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266a:	430a      	orrs	r2, r1
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	01db      	lsls	r3, r3, #7
 8002676:	429a      	cmp	r2, r3
 8002678:	d106      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	0249      	lsls	r1, r1, #9
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002688:	2312      	movs	r3, #18
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b006      	add	sp, #24
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
 80026a0:	fffffcff 	.word	0xfffffcff
 80026a4:	fffeffff 	.word	0xfffeffff
 80026a8:	00001388 	.word	0x00001388
 80026ac:	efffffff 	.word	0xefffffff
 80026b0:	fffff3ff 	.word	0xfffff3ff
 80026b4:	fff3ffff 	.word	0xfff3ffff
 80026b8:	ffcfffff 	.word	0xffcfffff
 80026bc:	ffffcfff 	.word	0xffffcfff
 80026c0:	ffbfffff 	.word	0xffbfffff
 80026c4:	feffffff 	.word	0xfeffffff
 80026c8:	ffff3fff 	.word	0xffff3fff

080026cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e046      	b.n	800276c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2288      	movs	r2, #136	; 0x88
 80026e2:	589b      	ldr	r3, [r3, r2]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2284      	movs	r2, #132	; 0x84
 80026ec:	2100      	movs	r1, #0
 80026ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fe f9ea 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2288      	movs	r2, #136	; 0x88
 80026fc:	2124      	movs	r1, #36	; 0x24
 80026fe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2101      	movs	r1, #1
 800270c:	438a      	bics	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 fc12 	bl	8002f3c <UART_SetConfig>
 8002718:	0003      	movs	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e024      	b.n	800276c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fec3 	bl	80034b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	490d      	ldr	r1, [pc, #52]	; (8002774 <HAL_UART_Init+0xa8>)
 800273e:	400a      	ands	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	212a      	movs	r1, #42	; 0x2a
 800274e:	438a      	bics	r2, r1
 8002750:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 ff5b 	bl	8003620 <UART_CheckIdleState>
 800276a:	0003      	movs	r3, r0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	ffffb7ff 	.word	0xffffb7ff

08002778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	1dbb      	adds	r3, r7, #6
 8002786:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2288      	movs	r2, #136	; 0x88
 800278c:	589b      	ldr	r3, [r3, r2]
 800278e:	2b20      	cmp	r3, #32
 8002790:	d000      	beq.n	8002794 <HAL_UART_Transmit+0x1c>
 8002792:	e088      	b.n	80028a6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_UART_Transmit+0x2a>
 800279a:	1dbb      	adds	r3, r7, #6
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e080      	b.n	80028a8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	015b      	lsls	r3, r3, #5
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d109      	bne.n	80027c6 <HAL_UART_Transmit+0x4e>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2201      	movs	r2, #1
 80027be:	4013      	ands	r3, r2
 80027c0:	d001      	beq.n	80027c6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e070      	b.n	80028a8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2290      	movs	r2, #144	; 0x90
 80027ca:	2100      	movs	r1, #0
 80027cc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2288      	movs	r2, #136	; 0x88
 80027d2:	2121      	movs	r1, #33	; 0x21
 80027d4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fe faf5 	bl	8000dc4 <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1dba      	adds	r2, r7, #6
 80027e2:	2154      	movs	r1, #84	; 0x54
 80027e4:	8812      	ldrh	r2, [r2, #0]
 80027e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1dba      	adds	r2, r7, #6
 80027ec:	2156      	movs	r1, #86	; 0x56
 80027ee:	8812      	ldrh	r2, [r2, #0]
 80027f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	015b      	lsls	r3, r3, #5
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d108      	bne.n	8002810 <HAL_UART_Transmit+0x98>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e003      	b.n	8002818 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002818:	e02c      	b.n	8002874 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	0013      	movs	r3, r2
 8002824:	2200      	movs	r2, #0
 8002826:	2180      	movs	r1, #128	; 0x80
 8002828:	f000 ff48 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d001      	beq.n	8002834 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e039      	b.n	80028a8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	001a      	movs	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	05d2      	lsls	r2, r2, #23
 8002846:	0dd2      	lsrs	r2, r2, #23
 8002848:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	3302      	adds	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	e007      	b.n	8002862 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2256      	movs	r2, #86	; 0x56
 8002866:	5a9b      	ldrh	r3, [r3, r2]
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b299      	uxth	r1, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2256      	movs	r2, #86	; 0x56
 8002872:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2256      	movs	r2, #86	; 0x56
 8002878:	5a9b      	ldrh	r3, [r3, r2]
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1cc      	bne.n	800281a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	0013      	movs	r3, r2
 800288a:	2200      	movs	r2, #0
 800288c:	2140      	movs	r1, #64	; 0x40
 800288e:	f000 ff15 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d001      	beq.n	800289a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e006      	b.n	80028a8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2288      	movs	r2, #136	; 0x88
 800289e:	2120      	movs	r1, #32
 80028a0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
  }
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b008      	add	sp, #32
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b0aa      	sub	sp, #168	; 0xa8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	22a4      	movs	r2, #164	; 0xa4
 80028c0:	18b9      	adds	r1, r7, r2
 80028c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	20a0      	movs	r0, #160	; 0xa0
 80028cc:	1839      	adds	r1, r7, r0
 80028ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	249c      	movs	r4, #156	; 0x9c
 80028d8:	1939      	adds	r1, r7, r4
 80028da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028dc:	0011      	movs	r1, r2
 80028de:	18bb      	adds	r3, r7, r2
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4aa2      	ldr	r2, [pc, #648]	; (8002b6c <HAL_UART_IRQHandler+0x2bc>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	2298      	movs	r2, #152	; 0x98
 80028e8:	18bd      	adds	r5, r7, r2
 80028ea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80028ec:	18bb      	adds	r3, r7, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11a      	bne.n	800292a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2220      	movs	r2, #32
 80028fa:	4013      	ands	r3, r2
 80028fc:	d015      	beq.n	800292a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028fe:	183b      	adds	r3, r7, r0
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2220      	movs	r2, #32
 8002904:	4013      	ands	r3, r2
 8002906:	d105      	bne.n	8002914 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002908:	193b      	adds	r3, r7, r4
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	055b      	lsls	r3, r3, #21
 8002910:	4013      	ands	r3, r2
 8002912:	d00a      	beq.n	800292a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	2b00      	cmp	r3, #0
 800291a:	d100      	bne.n	800291e <HAL_UART_IRQHandler+0x6e>
 800291c:	e2dc      	b.n	8002ed8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	0010      	movs	r0, r2
 8002926:	4798      	blx	r3
      }
      return;
 8002928:	e2d6      	b.n	8002ed8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800292a:	2398      	movs	r3, #152	; 0x98
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d100      	bne.n	8002936 <HAL_UART_IRQHandler+0x86>
 8002934:	e122      	b.n	8002b7c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002936:	239c      	movs	r3, #156	; 0x9c
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a8c      	ldr	r2, [pc, #560]	; (8002b70 <HAL_UART_IRQHandler+0x2c0>)
 800293e:	4013      	ands	r3, r2
 8002940:	d106      	bne.n	8002950 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002942:	23a0      	movs	r3, #160	; 0xa0
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a8a      	ldr	r2, [pc, #552]	; (8002b74 <HAL_UART_IRQHandler+0x2c4>)
 800294a:	4013      	ands	r3, r2
 800294c:	d100      	bne.n	8002950 <HAL_UART_IRQHandler+0xa0>
 800294e:	e115      	b.n	8002b7c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002950:	23a4      	movs	r3, #164	; 0xa4
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2201      	movs	r2, #1
 8002958:	4013      	ands	r3, r2
 800295a:	d012      	beq.n	8002982 <HAL_UART_IRQHandler+0xd2>
 800295c:	23a0      	movs	r3, #160	; 0xa0
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4013      	ands	r3, r2
 8002968:	d00b      	beq.n	8002982 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2290      	movs	r2, #144	; 0x90
 8002976:	589b      	ldr	r3, [r3, r2]
 8002978:	2201      	movs	r2, #1
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2190      	movs	r1, #144	; 0x90
 8002980:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002982:	23a4      	movs	r3, #164	; 0xa4
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d011      	beq.n	80029b2 <HAL_UART_IRQHandler+0x102>
 800298e:	239c      	movs	r3, #156	; 0x9c
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2201      	movs	r2, #1
 8002996:	4013      	ands	r3, r2
 8002998:	d00b      	beq.n	80029b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2202      	movs	r2, #2
 80029a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2290      	movs	r2, #144	; 0x90
 80029a6:	589b      	ldr	r3, [r3, r2]
 80029a8:	2204      	movs	r2, #4
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2190      	movs	r1, #144	; 0x90
 80029b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029b2:	23a4      	movs	r3, #164	; 0xa4
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2204      	movs	r2, #4
 80029ba:	4013      	ands	r3, r2
 80029bc:	d011      	beq.n	80029e2 <HAL_UART_IRQHandler+0x132>
 80029be:	239c      	movs	r3, #156	; 0x9c
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2201      	movs	r2, #1
 80029c6:	4013      	ands	r3, r2
 80029c8:	d00b      	beq.n	80029e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2204      	movs	r2, #4
 80029d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2290      	movs	r2, #144	; 0x90
 80029d6:	589b      	ldr	r3, [r3, r2]
 80029d8:	2202      	movs	r2, #2
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2190      	movs	r1, #144	; 0x90
 80029e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029e2:	23a4      	movs	r3, #164	; 0xa4
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2208      	movs	r2, #8
 80029ea:	4013      	ands	r3, r2
 80029ec:	d017      	beq.n	8002a1e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029ee:	23a0      	movs	r3, #160	; 0xa0
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2220      	movs	r2, #32
 80029f6:	4013      	ands	r3, r2
 80029f8:	d105      	bne.n	8002a06 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80029fa:	239c      	movs	r3, #156	; 0x9c
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5b      	ldr	r2, [pc, #364]	; (8002b70 <HAL_UART_IRQHandler+0x2c0>)
 8002a02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a04:	d00b      	beq.n	8002a1e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2290      	movs	r2, #144	; 0x90
 8002a12:	589b      	ldr	r3, [r3, r2]
 8002a14:	2208      	movs	r2, #8
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2190      	movs	r1, #144	; 0x90
 8002a1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a1e:	23a4      	movs	r3, #164	; 0xa4
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_UART_IRQHandler+0x1a4>
 8002a2c:	23a0      	movs	r3, #160	; 0xa0
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	04db      	lsls	r3, r3, #19
 8002a36:	4013      	ands	r3, r2
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2290      	movs	r2, #144	; 0x90
 8002a48:	589b      	ldr	r3, [r3, r2]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2190      	movs	r1, #144	; 0x90
 8002a52:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2290      	movs	r2, #144	; 0x90
 8002a58:	589b      	ldr	r3, [r3, r2]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d100      	bne.n	8002a60 <HAL_UART_IRQHandler+0x1b0>
 8002a5e:	e23d      	b.n	8002edc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	23a4      	movs	r3, #164	; 0xa4
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2220      	movs	r2, #32
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d015      	beq.n	8002a98 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6c:	23a0      	movs	r3, #160	; 0xa0
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2220      	movs	r2, #32
 8002a74:	4013      	ands	r3, r2
 8002a76:	d106      	bne.n	8002a86 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a78:	239c      	movs	r3, #156	; 0x9c
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	055b      	lsls	r3, r3, #21
 8002a82:	4013      	ands	r3, r2
 8002a84:	d008      	beq.n	8002a98 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	0010      	movs	r0, r2
 8002a96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2290      	movs	r2, #144	; 0x90
 8002a9c:	589b      	ldr	r3, [r3, r2]
 8002a9e:	2194      	movs	r1, #148	; 0x94
 8002aa0:	187a      	adds	r2, r7, r1
 8002aa2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d004      	beq.n	8002abc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2228      	movs	r2, #40	; 0x28
 8002ab8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aba:	d04c      	beq.n	8002b56 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 ffaa 	bl	8003a18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d13c      	bne.n	8002b4c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ad6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ada:	2090      	movs	r0, #144	; 0x90
 8002adc:	183a      	adds	r2, r7, r0
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ae6:	f383 8810 	msr	PRIMASK, r3
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2140      	movs	r1, #64	; 0x40
 8002af8:	438a      	bics	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	183b      	adds	r3, r7, r0
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2280      	movs	r2, #128	; 0x80
 8002b0e:	589b      	ldr	r3, [r3, r2]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	589b      	ldr	r3, [r3, r2]
 8002b1a:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <HAL_UART_IRQHandler+0x2c8>)
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2280      	movs	r2, #128	; 0x80
 8002b22:	589b      	ldr	r3, [r3, r2]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7fe fba7 	bl	8001278 <HAL_DMA_Abort_IT>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d01c      	beq.n	8002b68 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	589b      	ldr	r3, [r3, r2]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	5852      	ldr	r2, [r2, r1]
 8002b3c:	0010      	movs	r0, r2
 8002b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b40:	e012      	b.n	8002b68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 f9f1 	bl	8002f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4a:	e00d      	b.n	8002b68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f9ec 	bl	8002f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b54:	e008      	b.n	8002b68 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 f9e7 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2290      	movs	r2, #144	; 0x90
 8002b62:	2100      	movs	r1, #0
 8002b64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002b66:	e1b9      	b.n	8002edc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	46c0      	nop			; (mov r8, r8)
    return;
 8002b6a:	e1b7      	b.n	8002edc <HAL_UART_IRQHandler+0x62c>
 8002b6c:	0000080f 	.word	0x0000080f
 8002b70:	10000001 	.word	0x10000001
 8002b74:	04000120 	.word	0x04000120
 8002b78:	08003cdd 	.word	0x08003cdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d000      	beq.n	8002b86 <HAL_UART_IRQHandler+0x2d6>
 8002b84:	e13e      	b.n	8002e04 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b86:	23a4      	movs	r3, #164	; 0xa4
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d100      	bne.n	8002b94 <HAL_UART_IRQHandler+0x2e4>
 8002b92:	e137      	b.n	8002e04 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b94:	23a0      	movs	r3, #160	; 0xa0
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d100      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x2f2>
 8002ba0:	e130      	b.n	8002e04 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2240      	movs	r2, #64	; 0x40
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d000      	beq.n	8002bba <HAL_UART_IRQHandler+0x30a>
 8002bb8:	e0a4      	b.n	8002d04 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	589b      	ldr	r3, [r3, r2]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	217e      	movs	r1, #126	; 0x7e
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d100      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x324>
 8002bd2:	e185      	b.n	8002ee0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	225c      	movs	r2, #92	; 0x5c
 8002bd8:	5a9b      	ldrh	r3, [r3, r2]
 8002bda:	187a      	adds	r2, r7, r1
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d300      	bcc.n	8002be4 <HAL_UART_IRQHandler+0x334>
 8002be2:	e17d      	b.n	8002ee0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	187a      	adds	r2, r7, r1
 8002be8:	215e      	movs	r1, #94	; 0x5e
 8002bea:	8812      	ldrh	r2, [r2, #0]
 8002bec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	589b      	ldr	r3, [r3, r2]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d170      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c06:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c08:	2301      	movs	r3, #1
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	f383 8810 	msr	PRIMASK, r3
}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	49b4      	ldr	r1, [pc, #720]	; (8002ef0 <HAL_UART_IRQHandler+0x640>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	f383 8810 	msr	PRIMASK, r3
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c30:	f3ef 8310 	mrs	r3, PRIMASK
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c38:	677b      	str	r3, [r7, #116]	; 0x74
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	438a      	bics	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5c:	f383 8810 	msr	PRIMASK, r3
}
 8002c60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c62:	f3ef 8310 	mrs	r3, PRIMASK
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c72:	f383 8810 	msr	PRIMASK, r3
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2140      	movs	r1, #64	; 0x40
 8002c84:	438a      	bics	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c8a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8e:	f383 8810 	msr	PRIMASK, r3
}
 8002c92:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	228c      	movs	r2, #140	; 0x8c
 8002c98:	2120      	movs	r1, #32
 8002c9a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cac:	2301      	movs	r3, #1
 8002cae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cca:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cce:	f383 8810 	msr	PRIMASK, r3
}
 8002cd2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	589b      	ldr	r3, [r3, r2]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7fe fa6a 	bl	80011b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	225c      	movs	r2, #92	; 0x5c
 8002cea:	5a9a      	ldrh	r2, [r3, r2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	215e      	movs	r1, #94	; 0x5e
 8002cf0:	5a5b      	ldrh	r3, [r3, r1]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0011      	movs	r1, r2
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fd fe99 	bl	8000a34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d02:	e0ed      	b.n	8002ee0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	225c      	movs	r2, #92	; 0x5c
 8002d08:	5a99      	ldrh	r1, [r3, r2]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	225e      	movs	r2, #94	; 0x5e
 8002d0e:	5a9b      	ldrh	r3, [r3, r2]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	208e      	movs	r0, #142	; 0x8e
 8002d14:	183b      	adds	r3, r7, r0
 8002d16:	1a8a      	subs	r2, r1, r2
 8002d18:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	225e      	movs	r2, #94	; 0x5e
 8002d1e:	5a9b      	ldrh	r3, [r3, r2]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d100      	bne.n	8002d28 <HAL_UART_IRQHandler+0x478>
 8002d26:	e0dd      	b.n	8002ee4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002d28:	183b      	adds	r3, r7, r0
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d100      	bne.n	8002d32 <HAL_UART_IRQHandler+0x482>
 8002d30:	e0d8      	b.n	8002ee4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d32:	f3ef 8310 	mrs	r3, PRIMASK
 8002d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d38:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d3a:	2488      	movs	r4, #136	; 0x88
 8002d3c:	193a      	adds	r2, r7, r4
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	2301      	movs	r3, #1
 8002d42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4967      	ldr	r1, [pc, #412]	; (8002ef4 <HAL_UART_IRQHandler+0x644>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d70:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d72:	2484      	movs	r4, #132	; 0x84
 8002d74:	193a      	adds	r2, r7, r4
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	2301      	movs	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f383 8810 	msr	PRIMASK, r3
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	495a      	ldr	r1, [pc, #360]	; (8002ef8 <HAL_UART_IRQHandler+0x648>)
 8002d90:	400a      	ands	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	228c      	movs	r2, #140	; 0x8c
 8002da6:	2120      	movs	r1, #32
 8002da8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbe:	2480      	movs	r4, #128	; 0x80
 8002dc0:	193a      	adds	r2, r7, r4
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	f383 8810 	msr	PRIMASK, r3
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2110      	movs	r1, #16
 8002ddc:	438a      	bics	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002df4:	183b      	adds	r3, r7, r0
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	0011      	movs	r1, r2
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fd fe19 	bl	8000a34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e02:	e06f      	b.n	8002ee4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e04:	23a4      	movs	r3, #164	; 0xa4
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	035b      	lsls	r3, r3, #13
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d010      	beq.n	8002e34 <HAL_UART_IRQHandler+0x584>
 8002e12:	239c      	movs	r3, #156	; 0x9c
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	03db      	lsls	r3, r3, #15
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	0352      	lsls	r2, r2, #13
 8002e28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 ff98 	bl	8003d62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e32:	e05a      	b.n	8002eea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002e34:	23a4      	movs	r3, #164	; 0xa4
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d016      	beq.n	8002e6e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002e40:	23a0      	movs	r3, #160	; 0xa0
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d106      	bne.n	8002e5a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002e4c:	239c      	movs	r3, #156	; 0x9c
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	4013      	ands	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d042      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	0010      	movs	r0, r2
 8002e6a:	4798      	blx	r3
    }
    return;
 8002e6c:	e03c      	b.n	8002ee8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e6e:	23a4      	movs	r3, #164	; 0xa4
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	4013      	ands	r3, r2
 8002e78:	d00a      	beq.n	8002e90 <HAL_UART_IRQHandler+0x5e0>
 8002e7a:	23a0      	movs	r3, #160	; 0xa0
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2240      	movs	r2, #64	; 0x40
 8002e82:	4013      	ands	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 ff3e 	bl	8003d0a <UART_EndTransmit_IT>
    return;
 8002e8e:	e02c      	b.n	8002eea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002e90:	23a4      	movs	r3, #164	; 0xa4
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x606>
 8002e9e:	23a0      	movs	r3, #160	; 0xa0
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 ff67 	bl	8003d82 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eb4:	e019      	b.n	8002eea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002eb6:	23a4      	movs	r3, #164	; 0xa4
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	045b      	lsls	r3, r3, #17
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d012      	beq.n	8002eea <HAL_UART_IRQHandler+0x63a>
 8002ec4:	23a0      	movs	r3, #160	; 0xa0
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da0d      	bge.n	8002eea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 ff4e 	bl	8003d72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ed6:	e008      	b.n	8002eea <HAL_UART_IRQHandler+0x63a>
      return;
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	e006      	b.n	8002eea <HAL_UART_IRQHandler+0x63a>
    return;
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	e004      	b.n	8002eea <HAL_UART_IRQHandler+0x63a>
      return;
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	e002      	b.n	8002eea <HAL_UART_IRQHandler+0x63a>
      return;
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	e000      	b.n	8002eea <HAL_UART_IRQHandler+0x63a>
    return;
 8002ee8:	46c0      	nop			; (mov r8, r8)
  }
}
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b02a      	add	sp, #168	; 0xa8
 8002eee:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef0:	fffffeff 	.word	0xfffffeff
 8002ef4:	fffffedf 	.word	0xfffffedf
 8002ef8:	effffffe 	.word	0xeffffffe

08002efc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	b5b0      	push	{r4, r5, r7, lr}
 8002f3e:	b090      	sub	sp, #64	; 0x40
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f44:	231a      	movs	r3, #26
 8002f46:	2220      	movs	r2, #32
 8002f48:	189b      	adds	r3, r3, r2
 8002f4a:	19db      	adds	r3, r3, r7
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4aaf      	ldr	r2, [pc, #700]	; (800322c <UART_SetConfig+0x2f0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	0019      	movs	r1, r3
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4aaa      	ldr	r2, [pc, #680]	; (8003230 <UART_SetConfig+0x2f4>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	68d9      	ldr	r1, [r3, #12]
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	0003      	movs	r3, r0
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4aa4      	ldr	r2, [pc, #656]	; (8003234 <UART_SetConfig+0x2f8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a9f      	ldr	r2, [pc, #636]	; (8003238 <UART_SetConfig+0x2fc>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	220f      	movs	r2, #15
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	0003      	movs	r3, r0
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a95      	ldr	r2, [pc, #596]	; (800323c <UART_SetConfig+0x300>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d131      	bne.n	8003050 <UART_SetConfig+0x114>
 8002fec:	4b94      	ldr	r3, [pc, #592]	; (8003240 <UART_SetConfig+0x304>)
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d01d      	beq.n	8003034 <UART_SetConfig+0xf8>
 8002ff8:	d823      	bhi.n	8003042 <UART_SetConfig+0x106>
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d00c      	beq.n	8003018 <UART_SetConfig+0xdc>
 8002ffe:	d820      	bhi.n	8003042 <UART_SetConfig+0x106>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <UART_SetConfig+0xce>
 8003004:	2b01      	cmp	r3, #1
 8003006:	d00e      	beq.n	8003026 <UART_SetConfig+0xea>
 8003008:	e01b      	b.n	8003042 <UART_SetConfig+0x106>
 800300a:	231b      	movs	r3, #27
 800300c:	2220      	movs	r2, #32
 800300e:	189b      	adds	r3, r3, r2
 8003010:	19db      	adds	r3, r3, r7
 8003012:	2200      	movs	r2, #0
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e0b4      	b.n	8003182 <UART_SetConfig+0x246>
 8003018:	231b      	movs	r3, #27
 800301a:	2220      	movs	r2, #32
 800301c:	189b      	adds	r3, r3, r2
 800301e:	19db      	adds	r3, r3, r7
 8003020:	2202      	movs	r2, #2
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e0ad      	b.n	8003182 <UART_SetConfig+0x246>
 8003026:	231b      	movs	r3, #27
 8003028:	2220      	movs	r2, #32
 800302a:	189b      	adds	r3, r3, r2
 800302c:	19db      	adds	r3, r3, r7
 800302e:	2204      	movs	r2, #4
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e0a6      	b.n	8003182 <UART_SetConfig+0x246>
 8003034:	231b      	movs	r3, #27
 8003036:	2220      	movs	r2, #32
 8003038:	189b      	adds	r3, r3, r2
 800303a:	19db      	adds	r3, r3, r7
 800303c:	2208      	movs	r2, #8
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e09f      	b.n	8003182 <UART_SetConfig+0x246>
 8003042:	231b      	movs	r3, #27
 8003044:	2220      	movs	r2, #32
 8003046:	189b      	adds	r3, r3, r2
 8003048:	19db      	adds	r3, r3, r7
 800304a:	2210      	movs	r2, #16
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e098      	b.n	8003182 <UART_SetConfig+0x246>
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a7b      	ldr	r2, [pc, #492]	; (8003244 <UART_SetConfig+0x308>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d131      	bne.n	80030be <UART_SetConfig+0x182>
 800305a:	4b79      	ldr	r3, [pc, #484]	; (8003240 <UART_SetConfig+0x304>)
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	220c      	movs	r2, #12
 8003060:	4013      	ands	r3, r2
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d01d      	beq.n	80030a2 <UART_SetConfig+0x166>
 8003066:	d823      	bhi.n	80030b0 <UART_SetConfig+0x174>
 8003068:	2b08      	cmp	r3, #8
 800306a:	d00c      	beq.n	8003086 <UART_SetConfig+0x14a>
 800306c:	d820      	bhi.n	80030b0 <UART_SetConfig+0x174>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <UART_SetConfig+0x13c>
 8003072:	2b04      	cmp	r3, #4
 8003074:	d00e      	beq.n	8003094 <UART_SetConfig+0x158>
 8003076:	e01b      	b.n	80030b0 <UART_SetConfig+0x174>
 8003078:	231b      	movs	r3, #27
 800307a:	2220      	movs	r2, #32
 800307c:	189b      	adds	r3, r3, r2
 800307e:	19db      	adds	r3, r3, r7
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
 8003084:	e07d      	b.n	8003182 <UART_SetConfig+0x246>
 8003086:	231b      	movs	r3, #27
 8003088:	2220      	movs	r2, #32
 800308a:	189b      	adds	r3, r3, r2
 800308c:	19db      	adds	r3, r3, r7
 800308e:	2202      	movs	r2, #2
 8003090:	701a      	strb	r2, [r3, #0]
 8003092:	e076      	b.n	8003182 <UART_SetConfig+0x246>
 8003094:	231b      	movs	r3, #27
 8003096:	2220      	movs	r2, #32
 8003098:	189b      	adds	r3, r3, r2
 800309a:	19db      	adds	r3, r3, r7
 800309c:	2204      	movs	r2, #4
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e06f      	b.n	8003182 <UART_SetConfig+0x246>
 80030a2:	231b      	movs	r3, #27
 80030a4:	2220      	movs	r2, #32
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	19db      	adds	r3, r3, r7
 80030aa:	2208      	movs	r2, #8
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e068      	b.n	8003182 <UART_SetConfig+0x246>
 80030b0:	231b      	movs	r3, #27
 80030b2:	2220      	movs	r2, #32
 80030b4:	189b      	adds	r3, r3, r2
 80030b6:	19db      	adds	r3, r3, r7
 80030b8:	2210      	movs	r2, #16
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e061      	b.n	8003182 <UART_SetConfig+0x246>
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a61      	ldr	r2, [pc, #388]	; (8003248 <UART_SetConfig+0x30c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d106      	bne.n	80030d6 <UART_SetConfig+0x19a>
 80030c8:	231b      	movs	r3, #27
 80030ca:	2220      	movs	r2, #32
 80030cc:	189b      	adds	r3, r3, r2
 80030ce:	19db      	adds	r3, r3, r7
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e055      	b.n	8003182 <UART_SetConfig+0x246>
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a5c      	ldr	r2, [pc, #368]	; (800324c <UART_SetConfig+0x310>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d106      	bne.n	80030ee <UART_SetConfig+0x1b2>
 80030e0:	231b      	movs	r3, #27
 80030e2:	2220      	movs	r2, #32
 80030e4:	189b      	adds	r3, r3, r2
 80030e6:	19db      	adds	r3, r3, r7
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e049      	b.n	8003182 <UART_SetConfig+0x246>
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a50      	ldr	r2, [pc, #320]	; (8003234 <UART_SetConfig+0x2f8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d13e      	bne.n	8003176 <UART_SetConfig+0x23a>
 80030f8:	4b51      	ldr	r3, [pc, #324]	; (8003240 <UART_SetConfig+0x304>)
 80030fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030fc:	23c0      	movs	r3, #192	; 0xc0
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	4013      	ands	r3, r2
 8003102:	22c0      	movs	r2, #192	; 0xc0
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	4293      	cmp	r3, r2
 8003108:	d027      	beq.n	800315a <UART_SetConfig+0x21e>
 800310a:	22c0      	movs	r2, #192	; 0xc0
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	4293      	cmp	r3, r2
 8003110:	d82a      	bhi.n	8003168 <UART_SetConfig+0x22c>
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0112      	lsls	r2, r2, #4
 8003116:	4293      	cmp	r3, r2
 8003118:	d011      	beq.n	800313e <UART_SetConfig+0x202>
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	4293      	cmp	r3, r2
 8003120:	d822      	bhi.n	8003168 <UART_SetConfig+0x22c>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <UART_SetConfig+0x1f4>
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	00d2      	lsls	r2, r2, #3
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <UART_SetConfig+0x210>
 800312e:	e01b      	b.n	8003168 <UART_SetConfig+0x22c>
 8003130:	231b      	movs	r3, #27
 8003132:	2220      	movs	r2, #32
 8003134:	189b      	adds	r3, r3, r2
 8003136:	19db      	adds	r3, r3, r7
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e021      	b.n	8003182 <UART_SetConfig+0x246>
 800313e:	231b      	movs	r3, #27
 8003140:	2220      	movs	r2, #32
 8003142:	189b      	adds	r3, r3, r2
 8003144:	19db      	adds	r3, r3, r7
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e01a      	b.n	8003182 <UART_SetConfig+0x246>
 800314c:	231b      	movs	r3, #27
 800314e:	2220      	movs	r2, #32
 8003150:	189b      	adds	r3, r3, r2
 8003152:	19db      	adds	r3, r3, r7
 8003154:	2204      	movs	r2, #4
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e013      	b.n	8003182 <UART_SetConfig+0x246>
 800315a:	231b      	movs	r3, #27
 800315c:	2220      	movs	r2, #32
 800315e:	189b      	adds	r3, r3, r2
 8003160:	19db      	adds	r3, r3, r7
 8003162:	2208      	movs	r2, #8
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e00c      	b.n	8003182 <UART_SetConfig+0x246>
 8003168:	231b      	movs	r3, #27
 800316a:	2220      	movs	r2, #32
 800316c:	189b      	adds	r3, r3, r2
 800316e:	19db      	adds	r3, r3, r7
 8003170:	2210      	movs	r2, #16
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e005      	b.n	8003182 <UART_SetConfig+0x246>
 8003176:	231b      	movs	r3, #27
 8003178:	2220      	movs	r2, #32
 800317a:	189b      	adds	r3, r3, r2
 800317c:	19db      	adds	r3, r3, r7
 800317e:	2210      	movs	r2, #16
 8003180:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <UART_SetConfig+0x2f8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d000      	beq.n	800318e <UART_SetConfig+0x252>
 800318c:	e0a9      	b.n	80032e2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800318e:	231b      	movs	r3, #27
 8003190:	2220      	movs	r2, #32
 8003192:	189b      	adds	r3, r3, r2
 8003194:	19db      	adds	r3, r3, r7
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d015      	beq.n	80031c8 <UART_SetConfig+0x28c>
 800319c:	dc18      	bgt.n	80031d0 <UART_SetConfig+0x294>
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d00d      	beq.n	80031be <UART_SetConfig+0x282>
 80031a2:	dc15      	bgt.n	80031d0 <UART_SetConfig+0x294>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <UART_SetConfig+0x272>
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d005      	beq.n	80031b8 <UART_SetConfig+0x27c>
 80031ac:	e010      	b.n	80031d0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ae:	f7ff f8bf 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 80031b2:	0003      	movs	r3, r0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031b6:	e014      	b.n	80031e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <UART_SetConfig+0x314>)
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031bc:	e011      	b.n	80031e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031be:	f7ff f82b 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80031c2:	0003      	movs	r3, r0
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031c6:	e00c      	b.n	80031e2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031ce:	e008      	b.n	80031e2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80031d4:	231a      	movs	r3, #26
 80031d6:	2220      	movs	r2, #32
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
        break;
 80031e0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d100      	bne.n	80031ea <UART_SetConfig+0x2ae>
 80031e8:	e14b      	b.n	8003482 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ee:	4b19      	ldr	r3, [pc, #100]	; (8003254 <UART_SetConfig+0x318>)
 80031f0:	0052      	lsls	r2, r2, #1
 80031f2:	5ad3      	ldrh	r3, [r2, r3]
 80031f4:	0019      	movs	r1, r3
 80031f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031f8:	f7fc ff8c 	bl	8000114 <__udivsi3>
 80031fc:	0003      	movs	r3, r0
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	0013      	movs	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	189b      	adds	r3, r3, r2
 800320a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800320c:	429a      	cmp	r2, r3
 800320e:	d305      	bcc.n	800321c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003218:	429a      	cmp	r2, r3
 800321a:	d91d      	bls.n	8003258 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800321c:	231a      	movs	r3, #26
 800321e:	2220      	movs	r2, #32
 8003220:	189b      	adds	r3, r3, r2
 8003222:	19db      	adds	r3, r3, r7
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e12b      	b.n	8003482 <UART_SetConfig+0x546>
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	cfff69f3 	.word	0xcfff69f3
 8003230:	ffffcfff 	.word	0xffffcfff
 8003234:	40008000 	.word	0x40008000
 8003238:	11fff4ff 	.word	0x11fff4ff
 800323c:	40013800 	.word	0x40013800
 8003240:	40021000 	.word	0x40021000
 8003244:	40004400 	.word	0x40004400
 8003248:	40004800 	.word	0x40004800
 800324c:	40004c00 	.word	0x40004c00
 8003250:	00f42400 	.word	0x00f42400
 8003254:	0800419c 	.word	0x0800419c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003264:	4b92      	ldr	r3, [pc, #584]	; (80034b0 <UART_SetConfig+0x574>)
 8003266:	0052      	lsls	r2, r2, #1
 8003268:	5ad3      	ldrh	r3, [r2, r3]
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	69b8      	ldr	r0, [r7, #24]
 8003276:	69f9      	ldr	r1, [r7, #28]
 8003278:	f7fd f8c2 	bl	8000400 <__aeabi_uldivmod>
 800327c:	0002      	movs	r2, r0
 800327e:	000b      	movs	r3, r1
 8003280:	0e11      	lsrs	r1, r2, #24
 8003282:	021d      	lsls	r5, r3, #8
 8003284:	430d      	orrs	r5, r1
 8003286:	0214      	lsls	r4, r2, #8
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68b8      	ldr	r0, [r7, #8]
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	1900      	adds	r0, r0, r4
 800329a:	4169      	adcs	r1, r5
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	2300      	movs	r3, #0
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f7fd f8a9 	bl	8000400 <__aeabi_uldivmod>
 80032ae:	0002      	movs	r2, r0
 80032b0:	000b      	movs	r3, r1
 80032b2:	0013      	movs	r3, r2
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b8:	23c0      	movs	r3, #192	; 0xc0
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	429a      	cmp	r2, r3
 80032be:	d309      	bcc.n	80032d4 <UART_SetConfig+0x398>
 80032c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	035b      	lsls	r3, r3, #13
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d204      	bcs.n	80032d4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	e0d6      	b.n	8003482 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80032d4:	231a      	movs	r3, #26
 80032d6:	2220      	movs	r2, #32
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	19db      	adds	r3, r3, r7
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e0cf      	b.n	8003482 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d000      	beq.n	80032f0 <UART_SetConfig+0x3b4>
 80032ee:	e070      	b.n	80033d2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80032f0:	231b      	movs	r3, #27
 80032f2:	2220      	movs	r2, #32
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	19db      	adds	r3, r3, r7
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d015      	beq.n	800332a <UART_SetConfig+0x3ee>
 80032fe:	dc18      	bgt.n	8003332 <UART_SetConfig+0x3f6>
 8003300:	2b04      	cmp	r3, #4
 8003302:	d00d      	beq.n	8003320 <UART_SetConfig+0x3e4>
 8003304:	dc15      	bgt.n	8003332 <UART_SetConfig+0x3f6>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <UART_SetConfig+0x3d4>
 800330a:	2b02      	cmp	r3, #2
 800330c:	d005      	beq.n	800331a <UART_SetConfig+0x3de>
 800330e:	e010      	b.n	8003332 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7ff f80e 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8003314:	0003      	movs	r3, r0
 8003316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003318:	e014      	b.n	8003344 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800331a:	4b66      	ldr	r3, [pc, #408]	; (80034b4 <UART_SetConfig+0x578>)
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800331e:	e011      	b.n	8003344 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003320:	f7fe ff7a 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003324:	0003      	movs	r3, r0
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003328:	e00c      	b.n	8003344 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003330:	e008      	b.n	8003344 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003336:	231a      	movs	r3, #26
 8003338:	2220      	movs	r2, #32
 800333a:	189b      	adds	r3, r3, r2
 800333c:	19db      	adds	r3, r3, r7
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
        break;
 8003342:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	2b00      	cmp	r3, #0
 8003348:	d100      	bne.n	800334c <UART_SetConfig+0x410>
 800334a:	e09a      	b.n	8003482 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003350:	4b57      	ldr	r3, [pc, #348]	; (80034b0 <UART_SetConfig+0x574>)
 8003352:	0052      	lsls	r2, r2, #1
 8003354:	5ad3      	ldrh	r3, [r2, r3]
 8003356:	0019      	movs	r1, r3
 8003358:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800335a:	f7fc fedb 	bl	8000114 <__udivsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	005a      	lsls	r2, r3, #1
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	18d2      	adds	r2, r2, r3
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	0019      	movs	r1, r3
 8003370:	0010      	movs	r0, r2
 8003372:	f7fc fecf 	bl	8000114 <__udivsi3>
 8003376:	0003      	movs	r3, r0
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	2b0f      	cmp	r3, #15
 800337e:	d921      	bls.n	80033c4 <UART_SetConfig+0x488>
 8003380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	025b      	lsls	r3, r3, #9
 8003386:	429a      	cmp	r2, r3
 8003388:	d21c      	bcs.n	80033c4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	b29a      	uxth	r2, r3
 800338e:	200e      	movs	r0, #14
 8003390:	2420      	movs	r4, #32
 8003392:	1903      	adds	r3, r0, r4
 8003394:	19db      	adds	r3, r3, r7
 8003396:	210f      	movs	r1, #15
 8003398:	438a      	bics	r2, r1
 800339a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2207      	movs	r2, #7
 80033a4:	4013      	ands	r3, r2
 80033a6:	b299      	uxth	r1, r3
 80033a8:	1903      	adds	r3, r0, r4
 80033aa:	19db      	adds	r3, r3, r7
 80033ac:	1902      	adds	r2, r0, r4
 80033ae:	19d2      	adds	r2, r2, r7
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1902      	adds	r2, r0, r4
 80033bc:	19d2      	adds	r2, r2, r7
 80033be:	8812      	ldrh	r2, [r2, #0]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	e05e      	b.n	8003482 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80033c4:	231a      	movs	r3, #26
 80033c6:	2220      	movs	r2, #32
 80033c8:	189b      	adds	r3, r3, r2
 80033ca:	19db      	adds	r3, r3, r7
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e057      	b.n	8003482 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033d2:	231b      	movs	r3, #27
 80033d4:	2220      	movs	r2, #32
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	19db      	adds	r3, r3, r7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d015      	beq.n	800340c <UART_SetConfig+0x4d0>
 80033e0:	dc18      	bgt.n	8003414 <UART_SetConfig+0x4d8>
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d00d      	beq.n	8003402 <UART_SetConfig+0x4c6>
 80033e6:	dc15      	bgt.n	8003414 <UART_SetConfig+0x4d8>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <UART_SetConfig+0x4b6>
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d005      	beq.n	80033fc <UART_SetConfig+0x4c0>
 80033f0:	e010      	b.n	8003414 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f2:	f7fe ff9d 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 80033f6:	0003      	movs	r3, r0
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033fa:	e014      	b.n	8003426 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033fc:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <UART_SetConfig+0x578>)
 80033fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003400:	e011      	b.n	8003426 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003402:	f7fe ff09 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 8003406:	0003      	movs	r3, r0
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800340a:	e00c      	b.n	8003426 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003412:	e008      	b.n	8003426 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003418:	231a      	movs	r3, #26
 800341a:	2220      	movs	r2, #32
 800341c:	189b      	adds	r3, r3, r2
 800341e:	19db      	adds	r3, r3, r7
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
        break;
 8003424:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02a      	beq.n	8003482 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003430:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <UART_SetConfig+0x574>)
 8003432:	0052      	lsls	r2, r2, #1
 8003434:	5ad3      	ldrh	r3, [r2, r3]
 8003436:	0019      	movs	r1, r3
 8003438:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800343a:	f7fc fe6b 	bl	8000114 <__udivsi3>
 800343e:	0003      	movs	r3, r0
 8003440:	001a      	movs	r2, r3
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	18d2      	adds	r2, r2, r3
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	0019      	movs	r1, r3
 8003450:	0010      	movs	r0, r2
 8003452:	f7fc fe5f 	bl	8000114 <__udivsi3>
 8003456:	0003      	movs	r3, r0
 8003458:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	2b0f      	cmp	r3, #15
 800345e:	d90a      	bls.n	8003476 <UART_SetConfig+0x53a>
 8003460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	025b      	lsls	r3, r3, #9
 8003466:	429a      	cmp	r2, r3
 8003468:	d205      	bcs.n	8003476 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	b29a      	uxth	r2, r3
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60da      	str	r2, [r3, #12]
 8003474:	e005      	b.n	8003482 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003476:	231a      	movs	r3, #26
 8003478:	2220      	movs	r2, #32
 800347a:	189b      	adds	r3, r3, r2
 800347c:	19db      	adds	r3, r3, r7
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	226a      	movs	r2, #106	; 0x6a
 8003486:	2101      	movs	r1, #1
 8003488:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	2268      	movs	r2, #104	; 0x68
 800348e:	2101      	movs	r1, #1
 8003490:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	2200      	movs	r2, #0
 8003496:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	2200      	movs	r2, #0
 800349c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800349e:	231a      	movs	r3, #26
 80034a0:	2220      	movs	r2, #32
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	19db      	adds	r3, r3, r7
 80034a6:	781b      	ldrb	r3, [r3, #0]
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b010      	add	sp, #64	; 0x40
 80034ae:	bdb0      	pop	{r4, r5, r7, pc}
 80034b0:	0800419c 	.word	0x0800419c
 80034b4:	00f42400 	.word	0x00f42400

080034b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	2201      	movs	r2, #1
 80034c6:	4013      	ands	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <UART_AdvFeatureConfig+0x144>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	2202      	movs	r2, #2
 80034e8:	4013      	ands	r3, r2
 80034ea:	d00b      	beq.n	8003504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4a43      	ldr	r2, [pc, #268]	; (8003600 <UART_AdvFeatureConfig+0x148>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	2204      	movs	r2, #4
 800350a:	4013      	ands	r3, r2
 800350c:	d00b      	beq.n	8003526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <UART_AdvFeatureConfig+0x14c>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	2208      	movs	r2, #8
 800352c:	4013      	ands	r3, r2
 800352e:	d00b      	beq.n	8003548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a34      	ldr	r2, [pc, #208]	; (8003608 <UART_AdvFeatureConfig+0x150>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	2210      	movs	r2, #16
 800354e:	4013      	ands	r3, r2
 8003550:	d00b      	beq.n	800356a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <UART_AdvFeatureConfig+0x154>)
 800355a:	4013      	ands	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	2220      	movs	r2, #32
 8003570:	4013      	ands	r3, r2
 8003572:	d00b      	beq.n	800358c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4a25      	ldr	r2, [pc, #148]	; (8003610 <UART_AdvFeatureConfig+0x158>)
 800357c:	4013      	ands	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	4013      	ands	r3, r2
 8003594:	d01d      	beq.n	80035d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <UART_AdvFeatureConfig+0x15c>)
 800359e:	4013      	ands	r3, r2
 80035a0:	0019      	movs	r1, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	035b      	lsls	r3, r3, #13
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d10b      	bne.n	80035d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a15      	ldr	r2, [pc, #84]	; (8003618 <UART_AdvFeatureConfig+0x160>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	0019      	movs	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	4013      	ands	r3, r2
 80035da:	d00b      	beq.n	80035f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4a0e      	ldr	r2, [pc, #56]	; (800361c <UART_AdvFeatureConfig+0x164>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	fffdffff 	.word	0xfffdffff
 8003600:	fffeffff 	.word	0xfffeffff
 8003604:	fffbffff 	.word	0xfffbffff
 8003608:	ffff7fff 	.word	0xffff7fff
 800360c:	ffffefff 	.word	0xffffefff
 8003610:	ffffdfff 	.word	0xffffdfff
 8003614:	ffefffff 	.word	0xffefffff
 8003618:	ff9fffff 	.word	0xff9fffff
 800361c:	fff7ffff 	.word	0xfff7ffff

08003620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2290      	movs	r2, #144	; 0x90
 800362c:	2100      	movs	r1, #0
 800362e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003630:	f7fd fbc8 	bl	8000dc4 <HAL_GetTick>
 8003634:	0003      	movs	r3, r0
 8003636:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2208      	movs	r2, #8
 8003640:	4013      	ands	r3, r2
 8003642:	2b08      	cmp	r3, #8
 8003644:	d10c      	bne.n	8003660 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	0391      	lsls	r1, r2, #14
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <UART_CheckIdleState+0x98>)
 8003650:	9200      	str	r2, [sp, #0]
 8003652:	2200      	movs	r2, #0
 8003654:	f000 f832 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 8003658:	1e03      	subs	r3, r0, #0
 800365a:	d001      	beq.n	8003660 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e026      	b.n	80036ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2204      	movs	r2, #4
 8003668:	4013      	ands	r3, r2
 800366a:	2b04      	cmp	r3, #4
 800366c:	d10c      	bne.n	8003688 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	03d1      	lsls	r1, r2, #15
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <UART_CheckIdleState+0x98>)
 8003678:	9200      	str	r2, [sp, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	f000 f81e 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d001      	beq.n	8003688 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e012      	b.n	80036ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2288      	movs	r2, #136	; 0x88
 800368c:	2120      	movs	r1, #32
 800368e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	228c      	movs	r2, #140	; 0x8c
 8003694:	2120      	movs	r1, #32
 8003696:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2284      	movs	r2, #132	; 0x84
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	01ffffff 	.word	0x01ffffff

080036bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b094      	sub	sp, #80	; 0x50
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	1dfb      	adds	r3, r7, #7
 80036ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036cc:	e0a7      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036d0:	3301      	adds	r3, #1
 80036d2:	d100      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80036d4:	e0a3      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fd fb75 	bl	8000dc4 <HAL_GetTick>
 80036da:	0002      	movs	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <UART_WaitOnFlagUntilTimeout+0x30>
 80036e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d13f      	bne.n	800376c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ec:	f3ef 8310 	mrs	r3, PRIMASK
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
 80036f6:	2301      	movs	r3, #1
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	494e      	ldr	r1, [pc, #312]	; (8003848 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800370e:	400a      	ands	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003714:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371e:	f3ef 8310 	mrs	r3, PRIMASK
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	643b      	str	r3, [r7, #64]	; 0x40
 8003728:	2301      	movs	r3, #1
 800372a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2101      	movs	r1, #1
 8003740:	438a      	bics	r2, r1
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	f383 8810 	msr	PRIMASK, r3
}
 800374e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2288      	movs	r2, #136	; 0x88
 8003754:	2120      	movs	r1, #32
 8003756:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	228c      	movs	r2, #140	; 0x8c
 800375c:	2120      	movs	r1, #32
 800375e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2284      	movs	r2, #132	; 0x84
 8003764:	2100      	movs	r1, #0
 8003766:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e069      	b.n	8003840 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2204      	movs	r2, #4
 8003774:	4013      	ands	r3, r2
 8003776:	d052      	beq.n	800381e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69da      	ldr	r2, [r3, #28]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	401a      	ands	r2, r3
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	429a      	cmp	r2, r3
 800378a:	d148      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2280      	movs	r2, #128	; 0x80
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003796:	f3ef 8310 	mrs	r3, PRIMASK
 800379a:	613b      	str	r3, [r7, #16]
  return(result);
 800379c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f383 8810 	msr	PRIMASK, r3
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4924      	ldr	r1, [pc, #144]	; (8003848 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f383 8810 	msr	PRIMASK, r3
}
 80037c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c8:	f3ef 8310 	mrs	r3, PRIMASK
 80037cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80037ce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d2:	2301      	movs	r3, #1
 80037d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f383 8810 	msr	PRIMASK, r3
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2101      	movs	r1, #1
 80037ea:	438a      	bics	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
 80037ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2288      	movs	r2, #136	; 0x88
 80037fe:	2120      	movs	r1, #32
 8003800:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	228c      	movs	r2, #140	; 0x8c
 8003806:	2120      	movs	r1, #32
 8003808:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2290      	movs	r2, #144	; 0x90
 800380e:	2120      	movs	r1, #32
 8003810:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2284      	movs	r2, #132	; 0x84
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e010      	b.n	8003840 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	425a      	negs	r2, r3
 800382e:	4153      	adcs	r3, r2
 8003830:	b2db      	uxtb	r3, r3
 8003832:	001a      	movs	r2, r3
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d100      	bne.n	800383e <UART_WaitOnFlagUntilTimeout+0x182>
 800383c:	e747      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b014      	add	sp, #80	; 0x50
 8003846:	bd80      	pop	{r7, pc}
 8003848:	fffffe5f 	.word	0xfffffe5f

0800384c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b090      	sub	sp, #64	; 0x40
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	1dbb      	adds	r3, r7, #6
 8003858:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1dba      	adds	r2, r7, #6
 8003864:	215c      	movs	r1, #92	; 0x5c
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2290      	movs	r2, #144	; 0x90
 800386e:	2100      	movs	r1, #0
 8003870:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	228c      	movs	r2, #140	; 0x8c
 8003876:	2122      	movs	r1, #34	; 0x22
 8003878:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2280      	movs	r2, #128	; 0x80
 800387e:	589b      	ldr	r3, [r3, r2]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d02d      	beq.n	80038e0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2280      	movs	r2, #128	; 0x80
 8003888:	589b      	ldr	r3, [r3, r2]
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <UART_Start_Receive_DMA+0x140>)
 800388c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2280      	movs	r2, #128	; 0x80
 8003892:	589b      	ldr	r3, [r3, r2]
 8003894:	4a3e      	ldr	r2, [pc, #248]	; (8003990 <UART_Start_Receive_DMA+0x144>)
 8003896:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	589b      	ldr	r3, [r3, r2]
 800389e:	4a3d      	ldr	r2, [pc, #244]	; (8003994 <UART_Start_Receive_DMA+0x148>)
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2280      	movs	r2, #128	; 0x80
 80038a6:	589b      	ldr	r3, [r3, r2]
 80038a8:	2200      	movs	r2, #0
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	5898      	ldr	r0, [r3, r2]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	0019      	movs	r1, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	001a      	movs	r2, r3
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	f7fd fbf0 	bl	80010a8 <HAL_DMA_Start_IT>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d009      	beq.n	80038e0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2290      	movs	r2, #144	; 0x90
 80038d0:	2110      	movs	r1, #16
 80038d2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	228c      	movs	r2, #140	; 0x8c
 80038d8:	2120      	movs	r1, #32
 80038da:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e050      	b.n	8003982 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d019      	beq.n	800391c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f2:	2301      	movs	r3, #1
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	f383 8810 	msr	PRIMASK, r3
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2180      	movs	r1, #128	; 0x80
 800390a:	0049      	lsls	r1, r1, #1
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	f383 8810 	msr	PRIMASK, r3
}
 800391a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391c:	f3ef 8310 	mrs	r3, PRIMASK
 8003920:	613b      	str	r3, [r7, #16]
  return(result);
 8003922:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
 8003926:	2301      	movs	r3, #1
 8003928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f383 8810 	msr	PRIMASK, r3
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f383 8810 	msr	PRIMASK, r3
}
 800394c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800394e:	f3ef 8310 	mrs	r3, PRIMASK
 8003952:	61fb      	str	r3, [r7, #28]
  return(result);
 8003954:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
 8003958:	2301      	movs	r3, #1
 800395a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f383 8810 	msr	PRIMASK, r3
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2140      	movs	r1, #64	; 0x40
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	f383 8810 	msr	PRIMASK, r3
}
 800397e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b010      	add	sp, #64	; 0x40
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	08003ae5 	.word	0x08003ae5
 8003990:	08003c15 	.word	0x08003c15
 8003994:	08003c57 	.word	0x08003c57

08003998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a0:	f3ef 8310 	mrs	r3, PRIMASK
 80039a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80039a6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	2301      	movs	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	21c0      	movs	r1, #192	; 0xc0
 80039c2:	438a      	bics	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d2:	f3ef 8310 	mrs	r3, PRIMASK
 80039d6:	617b      	str	r3, [r7, #20]
  return(result);
 80039d8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	2301      	movs	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f383 8810 	msr	PRIMASK, r3
}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <UART_EndTxTransfer+0x7c>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f383 8810 	msr	PRIMASK, r3
}
 8003a02:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2288      	movs	r2, #136	; 0x88
 8003a08:	2120      	movs	r1, #32
 8003a0a:	5099      	str	r1, [r3, r2]
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b00a      	add	sp, #40	; 0x28
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	ff7fffff 	.word	0xff7fffff

08003a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a20:	f3ef 8310 	mrs	r3, PRIMASK
 8003a24:	617b      	str	r3, [r7, #20]
  return(result);
 8003a26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f383 8810 	msr	PRIMASK, r3
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4926      	ldr	r1, [pc, #152]	; (8003adc <UART_EndRxTransfer+0xc4>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f383 8810 	msr	PRIMASK, r3
}
 8003a50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a52:	f3ef 8310 	mrs	r3, PRIMASK
 8003a56:	623b      	str	r3, [r7, #32]
  return(result);
 8003a58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f383 8810 	msr	PRIMASK, r3
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	491b      	ldr	r1, [pc, #108]	; (8003ae0 <UART_EndRxTransfer+0xc8>)
 8003a74:	400a      	ands	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	f383 8810 	msr	PRIMASK, r3
}
 8003a82:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d118      	bne.n	8003abe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a90:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a96:	2301      	movs	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2110      	movs	r1, #16
 8003aae:	438a      	bics	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f383 8810 	msr	PRIMASK, r3
}
 8003abc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	228c      	movs	r2, #140	; 0x8c
 8003ac2:	2120      	movs	r1, #32
 8003ac4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b00e      	add	sp, #56	; 0x38
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	fffffedf 	.word	0xfffffedf
 8003ae0:	effffffe 	.word	0xeffffffe

08003ae4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b094      	sub	sp, #80	; 0x50
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2220      	movs	r2, #32
 8003afa:	4013      	ands	r3, r2
 8003afc:	d16f      	bne.n	8003bde <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	225e      	movs	r2, #94	; 0x5e
 8003b02:	2100      	movs	r1, #0
 8003b04:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b06:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b0c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b10:	2301      	movs	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f383 8810 	msr	PRIMASK, r3
}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	493a      	ldr	r1, [pc, #232]	; (8003c10 <UART_DMAReceiveCplt+0x12c>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	f383 8810 	msr	PRIMASK, r3
}
 8003b36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b38:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b40:	647b      	str	r3, [r7, #68]	; 0x44
 8003b42:	2301      	movs	r3, #1
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	f383 8810 	msr	PRIMASK, r3
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	438a      	bics	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
 8003b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	f383 8810 	msr	PRIMASK, r3
}
 8003b68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40
 8003b74:	2301      	movs	r3, #1
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2140      	movs	r1, #64	; 0x40
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9e:	228c      	movs	r2, #140	; 0x8c
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d118      	bne.n	8003bde <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bac:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2110      	movs	r1, #16
 8003bce:	438a      	bics	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	2200      	movs	r2, #0
 8003be2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d108      	bne.n	8003bfe <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bee:	225c      	movs	r2, #92	; 0x5c
 8003bf0:	5a9a      	ldrh	r2, [r3, r2]
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7fc ff1c 	bl	8000a34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bfc:	e003      	b.n	8003c06 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c00:	0018      	movs	r0, r3
 8003c02:	f7ff f983 	bl	8002f0c <HAL_UART_RxCpltCallback>
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b014      	add	sp, #80	; 0x50
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	fffffeff 	.word	0xfffffeff

08003c14 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d10a      	bne.n	8003c46 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	225c      	movs	r2, #92	; 0x5c
 8003c34:	5a9b      	ldrh	r3, [r3, r2]
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7fc fef8 	bl	8000a34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c44:	e003      	b.n	8003c4e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7ff f967 	bl	8002f1c <HAL_UART_RxHalfCpltCallback>
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b004      	add	sp, #16
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2288      	movs	r2, #136	; 0x88
 8003c68:	589b      	ldr	r3, [r3, r2]
 8003c6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	228c      	movs	r2, #140	; 0x8c
 8003c70:	589b      	ldr	r3, [r3, r2]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2280      	movs	r2, #128	; 0x80
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d10a      	bne.n	8003c98 <UART_DMAError+0x42>
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b21      	cmp	r3, #33	; 0x21
 8003c86:	d107      	bne.n	8003c98 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2256      	movs	r2, #86	; 0x56
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7ff fe80 	bl	8003998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2240      	movs	r2, #64	; 0x40
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d10a      	bne.n	8003cbc <UART_DMAError+0x66>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b22      	cmp	r3, #34	; 0x22
 8003caa:	d107      	bne.n	8003cbc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	225e      	movs	r2, #94	; 0x5e
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff feae 	bl	8003a18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2290      	movs	r2, #144	; 0x90
 8003cc0:	589b      	ldr	r3, [r3, r2]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2190      	movs	r1, #144	; 0x90
 8003cca:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff f92c 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	225e      	movs	r2, #94	; 0x5e
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2256      	movs	r2, #86	; 0x56
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7ff f915 	bl	8002f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b004      	add	sp, #16
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b086      	sub	sp, #24
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d18:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	438a      	bics	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2288      	movs	r2, #136	; 0x88
 8003d48:	2120      	movs	r1, #32
 8003d4a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff f8d1 	bl	8002efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2284      	movs	r2, #132	; 0x84
 8003da0:	5c9b      	ldrb	r3, [r3, r2]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_UARTEx_DisableFifoMode+0x16>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e027      	b.n	8003dfa <HAL_UARTEx_DisableFifoMode+0x66>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2284      	movs	r2, #132	; 0x84
 8003dae:	2101      	movs	r1, #1
 8003db0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2288      	movs	r2, #136	; 0x88
 8003db6:	2124      	movs	r1, #36	; 0x24
 8003db8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	438a      	bics	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2288      	movs	r2, #136	; 0x88
 8003dec:	2120      	movs	r1, #32
 8003dee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2284      	movs	r2, #132	; 0x84
 8003df4:	2100      	movs	r1, #0
 8003df6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b004      	add	sp, #16
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	dfffffff 	.word	0xdfffffff

08003e08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2284      	movs	r2, #132	; 0x84
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e02e      	b.n	8003e7e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2284      	movs	r2, #132	; 0x84
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2288      	movs	r2, #136	; 0x88
 8003e2c:	2124      	movs	r1, #36	; 0x24
 8003e2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2101      	movs	r1, #1
 8003e44:	438a      	bics	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	08d9      	lsrs	r1, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f000 f8bc 	bl	8003fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2288      	movs	r2, #136	; 0x88
 8003e70:	2120      	movs	r1, #32
 8003e72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2284      	movs	r2, #132	; 0x84
 8003e78:	2100      	movs	r1, #0
 8003e7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2284      	movs	r2, #132	; 0x84
 8003e96:	5c9b      	ldrb	r3, [r3, r2]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e02f      	b.n	8003f00 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2284      	movs	r2, #132	; 0x84
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2288      	movs	r2, #136	; 0x88
 8003eac:	2124      	movs	r1, #36	; 0x24
 8003eae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 f87b 	bl	8003fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2288      	movs	r2, #136	; 0x88
 8003ef2:	2120      	movs	r1, #32
 8003ef4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2284      	movs	r2, #132	; 0x84
 8003efa:	2100      	movs	r1, #0
 8003efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b004      	add	sp, #16
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	f1ffffff 	.word	0xf1ffffff

08003f0c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0c:	b5b0      	push	{r4, r5, r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	1dbb      	adds	r3, r7, #6
 8003f18:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	228c      	movs	r2, #140	; 0x8c
 8003f1e:	589b      	ldr	r3, [r3, r2]
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d156      	bne.n	8003fd2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003f2a:	1dbb      	adds	r3, r7, #6
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e04e      	b.n	8003fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	015b      	lsls	r3, r3, #5
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d109      	bne.n	8003f56 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d001      	beq.n	8003f56 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e03e      	b.n	8003fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003f62:	2527      	movs	r5, #39	; 0x27
 8003f64:	197c      	adds	r4, r7, r5
 8003f66:	1dbb      	adds	r3, r7, #6
 8003f68:	881a      	ldrh	r2, [r3, #0]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff fc6c 	bl	800384c <UART_Start_Receive_DMA>
 8003f74:	0003      	movs	r3, r0
 8003f76:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003f78:	197b      	adds	r3, r7, r5
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d124      	bne.n	8003fca <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d11c      	bne.n	8003fc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f90:	f3ef 8310 	mrs	r3, PRIMASK
 8003f94:	617b      	str	r3, [r7, #20]
  return(result);
 8003f96:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f383 8810 	msr	PRIMASK, r3
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f383 8810 	msr	PRIMASK, r3
}
 8003fc0:	e003      	b.n	8003fca <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003fc2:	2327      	movs	r3, #39	; 0x27
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003fca:	2327      	movs	r3, #39	; 0x27
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	e000      	b.n	8003fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b00a      	add	sp, #40	; 0x28
 8003fda:	bdb0      	pop	{r4, r5, r7, pc}

08003fdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	226a      	movs	r2, #106	; 0x6a
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2268      	movs	r2, #104	; 0x68
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ffc:	e043      	b.n	8004086 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ffe:	260f      	movs	r6, #15
 8004000:	19bb      	adds	r3, r7, r6
 8004002:	2208      	movs	r2, #8
 8004004:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004006:	200e      	movs	r0, #14
 8004008:	183b      	adds	r3, r7, r0
 800400a:	2208      	movs	r2, #8
 800400c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	0e5b      	lsrs	r3, r3, #25
 8004016:	b2da      	uxtb	r2, r3
 8004018:	240d      	movs	r4, #13
 800401a:	193b      	adds	r3, r7, r4
 800401c:	2107      	movs	r1, #7
 800401e:	400a      	ands	r2, r1
 8004020:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	0f5b      	lsrs	r3, r3, #29
 800402a:	b2da      	uxtb	r2, r3
 800402c:	250c      	movs	r5, #12
 800402e:	197b      	adds	r3, r7, r5
 8004030:	2107      	movs	r1, #7
 8004032:	400a      	ands	r2, r1
 8004034:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004036:	183b      	adds	r3, r7, r0
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	197a      	adds	r2, r7, r5
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	4914      	ldr	r1, [pc, #80]	; (8004090 <UARTEx_SetNbDataToProcess+0xb4>)
 8004040:	5c8a      	ldrb	r2, [r1, r2]
 8004042:	435a      	muls	r2, r3
 8004044:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004046:	197b      	adds	r3, r7, r5
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <UARTEx_SetNbDataToProcess+0xb8>)
 800404c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800404e:	0019      	movs	r1, r3
 8004050:	f7fc f8ea 	bl	8000228 <__divsi3>
 8004054:	0003      	movs	r3, r0
 8004056:	b299      	uxth	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	226a      	movs	r2, #106	; 0x6a
 800405c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800405e:	19bb      	adds	r3, r7, r6
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	193a      	adds	r2, r7, r4
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	490a      	ldr	r1, [pc, #40]	; (8004090 <UARTEx_SetNbDataToProcess+0xb4>)
 8004068:	5c8a      	ldrb	r2, [r1, r2]
 800406a:	435a      	muls	r2, r3
 800406c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800406e:	193b      	adds	r3, r7, r4
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	4a08      	ldr	r2, [pc, #32]	; (8004094 <UARTEx_SetNbDataToProcess+0xb8>)
 8004074:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004076:	0019      	movs	r1, r3
 8004078:	f7fc f8d6 	bl	8000228 <__divsi3>
 800407c:	0003      	movs	r3, r0
 800407e:	b299      	uxth	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2268      	movs	r2, #104	; 0x68
 8004084:	5299      	strh	r1, [r3, r2]
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b005      	add	sp, #20
 800408c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	080041b4 	.word	0x080041b4
 8004094:	080041bc 	.word	0x080041bc

08004098 <__libc_init_array>:
 8004098:	b570      	push	{r4, r5, r6, lr}
 800409a:	2600      	movs	r6, #0
 800409c:	4d0c      	ldr	r5, [pc, #48]	; (80040d0 <__libc_init_array+0x38>)
 800409e:	4c0d      	ldr	r4, [pc, #52]	; (80040d4 <__libc_init_array+0x3c>)
 80040a0:	1b64      	subs	r4, r4, r5
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	42a6      	cmp	r6, r4
 80040a6:	d109      	bne.n	80040bc <__libc_init_array+0x24>
 80040a8:	2600      	movs	r6, #0
 80040aa:	f000 f833 	bl	8004114 <_init>
 80040ae:	4d0a      	ldr	r5, [pc, #40]	; (80040d8 <__libc_init_array+0x40>)
 80040b0:	4c0a      	ldr	r4, [pc, #40]	; (80040dc <__libc_init_array+0x44>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	42a6      	cmp	r6, r4
 80040b8:	d105      	bne.n	80040c6 <__libc_init_array+0x2e>
 80040ba:	bd70      	pop	{r4, r5, r6, pc}
 80040bc:	00b3      	lsls	r3, r6, #2
 80040be:	58eb      	ldr	r3, [r5, r3]
 80040c0:	4798      	blx	r3
 80040c2:	3601      	adds	r6, #1
 80040c4:	e7ee      	b.n	80040a4 <__libc_init_array+0xc>
 80040c6:	00b3      	lsls	r3, r6, #2
 80040c8:	58eb      	ldr	r3, [r5, r3]
 80040ca:	4798      	blx	r3
 80040cc:	3601      	adds	r6, #1
 80040ce:	e7f2      	b.n	80040b6 <__libc_init_array+0x1e>
 80040d0:	080041cc 	.word	0x080041cc
 80040d4:	080041cc 	.word	0x080041cc
 80040d8:	080041cc 	.word	0x080041cc
 80040dc:	080041d0 	.word	0x080041d0

080040e0 <memset>:
 80040e0:	0003      	movs	r3, r0
 80040e2:	1882      	adds	r2, r0, r2
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	7019      	strb	r1, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <strncmp>:
 80040f0:	b530      	push	{r4, r5, lr}
 80040f2:	0005      	movs	r5, r0
 80040f4:	1e10      	subs	r0, r2, #0
 80040f6:	d008      	beq.n	800410a <strncmp+0x1a>
 80040f8:	2400      	movs	r4, #0
 80040fa:	3a01      	subs	r2, #1
 80040fc:	5d2b      	ldrb	r3, [r5, r4]
 80040fe:	5d08      	ldrb	r0, [r1, r4]
 8004100:	4283      	cmp	r3, r0
 8004102:	d101      	bne.n	8004108 <strncmp+0x18>
 8004104:	4294      	cmp	r4, r2
 8004106:	d101      	bne.n	800410c <strncmp+0x1c>
 8004108:	1a18      	subs	r0, r3, r0
 800410a:	bd30      	pop	{r4, r5, pc}
 800410c:	3401      	adds	r4, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f4      	bne.n	80040fc <strncmp+0xc>
 8004112:	e7f9      	b.n	8004108 <strncmp+0x18>

08004114 <_init>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr

08004120 <_fini>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr
