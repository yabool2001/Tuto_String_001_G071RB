
Tuto_String_001_G071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800404c  0800404c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800404c  0800404c  0001404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004054  08004054  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800405c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000002c  08004088  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004088  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2b6  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d96  00000000  00000000  0002c30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b1e  00000000  00000000  0002f188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b55b  00000000  00000000  00046ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964ab  00000000  00000000  00052201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e86ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e88  00000000  00000000  000e86fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f9c 	.word	0x08003f9c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	08003f9c 	.word	0x08003f9c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	469b      	mov	fp, r3
 8000476:	d433      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000478:	465a      	mov	r2, fp
 800047a:	4653      	mov	r3, sl
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83a      	bhi.n	8000502 <__udivmoddi4+0xc2>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e078      	b.n	8000584 <__udivmoddi4+0x144>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e075      	b.n	800058a <__udivmoddi4+0x14a>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e028      	b.n	800050a <__udivmoddi4+0xca>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	2320      	movs	r3, #32
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	4652      	mov	r2, sl
 80004e8:	40da      	lsrs	r2, r3
 80004ea:	4641      	mov	r1, r8
 80004ec:	0013      	movs	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	408a      	lsls	r2, r1
 80004f2:	0017      	movs	r7, r2
 80004f4:	4642      	mov	r2, r8
 80004f6:	431f      	orrs	r7, r3
 80004f8:	4653      	mov	r3, sl
 80004fa:	4093      	lsls	r3, r2
 80004fc:	001e      	movs	r6, r3
 80004fe:	42af      	cmp	r7, r5
 8000500:	d9c4      	bls.n	800048c <__udivmoddi4+0x4c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	4643      	mov	r3, r8
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0d9      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000510:	07fb      	lsls	r3, r7, #31
 8000512:	0872      	lsrs	r2, r6, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4646      	mov	r6, r8
 8000518:	087b      	lsrs	r3, r7, #1
 800051a:	e00e      	b.n	800053a <__udivmoddi4+0xfa>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d101      	bne.n	8000524 <__udivmoddi4+0xe4>
 8000520:	42a2      	cmp	r2, r4
 8000522:	d80c      	bhi.n	800053e <__udivmoddi4+0xfe>
 8000524:	1aa4      	subs	r4, r4, r2
 8000526:	419d      	sbcs	r5, r3
 8000528:	2001      	movs	r0, #1
 800052a:	1924      	adds	r4, r4, r4
 800052c:	416d      	adcs	r5, r5
 800052e:	2100      	movs	r1, #0
 8000530:	3e01      	subs	r6, #1
 8000532:	1824      	adds	r4, r4, r0
 8000534:	414d      	adcs	r5, r1
 8000536:	2e00      	cmp	r6, #0
 8000538:	d006      	beq.n	8000548 <__udivmoddi4+0x108>
 800053a:	42ab      	cmp	r3, r5
 800053c:	d9ee      	bls.n	800051c <__udivmoddi4+0xdc>
 800053e:	3e01      	subs	r6, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2e00      	cmp	r6, #0
 8000546:	d1f8      	bne.n	800053a <__udivmoddi4+0xfa>
 8000548:	9800      	ldr	r0, [sp, #0]
 800054a:	9901      	ldr	r1, [sp, #4]
 800054c:	465b      	mov	r3, fp
 800054e:	1900      	adds	r0, r0, r4
 8000550:	4169      	adcs	r1, r5
 8000552:	2b00      	cmp	r3, #0
 8000554:	db24      	blt.n	80005a0 <__udivmoddi4+0x160>
 8000556:	002b      	movs	r3, r5
 8000558:	465a      	mov	r2, fp
 800055a:	4644      	mov	r4, r8
 800055c:	40d3      	lsrs	r3, r2
 800055e:	002a      	movs	r2, r5
 8000560:	40e2      	lsrs	r2, r4
 8000562:	001c      	movs	r4, r3
 8000564:	465b      	mov	r3, fp
 8000566:	0015      	movs	r5, r2
 8000568:	2b00      	cmp	r3, #0
 800056a:	db2a      	blt.n	80005c2 <__udivmoddi4+0x182>
 800056c:	0026      	movs	r6, r4
 800056e:	409e      	lsls	r6, r3
 8000570:	0033      	movs	r3, r6
 8000572:	0026      	movs	r6, r4
 8000574:	4647      	mov	r7, r8
 8000576:	40be      	lsls	r6, r7
 8000578:	0032      	movs	r2, r6
 800057a:	1a80      	subs	r0, r0, r2
 800057c:	4199      	sbcs	r1, r3
 800057e:	9000      	str	r0, [sp, #0]
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	e79f      	b.n	80004c4 <__udivmoddi4+0x84>
 8000584:	42a3      	cmp	r3, r4
 8000586:	d8bc      	bhi.n	8000502 <__udivmoddi4+0xc2>
 8000588:	e783      	b.n	8000492 <__udivmoddi4+0x52>
 800058a:	4642      	mov	r2, r8
 800058c:	2320      	movs	r3, #32
 800058e:	2100      	movs	r1, #0
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	9100      	str	r1, [sp, #0]
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	2201      	movs	r2, #1
 800059a:	40da      	lsrs	r2, r3
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	e786      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	4646      	mov	r6, r8
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0023      	movs	r3, r4
 80005ae:	40f3      	lsrs	r3, r6
 80005b0:	4644      	mov	r4, r8
 80005b2:	4313      	orrs	r3, r2
 80005b4:	002a      	movs	r2, r5
 80005b6:	40e2      	lsrs	r2, r4
 80005b8:	001c      	movs	r4, r3
 80005ba:	465b      	mov	r3, fp
 80005bc:	0015      	movs	r5, r2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dad4      	bge.n	800056c <__udivmoddi4+0x12c>
 80005c2:	4642      	mov	r2, r8
 80005c4:	002f      	movs	r7, r5
 80005c6:	2320      	movs	r3, #32
 80005c8:	0026      	movs	r6, r4
 80005ca:	4097      	lsls	r7, r2
 80005cc:	1a9b      	subs	r3, r3, r2
 80005ce:	40de      	lsrs	r6, r3
 80005d0:	003b      	movs	r3, r7
 80005d2:	4333      	orrs	r3, r6
 80005d4:	e7cd      	b.n	8000572 <__udivmoddi4+0x132>
 80005d6:	46c0      	nop			; (mov r8, r8)

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fac3 	bl	8000bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f87b 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f92d 	bl	8000898 <MX_GPIO_Init>
  MX_DMA_Init();
 800063e:	f000 f90d 	bl	800085c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f8bd 	bl	80007c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA ( &huart2 , rx_buff , sizeof ( rx_buff ) ) ;
 8000646:	4933      	ldr	r1, [pc, #204]	; (8000714 <main+0xe8>)
 8000648:	4b33      	ldr	r3, [pc, #204]	; (8000718 <main+0xec>)
 800064a:	2264      	movs	r2, #100	; 0x64
 800064c:	0018      	movs	r0, r3
 800064e:	f003 fba1 	bl	8003d94 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UART_Transmit ( &huart2 , (const uint8_t *) hello , strlen ( hello ) , UART_TX_TIMEOUT ) ;
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <main+0xf0>)
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff fd55 	bl	8000104 <strlen>
 800065a:	0003      	movs	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	492f      	ldr	r1, [pc, #188]	; (800071c <main+0xf0>)
 8000660:	482d      	ldr	r0, [pc, #180]	; (8000718 <main+0xec>)
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	f001 ffcc 	bl	8002600 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ( received == 1 )
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <main+0xf4>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d1fb      	bne.n	8000668 <main+0x3c>
	  {
		  if ( strncmp ( (const char *) rx_buff  , pw , 4 ) == 0)
 8000670:	492c      	ldr	r1, [pc, #176]	; (8000724 <main+0xf8>)
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <main+0xe8>)
 8000674:	2204      	movs	r2, #4
 8000676:	0018      	movs	r0, r3
 8000678:	f003 fc7e 	bl	8003f78 <strncmp>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d12d      	bne.n	80006dc <main+0xb0>
		  {
			  if ( strlen ( (char *) rx_buff ) > 12 ) // 12 to odpowiednik $PW 3.30300
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <main+0xe8>)
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff fd3e 	bl	8000104 <strlen>
 8000688:	0003      	movs	r3, r0
 800068a:	2b0c      	cmp	r3, #12
 800068c:	d926      	bls.n	80006dc <main+0xb0>
			  {
				  uint8_t i ;
				  for ( i = 4 ; i < 11 ; i++ )
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	2204      	movs	r2, #4
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e01e      	b.n	80006d4 <main+0xa8>
				  {
					  if ( rx_buff[i] >= 46 && rx_buff[i] <= 57 )
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <main+0xe8>)
 800069c:	5cd3      	ldrb	r3, [r2, r3]
 800069e:	2b2d      	cmp	r3, #45	; 0x2d
 80006a0:	d914      	bls.n	80006cc <main+0xa0>
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <main+0xe8>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	2b39      	cmp	r3, #57	; 0x39
 80006ac:	d80e      	bhi.n	80006cc <main+0xa0>
						  tx_buff[i-4] = rx_buff[i] ;
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	3b04      	subs	r3, #4
 80006b8:	4916      	ldr	r1, [pc, #88]	; (8000714 <main+0xe8>)
 80006ba:	5c89      	ldrb	r1, [r1, r2]
 80006bc:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <main+0xfc>)
 80006be:	54d1      	strb	r1, [r2, r3]
				  for ( i = 4 ; i < 11 ; i++ )
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	3201      	adds	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e003      	b.n	80006d4 <main+0xa8>
					  else
					  {
						  tx_buff[0] = 0 ;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <main+0xfc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
						  break ;
 80006d2:	e003      	b.n	80006dc <main+0xb0>
				  for ( i = 4 ; i < 11 ; i++ )
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b0a      	cmp	r3, #10
 80006da:	d9dc      	bls.n	8000696 <main+0x6a>
					  }
				  }
			  }
		  }
		  if ( strncmp ( (const char *) rx_buff  , gn , 4 ) == 0)
 80006dc:	4913      	ldr	r1, [pc, #76]	; (800072c <main+0x100>)
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <main+0xe8>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	0018      	movs	r0, r3
 80006e4:	f003 fc48 	bl	8003f78 <strncmp>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d100      	bne.n	80006ee <main+0xc2>
		  {
			  __NOP () ;
 80006ec:	46c0      	nop			; (mov r8, r8)
		  }
		  HAL_UART_Transmit ( &huart2 , (const uint8_t *) tx_buff , strlen ( (char *) tx_buff ) , UART_TX_TIMEOUT ) ;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <main+0xfc>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff fd07 	bl	8000104 <strlen>
 80006f6:	0003      	movs	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	490b      	ldr	r1, [pc, #44]	; (8000728 <main+0xfc>)
 80006fc:	4806      	ldr	r0, [pc, #24]	; (8000718 <main+0xec>)
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	f001 ff7e 	bl	8002600 <HAL_UART_Transmit>
		  received = 0 ;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <main+0xf4>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
		  rx_buff[0] = 0 ;
 800070a:	4b02      	ldr	r3, [pc, #8]	; (8000714 <main+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
	  if ( received == 1 )
 8000710:	e7aa      	b.n	8000668 <main+0x3c>
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000138 	.word	0x20000138
 8000718:	20000048 	.word	0x20000048
 800071c:	20000000 	.word	0x20000000
 8000720:	20000200 	.word	0x20000200
 8000724:	08003fb4 	.word	0x08003fb4
 8000728:	2000019c 	.word	0x2000019c
 800072c:	08003fbc 	.word	0x08003fbc

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b093      	sub	sp, #76	; 0x4c
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	2410      	movs	r4, #16
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2338      	movs	r3, #56	; 0x38
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 fc11 	bl	8003f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000746:	003b      	movs	r3, r7
 8000748:	0018      	movs	r0, r3
 800074a:	2310      	movs	r3, #16
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f003 fc0a 	bl	8003f68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	0018      	movs	r0, r3
 800075a:	f001 f833 	bl	80017c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2202      	movs	r2, #2
 8000762:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	0052      	lsls	r2, r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	193b      	adds	r3, r7, r4
 8000780:	0018      	movs	r0, r3
 8000782:	f001 f86b 	bl	800185c <HAL_RCC_OscConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800078a:	f000 f8f7 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	003b      	movs	r3, r7
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a6:	003b      	movs	r3, r7
 80007a8:	2100      	movs	r1, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fb70 	bl	8001e90 <HAL_RCC_ClockConfig>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007b4:	f000 f8e2 	bl	800097c <Error_Handler>
  }
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b013      	add	sp, #76	; 0x4c
 80007be:	bd90      	pop	{r4, r7, pc}

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <MX_USART2_UART_Init+0x98>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007cc:	22e1      	movs	r2, #225	; 0xe1
 80007ce:	0252      	lsls	r2, r2, #9
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_USART2_UART_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART2_UART_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_USART2_UART_Init+0x94>)
 800080a:	0018      	movs	r0, r3
 800080c:	f001 fea2 	bl	8002554 <HAL_UART_Init>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000814:	f000 f8b2 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x94>)
 800081a:	2100      	movs	r1, #0
 800081c:	0018      	movs	r0, r3
 800081e:	f003 fa37 	bl	8003c90 <HAL_UARTEx_SetTxFifoThreshold>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000826:	f000 f8a9 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_USART2_UART_Init+0x94>)
 800082c:	2100      	movs	r1, #0
 800082e:	0018      	movs	r0, r3
 8000830:	f003 fa6e 	bl	8003d10 <HAL_UARTEx_SetRxFifoThreshold>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000838:	f000 f8a0 	bl	800097c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x94>)
 800083e:	0018      	movs	r0, r3
 8000840:	f003 f9ec 	bl	8003c1c <HAL_UARTEx_DisableFifoMode>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000848:	f000 f898 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000048 	.word	0x20000048
 8000858:	40004400 	.word	0x40004400

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_DMA_Init+0x38>)
 8000864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_DMA_Init+0x38>)
 8000868:	2101      	movs	r1, #1
 800086a:	430a      	orrs	r2, r1
 800086c:	639a      	str	r2, [r3, #56]	; 0x38
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_DMA_Init+0x38>)
 8000870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000872:	2201      	movs	r2, #1
 8000874:	4013      	ands	r3, r2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2009      	movs	r0, #9
 8000880:	f000 face 	bl	8000e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000884:	2009      	movs	r0, #9
 8000886:	f000 fae0 	bl	8000e4a <HAL_NVIC_EnableIRQ>

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	240c      	movs	r4, #12
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	0018      	movs	r0, r3
 80008a4:	2314      	movs	r3, #20
 80008a6:	001a      	movs	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f003 fb5d 	bl	8003f68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008b4:	2104      	movs	r1, #4
 80008b6:	430a      	orrs	r2, r1
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008be:	2204      	movs	r2, #4
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008cc:	2120      	movs	r1, #32
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d6:	2220      	movs	r2, #32
 80008d8:	4013      	ands	r3, r2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_GPIO_Init+0x9c>)
 80008ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ee:	2201      	movs	r2, #1
 80008f0:	4013      	ands	r3, r2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80008f6:	23a0      	movs	r3, #160	; 0xa0
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 ff42 	bl	8001788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000904:	0021      	movs	r1, r4
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2220      	movs	r2, #32
 800090a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2201      	movs	r2, #1
 8000910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2202      	movs	r2, #2
 800091c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 800091e:	187a      	adds	r2, r7, r1
 8000920:	23a0      	movs	r3, #160	; 0xa0
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fdca 	bl	80014c0 <HAL_GPIO_Init>

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b009      	add	sp, #36	; 0x24
 8000932:	bd90      	pop	{r4, r7, pc}
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	000a      	movs	r2, r1
 8000942:	1cbb      	adds	r3, r7, #2
 8000944:	801a      	strh	r2, [r3, #0]
    if ( huart->Instance == USART2 )
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_UARTEx_RxEventCallback+0x34>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d102      	bne.n	8000956 <HAL_UARTEx_RxEventCallback+0x1e>
    	received = 1 ;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_UARTEx_RxEventCallback+0x38>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA ( &huart2 , rx_buff , sizeof ( rx_buff ) ) ;
 8000956:	4907      	ldr	r1, [pc, #28]	; (8000974 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <HAL_UARTEx_RxEventCallback+0x40>)
 800095a:	2264      	movs	r2, #100	; 0x64
 800095c:	0018      	movs	r0, r3
 800095e:	f003 fa19 	bl	8003d94 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40004400 	.word	0x40004400
 8000970:	20000200 	.word	0x20000200
 8000974:	20000138 	.word	0x20000138
 8000978:	20000048 	.word	0x20000048

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	2101      	movs	r1, #1
 8000996:	430a      	orrs	r2, r1
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	2201      	movs	r2, #1
 80009a0:	4013      	ands	r3, r2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0549      	lsls	r1, r1, #21
 80009b0:	430a      	orrs	r2, r1
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_MspInit+0x44>)
 80009b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	055b      	lsls	r3, r3, #21
 80009bc:	4013      	ands	r3, r2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b097      	sub	sp, #92	; 0x5c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2344      	movs	r3, #68	; 0x44
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	0018      	movs	r0, r3
 80009de:	2314      	movs	r3, #20
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f003 fac0 	bl	8003f68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e8:	2410      	movs	r4, #16
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	0018      	movs	r0, r3
 80009ee:	2334      	movs	r3, #52	; 0x34
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f003 fab8 	bl	8003f68 <memset>
  if(huart->Instance==USART2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a3b      	ldr	r2, [pc, #236]	; (8000aec <HAL_UART_MspInit+0x11c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d170      	bne.n	8000ae4 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	2202      	movs	r2, #2
 8000a06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fbe7 	bl	80021e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a1a:	f7ff ffaf 	bl	800097c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <HAL_UART_MspInit+0x120>)
 8000a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <HAL_UART_MspInit+0x120>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0289      	lsls	r1, r1, #10
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a2c:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <HAL_UART_MspInit+0x120>)
 8000a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	029b      	lsls	r3, r3, #10
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <HAL_UART_MspInit+0x120>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <HAL_UART_MspInit+0x120>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_UART_MspInit+0x120>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8000a52:	2144      	movs	r1, #68	; 0x44
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2201      	movs	r2, #1
 8000a64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2201      	movs	r2, #1
 8000a70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	187a      	adds	r2, r7, r1
 8000a74:	23a0      	movs	r3, #160	; 0xa0
 8000a76:	05db      	lsls	r3, r3, #23
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fd20 	bl	80014c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000a82:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_UART_MspInit+0x128>)
 8000a84:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000a88:	2234      	movs	r2, #52	; 0x34
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 f9e3 	bl	8000e84 <HAL_DMA_Init>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000ac2:	f7ff ff5b 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000acc:	505a      	str	r2, [r3, r1]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_UART_MspInit+0x124>)
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	201c      	movs	r0, #28
 8000ada:	f000 f9a1 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ade:	201c      	movs	r0, #28
 8000ae0:	f000 f9b3 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b017      	add	sp, #92	; 0x5c
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40021000 	.word	0x40021000
 8000af4:	200000dc 	.word	0x200000dc
 8000af8:	40020008 	.word	0x40020008

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f8b6 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <DMA1_Channel1_IRQHandler+0x14>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fb82 	bl	800123c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	200000dc 	.word	0x200000dc

08000b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <USART2_IRQHandler+0x14>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 fdf4 	bl	8002738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000048 	.word	0x20000048

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b6c:	f7ff fff6 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	; (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	; (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b96:	f003 f9c3 	bl	8003f20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b9a:	f7ff fd47 	bl	800062c <main>

08000b9e <LoopForever>:

LoopForever:
  b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
  ldr   r0, =_estack
 8000ba0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000bac:	0800405c 	.word	0x0800405c
  ldr r2, =_sbss
 8000bb0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000bb4:	20000208 	.word	0x20000208

08000bb8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_COMP_IRQHandler>
	...

08000bbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_Init+0x3c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Init+0x3c>)
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	0049      	lsls	r1, r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f810 	bl	8000bfc <HAL_InitTick>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e001      	b.n	8000bec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fece 	bl	8000988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	230f      	movs	r3, #15
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_InitTick+0x88>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d02b      	beq.n	8000c6c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <HAL_InitTick+0x8c>)
 8000c16:	681c      	ldr	r4, [r3, #0]
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_InitTick+0x88>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	23fa      	movs	r3, #250	; 0xfa
 8000c20:	0098      	lsls	r0, r3, #2
 8000c22:	f7ff fa77 	bl	8000114 <__udivsi3>
 8000c26:	0003      	movs	r3, r0
 8000c28:	0019      	movs	r1, r3
 8000c2a:	0020      	movs	r0, r4
 8000c2c:	f7ff fa72 	bl	8000114 <__udivsi3>
 8000c30:	0003      	movs	r3, r0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 f919 	bl	8000e6a <HAL_SYSTICK_Config>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d112      	bne.n	8000c62 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d80a      	bhi.n	8000c58 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	2301      	movs	r3, #1
 8000c46:	425b      	negs	r3, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 f8e8 	bl	8000e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_InitTick+0x90>)
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e00d      	b.n	8000c74 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e008      	b.n	8000c74 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c62:	230f      	movs	r3, #15
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e003      	b.n	8000c74 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	781b      	ldrb	r3, [r3, #0]
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b005      	add	sp, #20
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000028 	.word	0x20000028
 8000c88:	20000020 	.word	0x20000020
 8000c8c:	20000024 	.word	0x20000024

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x1c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	001a      	movs	r2, r3
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	18d2      	adds	r2, r2, r3
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_IncTick+0x20>)
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	20000028 	.word	0x20000028
 8000cb0:	20000204 	.word	0x20000204

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <HAL_GetTick+0x10>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	20000204 	.word	0x20000204

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cda:	d809      	bhi.n	8000cf0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	231f      	movs	r3, #31
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_EnableIRQ+0x30>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4091      	lsls	r1, r2
 8000cec:	000a      	movs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d10:	d828      	bhi.n	8000d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d12:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	33c0      	adds	r3, #192	; 0xc0
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	589b      	ldr	r3, [r3, r2]
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	0011      	movs	r1, r2
 8000d28:	2203      	movs	r2, #3
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	21ff      	movs	r1, #255	; 0xff
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	401a      	ands	r2, r3
 8000d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	019b      	lsls	r3, r3, #6
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	401a      	ands	r2, r3
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0018      	movs	r0, r3
 8000d48:	2303      	movs	r3, #3
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	33c0      	adds	r3, #192	; 0xc0
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d62:	e031      	b.n	8000dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	400b      	ands	r3, r1
 8000d70:	3b08      	subs	r3, #8
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3306      	adds	r3, #6
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	001c      	movs	r4, r3
 8000db4:	230f      	movs	r3, #15
 8000db6:	4023      	ands	r3, r4
 8000db8:	3b08      	subs	r3, #8
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	3306      	adds	r3, #6
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	18c3      	adds	r3, r0, r3
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b003      	add	sp, #12
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	045b      	lsls	r3, r3, #17
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d301      	bcc.n	8000df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dec:	2301      	movs	r3, #1
 8000dee:	e010      	b.n	8000e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <SysTick_Config+0x44>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df8:	2301      	movs	r3, #1
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff ff7c 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x44>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x44>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	1c02      	adds	r2, r0, #0
 8000e30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	0002      	movs	r2, r0
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff33 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ffaf 	bl	8000dd8 <SysTick_Config>
 8000e7a:	0003      	movs	r3, r0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e077      	b.n	8000f86 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a3d      	ldr	r2, [pc, #244]	; (8000f90 <HAL_DMA_Init+0x10c>)
 8000e9c:	4694      	mov	ip, r2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	2114      	movs	r1, #20
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff f936 	bl	8000114 <__udivsi3>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	009a      	lsls	r2, r3, #2
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2225      	movs	r2, #37	; 0x25
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4934      	ldr	r1, [pc, #208]	; (8000f94 <HAL_DMA_Init+0x110>)
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 fa8d 	bl	8001420 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	01db      	lsls	r3, r3, #7
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d102      	bne.n	8000f18 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f20:	213f      	movs	r1, #63	; 0x3f
 8000f22:	400a      	ands	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d011      	beq.n	8000f5c <HAL_DMA_Init+0xd8>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d80d      	bhi.n	8000f5c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 fa98 	bl	8001478 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	e008      	b.n	8000f6e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2225      	movs	r2, #37	; 0x25
 8000f78:	2101      	movs	r1, #1
 8000f7a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2224      	movs	r2, #36	; 0x24
 8000f80:	2100      	movs	r1, #0
 8000f82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	0018      	movs	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	bffdfff8 	.word	0xbffdfff8
 8000f94:	ffff800f 	.word	0xffff800f

08000f98 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa6:	2317      	movs	r3, #23
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2224      	movs	r2, #36	; 0x24
 8000fb2:	5c9b      	ldrb	r3, [r3, r2]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_DMA_Start_IT+0x24>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e06f      	b.n	800109c <HAL_DMA_Start_IT+0x104>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2224      	movs	r2, #36	; 0x24
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2225      	movs	r2, #37	; 0x25
 8000fc8:	5c9b      	ldrb	r3, [r3, r2]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d157      	bne.n	8001080 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2225      	movs	r2, #37	; 0x25
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	438a      	bics	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f9d3 	bl	80013a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d008      	beq.n	8001014 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	210e      	movs	r1, #14
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e00f      	b.n	8001034 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2104      	movs	r1, #4
 8001020:	438a      	bics	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	210a      	movs	r1, #10
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	025b      	lsls	r3, r3, #9
 800103e:	4013      	ands	r3, r2
 8001040:	d008      	beq.n	8001054 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	0049      	lsls	r1, r1, #1
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001058:	2b00      	cmp	r3, #0
 800105a:	d008      	beq.n	800106e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	0049      	lsls	r1, r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e00a      	b.n	8001096 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2224      	movs	r2, #36	; 0x24
 800108a:	2100      	movs	r1, #0
 800108c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800108e:	2317      	movs	r3, #23
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001096:	2317      	movs	r3, #23
 8001098:	18fb      	adds	r3, r7, r3
 800109a:	781b      	ldrb	r3, [r3, #0]
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b006      	add	sp, #24
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e050      	b.n	8001158 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2225      	movs	r2, #37	; 0x25
 80010ba:	5c9b      	ldrb	r3, [r3, r2]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d008      	beq.n	80010d4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2204      	movs	r2, #4
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e041      	b.n	8001158 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	210e      	movs	r1, #14
 80010e0:	438a      	bics	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	491c      	ldr	r1, [pc, #112]	; (8001160 <HAL_DMA_Abort+0xbc>)
 80010f0:	400a      	ands	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2101      	movs	r1, #1
 8001100:	438a      	bics	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_DMA_Abort+0xc0>)
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	221c      	movs	r2, #28
 800110e:	4013      	ands	r3, r2
 8001110:	2201      	movs	r2, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_DMA_Abort+0xc0>)
 8001116:	430a      	orrs	r2, r1
 8001118:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001122:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00c      	beq.n	8001146 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <HAL_DMA_Abort+0xbc>)
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001144:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2225      	movs	r2, #37	; 0x25
 800114a:	2101      	movs	r1, #1
 800114c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2224      	movs	r2, #36	; 0x24
 8001152:	2100      	movs	r1, #0
 8001154:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	fffffeff 	.word	0xfffffeff
 8001164:	40020000 	.word	0x40020000

08001168 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001170:	210f      	movs	r1, #15
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2225      	movs	r2, #37	; 0x25
 800117c:	5c9b      	ldrb	r3, [r3, r2]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d006      	beq.n	8001192 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2204      	movs	r2, #4
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e049      	b.n	8001226 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	210e      	movs	r1, #14
 800119e:	438a      	bics	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	491d      	ldr	r1, [pc, #116]	; (8001234 <HAL_DMA_Abort_IT+0xcc>)
 80011be:	400a      	ands	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_DMA_Abort_IT+0xd0>)
 80011c4:	6859      	ldr	r1, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	221c      	movs	r2, #28
 80011cc:	4013      	ands	r3, r2
 80011ce:	2201      	movs	r2, #1
 80011d0:	409a      	lsls	r2, r3
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_DMA_Abort_IT+0xd0>)
 80011d4:	430a      	orrs	r2, r1
 80011d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00c      	beq.n	8001204 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f4:	490f      	ldr	r1, [pc, #60]	; (8001234 <HAL_DMA_Abort_IT+0xcc>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001202:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2225      	movs	r2, #37	; 0x25
 8001208:	2101      	movs	r1, #1
 800120a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2224      	movs	r2, #36	; 0x24
 8001210:	2100      	movs	r1, #0
 8001212:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	0010      	movs	r0, r2
 8001224:	4798      	blx	r3
    }
  }
  return status;
 8001226:	230f      	movs	r3, #15
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	781b      	ldrb	r3, [r3, #0]
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b004      	add	sp, #16
 8001232:	bd80      	pop	{r7, pc}
 8001234:	fffffeff 	.word	0xfffffeff
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <HAL_DMA_IRQHandler+0x160>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	221c      	movs	r2, #28
 8001258:	4013      	ands	r3, r2
 800125a:	2204      	movs	r2, #4
 800125c:	409a      	lsls	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	d027      	beq.n	80012b6 <HAL_DMA_IRQHandler+0x7a>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2204      	movs	r2, #4
 800126a:	4013      	ands	r3, r2
 800126c:	d023      	beq.n	80012b6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2220      	movs	r2, #32
 8001276:	4013      	ands	r3, r2
 8001278:	d107      	bne.n	800128a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2104      	movs	r1, #4
 8001286:	438a      	bics	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800128a:	4b44      	ldr	r3, [pc, #272]	; (800139c <HAL_DMA_IRQHandler+0x160>)
 800128c:	6859      	ldr	r1, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	221c      	movs	r2, #28
 8001294:	4013      	ands	r3, r2
 8001296:	2204      	movs	r2, #4
 8001298:	409a      	lsls	r2, r3
 800129a:	4b40      	ldr	r3, [pc, #256]	; (800139c <HAL_DMA_IRQHandler+0x160>)
 800129c:	430a      	orrs	r2, r1
 800129e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d100      	bne.n	80012aa <HAL_DMA_IRQHandler+0x6e>
 80012a8:	e073      	b.n	8001392 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	0010      	movs	r0, r2
 80012b2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80012b4:	e06d      	b.n	8001392 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	221c      	movs	r2, #28
 80012bc:	4013      	ands	r3, r2
 80012be:	2202      	movs	r2, #2
 80012c0:	409a      	lsls	r2, r3
 80012c2:	0013      	movs	r3, r2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	d02e      	beq.n	8001328 <HAL_DMA_IRQHandler+0xec>
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2202      	movs	r2, #2
 80012ce:	4013      	ands	r3, r2
 80012d0:	d02a      	beq.n	8001328 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2220      	movs	r2, #32
 80012da:	4013      	ands	r3, r2
 80012dc:	d10b      	bne.n	80012f6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	210a      	movs	r1, #10
 80012ea:	438a      	bics	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2225      	movs	r2, #37	; 0x25
 80012f2:	2101      	movs	r1, #1
 80012f4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_DMA_IRQHandler+0x160>)
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	221c      	movs	r2, #28
 8001300:	4013      	ands	r3, r2
 8001302:	2202      	movs	r2, #2
 8001304:	409a      	lsls	r2, r3
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_DMA_IRQHandler+0x160>)
 8001308:	430a      	orrs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d03a      	beq.n	8001392 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	0010      	movs	r0, r2
 8001324:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001326:	e034      	b.n	8001392 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	221c      	movs	r2, #28
 800132e:	4013      	ands	r3, r2
 8001330:	2208      	movs	r2, #8
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	d02b      	beq.n	8001394 <HAL_DMA_IRQHandler+0x158>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2208      	movs	r2, #8
 8001340:	4013      	ands	r3, r2
 8001342:	d027      	beq.n	8001394 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	210e      	movs	r1, #14
 8001350:	438a      	bics	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_DMA_IRQHandler+0x160>)
 8001356:	6859      	ldr	r1, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	221c      	movs	r2, #28
 800135e:	4013      	ands	r3, r2
 8001360:	2201      	movs	r2, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_DMA_IRQHandler+0x160>)
 8001366:	430a      	orrs	r2, r1
 8001368:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2225      	movs	r2, #37	; 0x25
 8001374:	2101      	movs	r1, #1
 8001376:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2224      	movs	r2, #36	; 0x24
 800137c:	2100      	movs	r1, #0
 800137e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	0010      	movs	r0, r2
 8001390:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46c0      	nop			; (mov r8, r8)
}
 8001396:	46bd      	mov	sp, r7
 8001398:	b004      	add	sp, #16
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40020000 	.word	0x40020000

080013a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80013c8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <DMA_SetConfig+0x7c>)
 80013cc:	6859      	ldr	r1, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	221c      	movs	r2, #28
 80013d4:	4013      	ands	r3, r2
 80013d6:	2201      	movs	r2, #1
 80013d8:	409a      	lsls	r2, r3
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <DMA_SetConfig+0x7c>)
 80013dc:	430a      	orrs	r2, r1
 80013de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b10      	cmp	r3, #16
 80013ee:	d108      	bne.n	8001402 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001400:	e007      	b.n	8001412 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	60da      	str	r2, [r3, #12]
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b004      	add	sp, #16
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	40020000 	.word	0x40020000

08001420 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001430:	4694      	mov	ip, r2
 8001432:	4463      	add	r3, ip
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	001a      	movs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	001a      	movs	r2, r3
 8001442:	23ff      	movs	r3, #255	; 0xff
 8001444:	4013      	ands	r3, r2
 8001446:	3b08      	subs	r3, #8
 8001448:	2114      	movs	r1, #20
 800144a:	0018      	movs	r0, r3
 800144c:	f7fe fe62 	bl	8000114 <__udivsi3>
 8001450:	0003      	movs	r3, r0
 8001452:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001458:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	221f      	movs	r2, #31
 800145e:	4013      	ands	r3, r2
 8001460:	2201      	movs	r2, #1
 8001462:	409a      	lsls	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}
 8001470:	10008200 	.word	0x10008200
 8001474:	40020880 	.word	0x40020880

08001478 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	223f      	movs	r2, #63	; 0x3f
 8001486:	4013      	ands	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800148e:	4694      	mov	ip, r2
 8001490:	4463      	add	r3, ip
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	001a      	movs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800149e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	4013      	ands	r3, r2
 80014a8:	2201      	movs	r2, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	1000823f 	.word	0x1000823f
 80014bc:	40020940 	.word	0x40020940

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e147      	b.n	8001760 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2101      	movs	r1, #1
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4091      	lsls	r1, r2
 80014da:	000a      	movs	r2, r1
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d100      	bne.n	80014e8 <HAL_GPIO_Init+0x28>
 80014e6:	e138      	b.n	800175a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d005      	beq.n	8001500 <HAL_GPIO_Init+0x40>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2203      	movs	r2, #3
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d130      	bne.n	8001562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	409a      	lsls	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	409a      	lsls	r2, r3
 8001522:	0013      	movs	r3, r2
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001536:	2201      	movs	r2, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	2201      	movs	r2, #1
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2203      	movs	r2, #3
 8001568:	4013      	ands	r3, r2
 800156a:	2b03      	cmp	r3, #3
 800156c:	d017      	beq.n	800159e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	409a      	lsls	r2, r3
 8001590:	0013      	movs	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2203      	movs	r2, #3
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d123      	bne.n	80015f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	08da      	lsrs	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3208      	adds	r2, #8
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	58d3      	ldr	r3, [r2, r3]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2207      	movs	r2, #7
 80015bc:	4013      	ands	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	220f      	movs	r2, #15
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	43da      	mvns	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2107      	movs	r1, #7
 80015d6:	400b      	ands	r3, r1
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	08da      	lsrs	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3208      	adds	r2, #8
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	6939      	ldr	r1, [r7, #16]
 80015f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	409a      	lsls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	43da      	mvns	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2203      	movs	r2, #3
 8001610:	401a      	ands	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	23c0      	movs	r3, #192	; 0xc0
 800162c:	029b      	lsls	r3, r3, #10
 800162e:	4013      	ands	r3, r2
 8001630:	d100      	bne.n	8001634 <HAL_GPIO_Init+0x174>
 8001632:	e092      	b.n	800175a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001634:	4a50      	ldr	r2, [pc, #320]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3318      	adds	r3, #24
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	589b      	ldr	r3, [r3, r2]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2203      	movs	r2, #3
 8001646:	4013      	ands	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	220f      	movs	r2, #15
 800164c:	409a      	lsls	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	43da      	mvns	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	23a0      	movs	r3, #160	; 0xa0
 800165c:	05db      	lsls	r3, r3, #23
 800165e:	429a      	cmp	r2, r3
 8001660:	d013      	beq.n	800168a <HAL_GPIO_Init+0x1ca>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a45      	ldr	r2, [pc, #276]	; (800177c <HAL_GPIO_Init+0x2bc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_Init+0x1c6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <HAL_GPIO_Init+0x2c0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_Init+0x1c2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a43      	ldr	r2, [pc, #268]	; (8001784 <HAL_GPIO_Init+0x2c4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_Init+0x1be>
 800167a:	2303      	movs	r3, #3
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x1cc>
 800167e:	2305      	movs	r3, #5
 8001680:	e004      	b.n	800168c <HAL_GPIO_Init+0x1cc>
 8001682:	2302      	movs	r3, #2
 8001684:	e002      	b.n	800168c <HAL_GPIO_Init+0x1cc>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x1cc>
 800168a:	2300      	movs	r3, #0
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	2103      	movs	r1, #3
 8001690:	400a      	ands	r2, r1
 8001692:	00d2      	lsls	r2, r2, #3
 8001694:	4093      	lsls	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800169c:	4936      	ldr	r1, [pc, #216]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3318      	adds	r3, #24
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43da      	mvns	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	035b      	lsls	r3, r3, #13
 80016c2:	4013      	ands	r3, r2
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43da      	mvns	r2, r3
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	039b      	lsls	r3, r3, #14
 80016ec:	4013      	ands	r3, r2
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 8001700:	2384      	movs	r3, #132	; 0x84
 8001702:	58d3      	ldr	r3, [r2, r3]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43da      	mvns	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001724:	4914      	ldr	r1, [pc, #80]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 8001726:	2284      	movs	r2, #132	; 0x84
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	58d3      	ldr	r3, [r2, r3]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	4013      	ands	r3, r2
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001752:	4909      	ldr	r1, [pc, #36]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	40da      	lsrs	r2, r3
 8001768:	1e13      	subs	r3, r2, #0
 800176a:	d000      	beq.n	800176e <HAL_GPIO_Init+0x2ae>
 800176c:	e6b0      	b.n	80014d0 <HAL_GPIO_Init+0x10>
  }
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b006      	add	sp, #24
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021800 	.word	0x40021800
 800177c:	50000400 	.word	0x50000400
 8001780:	50000800 	.word	0x50000800
 8001784:	50000c00 	.word	0x50000c00

08001788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	0008      	movs	r0, r1
 8001792:	0011      	movs	r1, r2
 8001794:	1cbb      	adds	r3, r7, #2
 8001796:	1c02      	adds	r2, r0, #0
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	1c7b      	adds	r3, r7, #1
 800179c:	1c0a      	adds	r2, r1, #0
 800179e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	1c7b      	adds	r3, r7, #1
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a8:	1cbb      	adds	r3, r7, #2
 80017aa:	881a      	ldrh	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017b2:	1cbb      	adds	r3, r7, #2
 80017b4:	881a      	ldrh	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b002      	add	sp, #8
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d11f      	bne.n	8001828 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	0013      	movs	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	189b      	adds	r3, r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4912      	ldr	r1, [pc, #72]	; (8001840 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7fe fc8c 	bl	8000114 <__udivsi3>
 80017fc:	0003      	movs	r3, r0
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001802:	e008      	b.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3b01      	subs	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	e001      	b.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e009      	b.n	800182a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	401a      	ands	r2, r3
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	429a      	cmp	r2, r3
 8001826:	d0ed      	beq.n	8001804 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b004      	add	sp, #16
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40007000 	.word	0x40007000
 8001838:	fffff9ff 	.word	0xfffff9ff
 800183c:	20000020 	.word	0x20000020
 8001840:	000f4240 	.word	0x000f4240

08001844 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <LL_RCC_GetAPB1Prescaler+0x14>)
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	23e0      	movs	r3, #224	; 0xe0
 800184e:	01db      	lsls	r3, r3, #7
 8001850:	4013      	ands	r3, r2
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e2fe      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4013      	ands	r3, r2
 8001876:	d100      	bne.n	800187a <HAL_RCC_OscConfig+0x1e>
 8001878:	e07c      	b.n	8001974 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187a:	4bc3      	ldr	r3, [pc, #780]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2238      	movs	r2, #56	; 0x38
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001884:	4bc0      	ldr	r3, [pc, #768]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2203      	movs	r2, #3
 800188a:	4013      	ands	r3, r2
 800188c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	2b10      	cmp	r3, #16
 8001892:	d102      	bne.n	800189a <HAL_RCC_OscConfig+0x3e>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d002      	beq.n	80018a0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b08      	cmp	r3, #8
 800189e:	d10b      	bne.n	80018b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	4bb9      	ldr	r3, [pc, #740]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	4013      	ands	r3, r2
 80018aa:	d062      	beq.n	8001972 <HAL_RCC_OscConfig+0x116>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d15e      	bne.n	8001972 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e2d9      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	025b      	lsls	r3, r3, #9
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x78>
 80018c4:	4bb0      	ldr	r3, [pc, #704]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4baf      	ldr	r3, [pc, #700]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0249      	lsls	r1, r1, #9
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e020      	b.n	8001916 <HAL_RCC_OscConfig+0xba>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	23a0      	movs	r3, #160	; 0xa0
 80018da:	02db      	lsls	r3, r3, #11
 80018dc:	429a      	cmp	r2, r3
 80018de:	d10e      	bne.n	80018fe <HAL_RCC_OscConfig+0xa2>
 80018e0:	4ba9      	ldr	r3, [pc, #676]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4ba8      	ldr	r3, [pc, #672]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	02c9      	lsls	r1, r1, #11
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	4ba6      	ldr	r3, [pc, #664]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4ba5      	ldr	r3, [pc, #660]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	0249      	lsls	r1, r1, #9
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e00b      	b.n	8001916 <HAL_RCC_OscConfig+0xba>
 80018fe:	4ba2      	ldr	r3, [pc, #648]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4ba1      	ldr	r3, [pc, #644]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001904:	49a1      	ldr	r1, [pc, #644]	; (8001b8c <HAL_RCC_OscConfig+0x330>)
 8001906:	400a      	ands	r2, r1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	4b9f      	ldr	r3, [pc, #636]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b9e      	ldr	r3, [pc, #632]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001910:	499f      	ldr	r1, [pc, #636]	; (8001b90 <HAL_RCC_OscConfig+0x334>)
 8001912:	400a      	ands	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d014      	beq.n	8001948 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff f9c9 	bl	8000cb4 <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff f9c4 	bl	8000cb4 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e298      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800193a:	4b93      	ldr	r3, [pc, #588]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	4013      	ands	r3, r2
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0xcc>
 8001946:	e015      	b.n	8001974 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff f9b4 	bl	8000cb4 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001952:	f7ff f9af 	bl	8000cb4 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e283      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001964:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0xf6>
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001972:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2202      	movs	r2, #2
 800197a:	4013      	ands	r3, r2
 800197c:	d100      	bne.n	8001980 <HAL_RCC_OscConfig+0x124>
 800197e:	e099      	b.n	8001ab4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001980:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2238      	movs	r2, #56	; 0x38
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198a:	4b7f      	ldr	r3, [pc, #508]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2203      	movs	r2, #3
 8001990:	4013      	ands	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d102      	bne.n	80019a0 <HAL_RCC_OscConfig+0x144>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d002      	beq.n	80019a6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d135      	bne.n	8001a12 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a6:	4b78      	ldr	r3, [pc, #480]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4013      	ands	r3, r2
 80019b0:	d005      	beq.n	80019be <HAL_RCC_OscConfig+0x162>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e256      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b72      	ldr	r3, [pc, #456]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a74      	ldr	r2, [pc, #464]	; (8001b94 <HAL_RCC_OscConfig+0x338>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	021a      	lsls	r2, r3, #8
 80019ce:	4b6e      	ldr	r3, [pc, #440]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d112      	bne.n	8001a00 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019da:	4b6b      	ldr	r3, [pc, #428]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6e      	ldr	r2, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x33c>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019ee:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0adb      	lsrs	r3, r3, #11
 80019f4:	2207      	movs	r2, #7
 80019f6:	4013      	ands	r3, r2
 80019f8:	4a68      	ldr	r2, [pc, #416]	; (8001b9c <HAL_RCC_OscConfig+0x340>)
 80019fa:	40da      	lsrs	r2, r3
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x344>)
 80019fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a00:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <HAL_RCC_OscConfig+0x348>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff f8f9 	bl	8000bfc <HAL_InitTick>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d051      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e22c      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d030      	beq.n	8001a7c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a1a:	4b5b      	ldr	r3, [pc, #364]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a5e      	ldr	r2, [pc, #376]	; (8001b98 <HAL_RCC_OscConfig+0x33c>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0049      	lsls	r1, r1, #1
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f93a 	bl	8000cb4 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff f935 	bl	8000cb4 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e209      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4013      	ands	r3, r2
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	021a      	lsls	r2, r3, #8
 8001a74:	4b44      	ldr	r3, [pc, #272]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	e01b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a7c:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	4949      	ldr	r1, [pc, #292]	; (8001ba8 <HAL_RCC_OscConfig+0x34c>)
 8001a84:	400a      	ands	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f914 	bl	8000cb4 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff f90f 	bl	8000cb4 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e1e3      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa4:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4013      	ands	r3, r2
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x236>
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2208      	movs	r2, #8
 8001aba:	4013      	ands	r3, r2
 8001abc:	d047      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2238      	movs	r2, #56	; 0x38
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b18      	cmp	r3, #24
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d03c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2f2>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d138      	bne.n	8001b4e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e1c5      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d019      	beq.n	8001b1c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	430a      	orrs	r2, r1
 8001af2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff f8de 	bl	8000cb4 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff f8d9 	bl	8000cb4 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1ad      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0f1      	beq.n	8001afe <HAL_RCC_OscConfig+0x2a2>
 8001b1a:	e018      	b.n	8001b4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	438a      	bics	r2, r1
 8001b26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f8c4 	bl	8000cb4 <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b32:	f7ff f8bf 	bl	8000cb4 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e193      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d1f1      	bne.n	8001b32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	4013      	ands	r3, r2
 8001b56:	d100      	bne.n	8001b5a <HAL_RCC_OscConfig+0x2fe>
 8001b58:	e0c6      	b.n	8001ce8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5a:	231f      	movs	r3, #31
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2238      	movs	r2, #56	; 0x38
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d11e      	bne.n	8001bac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_OscConfig+0x32c>)
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d100      	bne.n	8001b7a <HAL_RCC_OscConfig+0x31e>
 8001b78:	e0b6      	b.n	8001ce8 <HAL_RCC_OscConfig+0x48c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d000      	beq.n	8001b84 <HAL_RCC_OscConfig+0x328>
 8001b82:	e0b1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e171      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	fffeffff 	.word	0xfffeffff
 8001b90:	fffbffff 	.word	0xfffbffff
 8001b94:	ffff80ff 	.word	0xffff80ff
 8001b98:	ffffc7ff 	.word	0xffffc7ff
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	20000020 	.word	0x20000020
 8001ba4:	20000024 	.word	0x20000024
 8001ba8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bac:	4bb1      	ldr	r3, [pc, #708]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	055b      	lsls	r3, r3, #21
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_OscConfig+0x360>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x362>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d011      	beq.n	8001be6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	4bac      	ldr	r3, [pc, #688]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bc6:	4bab      	ldr	r3, [pc, #684]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	0549      	lsls	r1, r1, #21
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bd0:	4ba8      	ldr	r3, [pc, #672]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	055b      	lsls	r3, r3, #21
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001bde:	231f      	movs	r3, #31
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	4ba4      	ldr	r3, [pc, #656]	; (8001e78 <HAL_RCC_OscConfig+0x61c>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d11a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf2:	4ba1      	ldr	r3, [pc, #644]	; (8001e78 <HAL_RCC_OscConfig+0x61c>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4ba0      	ldr	r3, [pc, #640]	; (8001e78 <HAL_RCC_OscConfig+0x61c>)
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	0049      	lsls	r1, r1, #1
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c00:	f7ff f858 	bl	8000cb4 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0a:	f7ff f853 	bl	8000cb4 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e127      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1c:	4b96      	ldr	r3, [pc, #600]	; (8001e78 <HAL_RCC_OscConfig+0x61c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3e2>
 8001c30:	4b90      	ldr	r3, [pc, #576]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c34:	4b8f      	ldr	r3, [pc, #572]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c3c:	e01c      	b.n	8001c78 <HAL_RCC_OscConfig+0x41c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x404>
 8001c46:	4b8b      	ldr	r3, [pc, #556]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c4a:	4b8a      	ldr	r3, [pc, #552]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c52:	4b88      	ldr	r3, [pc, #544]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c56:	4b87      	ldr	r3, [pc, #540]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0x41c>
 8001c60:	4b84      	ldr	r3, [pc, #528]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c64:	4b83      	ldr	r3, [pc, #524]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	438a      	bics	r2, r1
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c6c:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c70:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001c72:	2104      	movs	r1, #4
 8001c74:	438a      	bics	r2, r1
 8001c76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d014      	beq.n	8001caa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f818 	bl	8000cb4 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f813 	bl	8000cb4 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4a79      	ldr	r2, [pc, #484]	; (8001e7c <HAL_RCC_OscConfig+0x620>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0e6      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9e:	4b75      	ldr	r3, [pc, #468]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x42e>
 8001ca8:	e013      	b.n	8001cd2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff f803 	bl	8000cb4 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7fe fffe 	bl	8000cb4 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	4a6f      	ldr	r2, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x620>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0d1      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc8:	4b6a      	ldr	r3, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2202      	movs	r2, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001cd2:	231f      	movs	r3, #31
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cdc:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce0:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	4967      	ldr	r1, [pc, #412]	; (8001e80 <HAL_RCC_OscConfig+0x624>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x496>
 8001cf0:	e0bb      	b.n	8001e6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf2:	4b60      	ldr	r3, [pc, #384]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2238      	movs	r2, #56	; 0x38
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d100      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4a4>
 8001cfe:	e07b      	b.n	8001df8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d156      	bne.n	8001db6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b5a      	ldr	r3, [pc, #360]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d0e:	495d      	ldr	r1, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x628>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7fe ffce 	bl	8000cb4 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7fe ffc9 	bl	8000cb4 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e09d      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	049b      	lsls	r3, r3, #18
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3c:	4b4d      	ldr	r3, [pc, #308]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4a51      	ldr	r2, [pc, #324]	; (8001e88 <HAL_RCC_OscConfig+0x62c>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b40      	ldr	r3, [pc, #256]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	0449      	lsls	r1, r1, #17
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001d84:	2180      	movs	r1, #128	; 0x80
 8001d86:	0549      	lsls	r1, r1, #21
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7fe ff92 	bl	8000cb4 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe ff8d 	bl	8000cb4 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e061      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	049b      	lsls	r3, r3, #18
 8001db0:	4013      	ands	r3, r2
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x53a>
 8001db4:	e059      	b.n	8001e6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001dbc:	4931      	ldr	r1, [pc, #196]	; (8001e84 <HAL_RCC_OscConfig+0x628>)
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7fe ff77 	bl	8000cb4 <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7fe ff72 	bl	8000cb4 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e046      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	049b      	lsls	r3, r3, #18
 8001de6:	4013      	ands	r3, r2
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001df0:	4926      	ldr	r1, [pc, #152]	; (8001e8c <HAL_RCC_OscConfig+0x630>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	e038      	b.n	8001e6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e033      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x618>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d126      	bne.n	8001e66 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2270      	movs	r2, #112	; 0x70
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d11f      	bne.n	8001e66 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	23fe      	movs	r3, #254	; 0xfe
 8001e2a:	01db      	lsls	r3, r3, #7
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d116      	bne.n	8001e66 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	23f8      	movs	r3, #248	; 0xf8
 8001e3c:	039b      	lsls	r3, r3, #14
 8001e3e:	401a      	ands	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10e      	bne.n	8001e66 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	23e0      	movs	r3, #224	; 0xe0
 8001e4c:	051b      	lsls	r3, r3, #20
 8001e4e:	401a      	ands	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	0f5b      	lsrs	r3, r3, #29
 8001e5c:	075a      	lsls	r2, r3, #29
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b008      	add	sp, #32
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	00001388 	.word	0x00001388
 8001e80:	efffffff 	.word	0xefffffff
 8001e84:	feffffff 	.word	0xfeffffff
 8001e88:	11c1808c 	.word	0x11c1808c
 8001e8c:	eefefffc 	.word	0xeefefffc

08001e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0e9      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b76      	ldr	r3, [pc, #472]	; (8002080 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	4013      	ands	r3, r2
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d91e      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	4393      	bics	r3, r2
 8001eba:	0019      	movs	r1, r3
 8001ebc:	4b70      	ldr	r3, [pc, #448]	; (8002080 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fef6 	bl	8000cb4 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ece:	f7fe fef1 	bl	8000cb4 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4a6a      	ldr	r2, [pc, #424]	; (8002084 <HAL_RCC_ClockConfig+0x1f4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0ca      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ee2:	4b67      	ldr	r3, [pc, #412]	; (8002080 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4013      	ands	r3, r2
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1ee      	bne.n	8001ece <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d015      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2204      	movs	r2, #4
 8001f00:	4013      	ands	r3, r2
 8001f02:	d006      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f04:	4b60      	ldr	r3, [pc, #384]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b5f      	ldr	r3, [pc, #380]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0a:	21e0      	movs	r1, #224	; 0xe0
 8001f0c:	01c9      	lsls	r1, r1, #7
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4a5d      	ldr	r2, [pc, #372]	; (800208c <HAL_RCC_ClockConfig+0x1fc>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d057      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	4013      	ands	r3, r2
 8001f42:	d12b      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e097      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f50:	4b4d      	ldr	r3, [pc, #308]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	049b      	lsls	r3, r3, #18
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d11f      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e08b      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f68:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4013      	ands	r3, r2
 8001f72:	d113      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e07f      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f80:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d108      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e074      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e06d      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fe80 	bl	8000cb4 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fba:	f7fe fe7b 	bl	8000cb4 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	; (8002084 <HAL_RCC_ClockConfig+0x1f4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e054      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2238      	movs	r2, #56	; 0x38
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1ec      	bne.n	8001fba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d21e      	bcs.n	800202c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2207      	movs	r2, #7
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002000:	f7fe fe58 	bl	8000cb4 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002008:	e009      	b.n	800201e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200a:	f7fe fe53 	bl	8000cb4 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_RCC_ClockConfig+0x1f4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e02c      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2207      	movs	r2, #7
 8002024:	4013      	ands	r3, r2
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d1ee      	bne.n	800200a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2204      	movs	r2, #4
 8002032:	4013      	ands	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4a15      	ldr	r2, [pc, #84]	; (8002090 <HAL_RCC_ClockConfig+0x200>)
 800203c:	4013      	ands	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800204a:	f000 f829 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800204e:	0001      	movs	r1, r0
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_ClockConfig+0x1f8>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	220f      	movs	r2, #15
 8002058:	401a      	ands	r2, r3
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_RCC_ClockConfig+0x204>)
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	58d3      	ldr	r3, [r2, r3]
 8002060:	221f      	movs	r2, #31
 8002062:	4013      	ands	r3, r2
 8002064:	000a      	movs	r2, r1
 8002066:	40da      	lsrs	r2, r3
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x208>)
 800206a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_ClockConfig+0x20c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0018      	movs	r0, r3
 8002072:	f7fe fdc3 	bl	8000bfc <HAL_InitTick>
 8002076:	0003      	movs	r3, r0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b004      	add	sp, #16
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40022000 	.word	0x40022000
 8002084:	00001388 	.word	0x00001388
 8002088:	40021000 	.word	0x40021000
 800208c:	fffff0ff 	.word	0xfffff0ff
 8002090:	ffff8fff 	.word	0xffff8fff
 8002094:	08003fc4 	.word	0x08003fc4
 8002098:	20000020 	.word	0x20000020
 800209c:	20000024 	.word	0x20000024

080020a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2238      	movs	r2, #56	; 0x38
 80020ac:	4013      	ands	r3, r2
 80020ae:	d10f      	bne.n	80020d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0adb      	lsrs	r3, r3, #11
 80020b6:	2207      	movs	r2, #7
 80020b8:	4013      	ands	r3, r2
 80020ba:	2201      	movs	r2, #1
 80020bc:	409a      	lsls	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	4835      	ldr	r0, [pc, #212]	; (800219c <HAL_RCC_GetSysClockFreq+0xfc>)
 80020c6:	f7fe f825 	bl	8000114 <__udivsi3>
 80020ca:	0003      	movs	r3, r0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e05d      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2238      	movs	r2, #56	; 0x38
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	e054      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2238      	movs	r2, #56	; 0x38
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d138      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020ee:	4b2a      	ldr	r3, [pc, #168]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2203      	movs	r2, #3
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	2207      	movs	r2, #7
 8002100:	4013      	ands	r3, r2
 8002102:	3301      	adds	r3, #1
 8002104:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d10d      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	4824      	ldr	r0, [pc, #144]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002110:	f7fe f800 	bl	8000114 <__udivsi3>
 8002114:	0003      	movs	r3, r0
 8002116:	0019      	movs	r1, r3
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	227f      	movs	r2, #127	; 0x7f
 8002120:	4013      	ands	r3, r2
 8002122:	434b      	muls	r3, r1
 8002124:	617b      	str	r3, [r7, #20]
        break;
 8002126:	e00d      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	481c      	ldr	r0, [pc, #112]	; (800219c <HAL_RCC_GetSysClockFreq+0xfc>)
 800212c:	f7fd fff2 	bl	8000114 <__udivsi3>
 8002130:	0003      	movs	r3, r0
 8002132:	0019      	movs	r1, r3
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	227f      	movs	r2, #127	; 0x7f
 800213c:	4013      	ands	r3, r2
 800213e:	434b      	muls	r3, r1
 8002140:	617b      	str	r3, [r7, #20]
        break;
 8002142:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0f5b      	lsrs	r3, r3, #29
 800214a:	2207      	movs	r2, #7
 800214c:	4013      	ands	r3, r2
 800214e:	3301      	adds	r3, #1
 8002150:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	6978      	ldr	r0, [r7, #20]
 8002156:	f7fd ffdd 	bl	8000114 <__udivsi3>
 800215a:	0003      	movs	r3, r0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	e015      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2238      	movs	r2, #56	; 0x38
 8002166:	4013      	ands	r3, r2
 8002168:	2b20      	cmp	r3, #32
 800216a:	d103      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	e00b      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2238      	movs	r2, #56	; 0x38
 800217a:	4013      	ands	r3, r2
 800217c:	2b18      	cmp	r3, #24
 800217e:	d103      	bne.n	8002188 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002180:	23fa      	movs	r3, #250	; 0xfa
 8002182:	01db      	lsls	r3, r3, #7
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	e001      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800218c:	693b      	ldr	r3, [r7, #16]
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b006      	add	sp, #24
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	40021000 	.word	0x40021000
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	007a1200 	.word	0x007a1200

080021a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	20000020 	.word	0x20000020

080021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021bc:	f7ff fff2 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c0:	0004      	movs	r4, r0
 80021c2:	f7ff fb3f 	bl	8001844 <LL_RCC_GetAPB1Prescaler>
 80021c6:	0003      	movs	r3, r0
 80021c8:	0b1a      	lsrs	r2, r3, #12
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021cc:	0092      	lsls	r2, r2, #2
 80021ce:	58d3      	ldr	r3, [r2, r3]
 80021d0:	221f      	movs	r2, #31
 80021d2:	4013      	ands	r3, r2
 80021d4:	40dc      	lsrs	r4, r3
 80021d6:	0023      	movs	r3, r4
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bdb0      	pop	{r4, r5, r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	08004004 	.word	0x08004004

080021e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80021ec:	2313      	movs	r3, #19
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021f4:	2312      	movs	r3, #18
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	4013      	ands	r3, r2
 8002206:	d100      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002208:	e0a3      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2011      	movs	r0, #17
 800220c:	183b      	adds	r3, r7, r0
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002212:	4bc3      	ldr	r3, [pc, #780]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	055b      	lsls	r3, r3, #21
 800221a:	4013      	ands	r3, r2
 800221c:	d110      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4bc0      	ldr	r3, [pc, #768]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002222:	4bbf      	ldr	r3, [pc, #764]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	0549      	lsls	r1, r1, #21
 8002228:	430a      	orrs	r2, r1
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c
 800222c:	4bbc      	ldr	r3, [pc, #752]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	055b      	lsls	r3, r3, #21
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223a:	183b      	adds	r3, r7, r0
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002240:	4bb8      	ldr	r3, [pc, #736]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4bb7      	ldr	r3, [pc, #732]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	0049      	lsls	r1, r1, #1
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800224e:	f7fe fd31 	bl	8000cb4 <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002256:	e00b      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002258:	f7fe fd2c 	bl	8000cb4 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d904      	bls.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002266:	2313      	movs	r3, #19
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2203      	movs	r2, #3
 800226c:	701a      	strb	r2, [r3, #0]
        break;
 800226e:	e005      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002270:	4bac      	ldr	r3, [pc, #688]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4013      	ands	r3, r2
 800227a:	d0ed      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800227c:	2313      	movs	r3, #19
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d154      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002286:	4ba6      	ldr	r3, [pc, #664]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002288:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800228a:	23c0      	movs	r3, #192	; 0xc0
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4013      	ands	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d019      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d014      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a2:	4b9f      	ldr	r3, [pc, #636]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	4aa0      	ldr	r2, [pc, #640]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022ac:	4b9c      	ldr	r3, [pc, #624]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022b0:	4b9b      	ldr	r3, [pc, #620]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	0249      	lsls	r1, r1, #9
 80022b6:	430a      	orrs	r2, r1
 80022b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ba:	4b99      	ldr	r3, [pc, #612]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022be:	4b98      	ldr	r3, [pc, #608]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c0:	499a      	ldr	r1, [pc, #616]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022c6:	4b96      	ldr	r3, [pc, #600]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	d016      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fcee 	bl	8000cb4 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022dc:	e00c      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fce9 	bl	8000cb4 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a91      	ldr	r2, [pc, #580]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d904      	bls.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80022ee:	2313      	movs	r3, #19
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2203      	movs	r2, #3
 80022f4:	701a      	strb	r2, [r3, #0]
            break;
 80022f6:	e004      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f8:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d0ed      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002302:	2313      	movs	r3, #19
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230c:	4b84      	ldr	r3, [pc, #528]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	4a85      	ldr	r2, [pc, #532]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800231a:	4b81      	ldr	r3, [pc, #516]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231c:	430a      	orrs	r2, r1
 800231e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002320:	e00c      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002322:	2312      	movs	r3, #18
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	2213      	movs	r2, #19
 8002328:	18ba      	adds	r2, r7, r2
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e005      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002330:	2312      	movs	r3, #18
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2213      	movs	r2, #19
 8002336:	18ba      	adds	r2, r7, r2
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800233c:	2311      	movs	r3, #17
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800234a:	4b75      	ldr	r3, [pc, #468]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	4979      	ldr	r1, [pc, #484]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800234e:	400a      	ands	r2, r1
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2201      	movs	r2, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800235c:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	2203      	movs	r2, #3
 8002362:	4393      	bics	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236c:	430a      	orrs	r2, r1
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2202      	movs	r2, #2
 8002376:	4013      	ands	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800237a:	4b69      	ldr	r3, [pc, #420]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	220c      	movs	r2, #12
 8002380:	4393      	bics	r3, r2
 8002382:	0019      	movs	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800238a:	430a      	orrs	r2, r1
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2210      	movs	r2, #16
 8002394:	4013      	ands	r3, r2
 8002396:	d009      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	4a66      	ldr	r2, [pc, #408]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800239e:	4013      	ands	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	4a5f      	ldr	r2, [pc, #380]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	4b56      	ldr	r3, [pc, #344]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4013      	ands	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023d8:	4b51      	ldr	r3, [pc, #324]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	4b4e      	ldr	r3, [pc, #312]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e8:	430a      	orrs	r2, r1
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2220      	movs	r2, #32
 80023f2:	4013      	ands	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023f6:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002406:	430a      	orrs	r2, r1
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	01db      	lsls	r3, r3, #7
 8002412:	4013      	ands	r3, r2
 8002414:	d015      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002416:	4b42      	ldr	r3, [pc, #264]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	0899      	lsrs	r1, r3, #2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002424:	430a      	orrs	r2, r1
 8002426:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1a      	ldr	r2, [r3, #32]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	05db      	lsls	r3, r3, #23
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002434:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	0249      	lsls	r1, r1, #9
 800243e:	430a      	orrs	r2, r1
 8002440:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	031b      	lsls	r3, r3, #12
 800244a:	4013      	ands	r3, r2
 800244c:	d009      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245e:	430a      	orrs	r2, r1
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	039b      	lsls	r3, r3, #14
 800246a:	4013      	ands	r3, r2
 800246c:	d016      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	4a35      	ldr	r2, [pc, #212]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002474:	4013      	ands	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800247e:	430a      	orrs	r2, r1
 8002480:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	03db      	lsls	r3, r3, #15
 800248a:	429a      	cmp	r2, r3
 800248c:	d106      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	0449      	lsls	r1, r1, #17
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	03db      	lsls	r3, r3, #15
 80024a4:	4013      	ands	r3, r2
 80024a6:	d016      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	4a27      	ldr	r2, [pc, #156]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	045b      	lsls	r3, r3, #17
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	0449      	lsls	r1, r1, #17
 80024d2:	430a      	orrs	r2, r1
 80024d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	4013      	ands	r3, r2
 80024e0:	d016      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f2:	430a      	orrs	r2, r1
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	01db      	lsls	r3, r3, #7
 80024fe:	429a      	cmp	r2, r3
 8002500:	d106      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0249      	lsls	r1, r1, #9
 800250c:	430a      	orrs	r2, r1
 800250e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002510:	2312      	movs	r3, #18
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	781b      	ldrb	r3, [r3, #0]
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b006      	add	sp, #24
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
 8002528:	fffffcff 	.word	0xfffffcff
 800252c:	fffeffff 	.word	0xfffeffff
 8002530:	00001388 	.word	0x00001388
 8002534:	efffffff 	.word	0xefffffff
 8002538:	fffff3ff 	.word	0xfffff3ff
 800253c:	fff3ffff 	.word	0xfff3ffff
 8002540:	ffcfffff 	.word	0xffcfffff
 8002544:	ffffcfff 	.word	0xffffcfff
 8002548:	ffbfffff 	.word	0xffbfffff
 800254c:	feffffff 	.word	0xfeffffff
 8002550:	ffff3fff 	.word	0xffff3fff

08002554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e046      	b.n	80025f4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2288      	movs	r2, #136	; 0x88
 800256a:	589b      	ldr	r3, [r3, r2]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2284      	movs	r2, #132	; 0x84
 8002574:	2100      	movs	r1, #0
 8002576:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	0018      	movs	r0, r3
 800257c:	f7fe fa28 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2288      	movs	r2, #136	; 0x88
 8002584:	2124      	movs	r1, #36	; 0x24
 8002586:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2101      	movs	r1, #1
 8002594:	438a      	bics	r2, r1
 8002596:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 fc12 	bl	8002dc4 <UART_SetConfig>
 80025a0:	0003      	movs	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e024      	b.n	80025f4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 fec3 	bl	8003340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	490d      	ldr	r1, [pc, #52]	; (80025fc <HAL_UART_Init+0xa8>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	212a      	movs	r1, #42	; 0x2a
 80025d6:	438a      	bics	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 ff5b 	bl	80034a8 <UART_CheckIdleState>
 80025f2:	0003      	movs	r3, r0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	ffffb7ff 	.word	0xffffb7ff

08002600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	1dbb      	adds	r3, r7, #6
 800260e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2288      	movs	r2, #136	; 0x88
 8002614:	589b      	ldr	r3, [r3, r2]
 8002616:	2b20      	cmp	r3, #32
 8002618:	d000      	beq.n	800261c <HAL_UART_Transmit+0x1c>
 800261a:	e088      	b.n	800272e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_UART_Transmit+0x2a>
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e080      	b.n	8002730 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	015b      	lsls	r3, r3, #5
 8002636:	429a      	cmp	r2, r3
 8002638:	d109      	bne.n	800264e <HAL_UART_Transmit+0x4e>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	d001      	beq.n	800264e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e070      	b.n	8002730 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2290      	movs	r2, #144	; 0x90
 8002652:	2100      	movs	r1, #0
 8002654:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2288      	movs	r2, #136	; 0x88
 800265a:	2121      	movs	r1, #33	; 0x21
 800265c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800265e:	f7fe fb29 	bl	8000cb4 <HAL_GetTick>
 8002662:	0003      	movs	r3, r0
 8002664:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1dba      	adds	r2, r7, #6
 800266a:	2154      	movs	r1, #84	; 0x54
 800266c:	8812      	ldrh	r2, [r2, #0]
 800266e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1dba      	adds	r2, r7, #6
 8002674:	2156      	movs	r1, #86	; 0x56
 8002676:	8812      	ldrh	r2, [r2, #0]
 8002678:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	015b      	lsls	r3, r3, #5
 8002682:	429a      	cmp	r2, r3
 8002684:	d108      	bne.n	8002698 <HAL_UART_Transmit+0x98>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d104      	bne.n	8002698 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	e003      	b.n	80026a0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026a0:	e02c      	b.n	80026fc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	0013      	movs	r3, r2
 80026ac:	2200      	movs	r2, #0
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	f000 ff48 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d001      	beq.n	80026bc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e039      	b.n	8002730 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10b      	bne.n	80026da <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	001a      	movs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	05d2      	lsls	r2, r2, #23
 80026ce:	0dd2      	lsrs	r2, r2, #23
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	3302      	adds	r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	e007      	b.n	80026ea <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3301      	adds	r3, #1
 80026e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2256      	movs	r2, #86	; 0x56
 80026ee:	5a9b      	ldrh	r3, [r3, r2]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b299      	uxth	r1, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2256      	movs	r2, #86	; 0x56
 80026fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2256      	movs	r2, #86	; 0x56
 8002700:	5a9b      	ldrh	r3, [r3, r2]
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1cc      	bne.n	80026a2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	0013      	movs	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	2140      	movs	r1, #64	; 0x40
 8002716:	f000 ff15 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 800271a:	1e03      	subs	r3, r0, #0
 800271c:	d001      	beq.n	8002722 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e006      	b.n	8002730 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2288      	movs	r2, #136	; 0x88
 8002726:	2120      	movs	r1, #32
 8002728:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b008      	add	sp, #32
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b0aa      	sub	sp, #168	; 0xa8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	22a4      	movs	r2, #164	; 0xa4
 8002748:	18b9      	adds	r1, r7, r2
 800274a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	20a0      	movs	r0, #160	; 0xa0
 8002754:	1839      	adds	r1, r7, r0
 8002756:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	249c      	movs	r4, #156	; 0x9c
 8002760:	1939      	adds	r1, r7, r4
 8002762:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002764:	0011      	movs	r1, r2
 8002766:	18bb      	adds	r3, r7, r2
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4aa2      	ldr	r2, [pc, #648]	; (80029f4 <HAL_UART_IRQHandler+0x2bc>)
 800276c:	4013      	ands	r3, r2
 800276e:	2298      	movs	r2, #152	; 0x98
 8002770:	18bd      	adds	r5, r7, r2
 8002772:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002774:	18bb      	adds	r3, r7, r2
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11a      	bne.n	80027b2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800277c:	187b      	adds	r3, r7, r1
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2220      	movs	r2, #32
 8002782:	4013      	ands	r3, r2
 8002784:	d015      	beq.n	80027b2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002786:	183b      	adds	r3, r7, r0
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2220      	movs	r2, #32
 800278c:	4013      	ands	r3, r2
 800278e:	d105      	bne.n	800279c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002790:	193b      	adds	r3, r7, r4
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	055b      	lsls	r3, r3, #21
 8002798:	4013      	ands	r3, r2
 800279a:	d00a      	beq.n	80027b2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d100      	bne.n	80027a6 <HAL_UART_IRQHandler+0x6e>
 80027a4:	e2dc      	b.n	8002d60 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	0010      	movs	r0, r2
 80027ae:	4798      	blx	r3
      }
      return;
 80027b0:	e2d6      	b.n	8002d60 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027b2:	2398      	movs	r3, #152	; 0x98
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d100      	bne.n	80027be <HAL_UART_IRQHandler+0x86>
 80027bc:	e122      	b.n	8002a04 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027be:	239c      	movs	r3, #156	; 0x9c
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a8c      	ldr	r2, [pc, #560]	; (80029f8 <HAL_UART_IRQHandler+0x2c0>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	d106      	bne.n	80027d8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027ca:	23a0      	movs	r3, #160	; 0xa0
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a8a      	ldr	r2, [pc, #552]	; (80029fc <HAL_UART_IRQHandler+0x2c4>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	d100      	bne.n	80027d8 <HAL_UART_IRQHandler+0xa0>
 80027d6:	e115      	b.n	8002a04 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027d8:	23a4      	movs	r3, #164	; 0xa4
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d012      	beq.n	800280a <HAL_UART_IRQHandler+0xd2>
 80027e4:	23a0      	movs	r3, #160	; 0xa0
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	d00b      	beq.n	800280a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2290      	movs	r2, #144	; 0x90
 80027fe:	589b      	ldr	r3, [r3, r2]
 8002800:	2201      	movs	r2, #1
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2190      	movs	r1, #144	; 0x90
 8002808:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800280a:	23a4      	movs	r3, #164	; 0xa4
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2202      	movs	r2, #2
 8002812:	4013      	ands	r3, r2
 8002814:	d011      	beq.n	800283a <HAL_UART_IRQHandler+0x102>
 8002816:	239c      	movs	r3, #156	; 0x9c
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2201      	movs	r2, #1
 800281e:	4013      	ands	r3, r2
 8002820:	d00b      	beq.n	800283a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2202      	movs	r2, #2
 8002828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2290      	movs	r2, #144	; 0x90
 800282e:	589b      	ldr	r3, [r3, r2]
 8002830:	2204      	movs	r2, #4
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2190      	movs	r1, #144	; 0x90
 8002838:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800283a:	23a4      	movs	r3, #164	; 0xa4
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2204      	movs	r2, #4
 8002842:	4013      	ands	r3, r2
 8002844:	d011      	beq.n	800286a <HAL_UART_IRQHandler+0x132>
 8002846:	239c      	movs	r3, #156	; 0x9c
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d00b      	beq.n	800286a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2204      	movs	r2, #4
 8002858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2290      	movs	r2, #144	; 0x90
 800285e:	589b      	ldr	r3, [r3, r2]
 8002860:	2202      	movs	r2, #2
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2190      	movs	r1, #144	; 0x90
 8002868:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800286a:	23a4      	movs	r3, #164	; 0xa4
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2208      	movs	r2, #8
 8002872:	4013      	ands	r3, r2
 8002874:	d017      	beq.n	80028a6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002876:	23a0      	movs	r3, #160	; 0xa0
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2220      	movs	r2, #32
 800287e:	4013      	ands	r3, r2
 8002880:	d105      	bne.n	800288e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002882:	239c      	movs	r3, #156	; 0x9c
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5b      	ldr	r2, [pc, #364]	; (80029f8 <HAL_UART_IRQHandler+0x2c0>)
 800288a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800288c:	d00b      	beq.n	80028a6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2208      	movs	r2, #8
 8002894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2290      	movs	r2, #144	; 0x90
 800289a:	589b      	ldr	r3, [r3, r2]
 800289c:	2208      	movs	r2, #8
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2190      	movs	r1, #144	; 0x90
 80028a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028a6:	23a4      	movs	r3, #164	; 0xa4
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d013      	beq.n	80028dc <HAL_UART_IRQHandler+0x1a4>
 80028b4:	23a0      	movs	r3, #160	; 0xa0
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	04db      	lsls	r3, r3, #19
 80028be:	4013      	ands	r3, r2
 80028c0:	d00c      	beq.n	80028dc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2280      	movs	r2, #128	; 0x80
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2290      	movs	r2, #144	; 0x90
 80028d0:	589b      	ldr	r3, [r3, r2]
 80028d2:	2220      	movs	r2, #32
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2190      	movs	r1, #144	; 0x90
 80028da:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2290      	movs	r2, #144	; 0x90
 80028e0:	589b      	ldr	r3, [r3, r2]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d100      	bne.n	80028e8 <HAL_UART_IRQHandler+0x1b0>
 80028e6:	e23d      	b.n	8002d64 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028e8:	23a4      	movs	r3, #164	; 0xa4
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2220      	movs	r2, #32
 80028f0:	4013      	ands	r3, r2
 80028f2:	d015      	beq.n	8002920 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028f4:	23a0      	movs	r3, #160	; 0xa0
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2220      	movs	r2, #32
 80028fc:	4013      	ands	r3, r2
 80028fe:	d106      	bne.n	800290e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002900:	239c      	movs	r3, #156	; 0x9c
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	055b      	lsls	r3, r3, #21
 800290a:	4013      	ands	r3, r2
 800290c:	d008      	beq.n	8002920 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	0010      	movs	r0, r2
 800291e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2290      	movs	r2, #144	; 0x90
 8002924:	589b      	ldr	r3, [r3, r2]
 8002926:	2194      	movs	r1, #148	; 0x94
 8002928:	187a      	adds	r2, r7, r1
 800292a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2240      	movs	r2, #64	; 0x40
 8002934:	4013      	ands	r3, r2
 8002936:	2b40      	cmp	r3, #64	; 0x40
 8002938:	d004      	beq.n	8002944 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800293a:	187b      	adds	r3, r7, r1
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2228      	movs	r2, #40	; 0x28
 8002940:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002942:	d04c      	beq.n	80029de <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 ffaa 	bl	80038a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	4013      	ands	r3, r2
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d13c      	bne.n	80029d4 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295a:	f3ef 8310 	mrs	r3, PRIMASK
 800295e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	2090      	movs	r0, #144	; 0x90
 8002964:	183a      	adds	r2, r7, r0
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	2301      	movs	r3, #1
 800296a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2140      	movs	r1, #64	; 0x40
 8002980:	438a      	bics	r2, r1
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	183b      	adds	r3, r7, r0
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	589b      	ldr	r3, [r3, r2]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d016      	beq.n	80029ca <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	589b      	ldr	r3, [r3, r2]
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_UART_IRQHandler+0x2c8>)
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	589b      	ldr	r3, [r3, r2]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7fe fbdb 	bl	8001168 <HAL_DMA_Abort_IT>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d01c      	beq.n	80029f0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	589b      	ldr	r3, [r3, r2]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	5852      	ldr	r2, [r2, r1]
 80029c4:	0010      	movs	r0, r2
 80029c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c8:	e012      	b.n	80029f0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f9f1 	bl	8002db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d2:	e00d      	b.n	80029f0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 f9ec 	bl	8002db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029dc:	e008      	b.n	80029f0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 f9e7 	bl	8002db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2290      	movs	r2, #144	; 0x90
 80029ea:	2100      	movs	r1, #0
 80029ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80029ee:	e1b9      	b.n	8002d64 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f0:	46c0      	nop			; (mov r8, r8)
    return;
 80029f2:	e1b7      	b.n	8002d64 <HAL_UART_IRQHandler+0x62c>
 80029f4:	0000080f 	.word	0x0000080f
 80029f8:	10000001 	.word	0x10000001
 80029fc:	04000120 	.word	0x04000120
 8002a00:	08003b65 	.word	0x08003b65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d000      	beq.n	8002a0e <HAL_UART_IRQHandler+0x2d6>
 8002a0c:	e13e      	b.n	8002c8c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a0e:	23a4      	movs	r3, #164	; 0xa4
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2210      	movs	r2, #16
 8002a16:	4013      	ands	r3, r2
 8002a18:	d100      	bne.n	8002a1c <HAL_UART_IRQHandler+0x2e4>
 8002a1a:	e137      	b.n	8002c8c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a1c:	23a0      	movs	r3, #160	; 0xa0
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2210      	movs	r2, #16
 8002a24:	4013      	ands	r3, r2
 8002a26:	d100      	bne.n	8002a2a <HAL_UART_IRQHandler+0x2f2>
 8002a28:	e130      	b.n	8002c8c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d000      	beq.n	8002a42 <HAL_UART_IRQHandler+0x30a>
 8002a40:	e0a4      	b.n	8002b8c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	589b      	ldr	r3, [r3, r2]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	217e      	movs	r1, #126	; 0x7e
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d100      	bne.n	8002a5c <HAL_UART_IRQHandler+0x324>
 8002a5a:	e185      	b.n	8002d68 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	225c      	movs	r2, #92	; 0x5c
 8002a60:	5a9b      	ldrh	r3, [r3, r2]
 8002a62:	187a      	adds	r2, r7, r1
 8002a64:	8812      	ldrh	r2, [r2, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d300      	bcc.n	8002a6c <HAL_UART_IRQHandler+0x334>
 8002a6a:	e17d      	b.n	8002d68 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	187a      	adds	r2, r7, r1
 8002a70:	215e      	movs	r1, #94	; 0x5e
 8002a72:	8812      	ldrh	r2, [r2, #0]
 8002a74:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	589b      	ldr	r3, [r3, r2]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2220      	movs	r2, #32
 8002a82:	4013      	ands	r3, r2
 8002a84:	d170      	bne.n	8002b68 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a86:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a90:	2301      	movs	r3, #1
 8002a92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a96:	f383 8810 	msr	PRIMASK, r3
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	49b4      	ldr	r1, [pc, #720]	; (8002d78 <HAL_UART_IRQHandler+0x640>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	f383 8810 	msr	PRIMASK, r3
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8002abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac0:	677b      	str	r3, [r7, #116]	; 0x74
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac8:	f383 8810 	msr	PRIMASK, r3
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	438a      	bics	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae4:	f383 8810 	msr	PRIMASK, r3
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aea:	f3ef 8310 	mrs	r3, PRIMASK
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af2:	673b      	str	r3, [r7, #112]	; 0x70
 8002af4:	2301      	movs	r3, #1
 8002af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afa:	f383 8810 	msr	PRIMASK, r3
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b12:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b16:	f383 8810 	msr	PRIMASK, r3
}
 8002b1a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	228c      	movs	r2, #140	; 0x8c
 8002b20:	2120      	movs	r1, #32
 8002b22:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b2e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b34:	2301      	movs	r3, #1
 8002b36:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b3a:	f383 8810 	msr	PRIMASK, r3
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2110      	movs	r1, #16
 8002b4c:	438a      	bics	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b52:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b56:	f383 8810 	msr	PRIMASK, r3
}
 8002b5a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	589b      	ldr	r3, [r3, r2]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f7fe fa9e 	bl	80010a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	225c      	movs	r2, #92	; 0x5c
 8002b72:	5a9a      	ldrh	r2, [r3, r2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	215e      	movs	r1, #94	; 0x5e
 8002b78:	5a5b      	ldrh	r3, [r3, r1]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	0011      	movs	r1, r2
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7fd fed7 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b8a:	e0ed      	b.n	8002d68 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	225c      	movs	r2, #92	; 0x5c
 8002b90:	5a99      	ldrh	r1, [r3, r2]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	225e      	movs	r2, #94	; 0x5e
 8002b96:	5a9b      	ldrh	r3, [r3, r2]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	208e      	movs	r0, #142	; 0x8e
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	1a8a      	subs	r2, r1, r2
 8002ba0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	225e      	movs	r2, #94	; 0x5e
 8002ba6:	5a9b      	ldrh	r3, [r3, r2]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d100      	bne.n	8002bb0 <HAL_UART_IRQHandler+0x478>
 8002bae:	e0dd      	b.n	8002d6c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002bb0:	183b      	adds	r3, r7, r0
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d100      	bne.n	8002bba <HAL_UART_IRQHandler+0x482>
 8002bb8:	e0d8      	b.n	8002d6c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bba:	f3ef 8310 	mrs	r3, PRIMASK
 8002bbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bc2:	2488      	movs	r4, #136	; 0x88
 8002bc4:	193a      	adds	r2, r7, r4
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f383 8810 	msr	PRIMASK, r3
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4967      	ldr	r1, [pc, #412]	; (8002d7c <HAL_UART_IRQHandler+0x644>)
 8002be0:	400a      	ands	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	193b      	adds	r3, r7, r4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f383 8810 	msr	PRIMASK, r3
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bf8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bfa:	2484      	movs	r4, #132	; 0x84
 8002bfc:	193a      	adds	r2, r7, r4
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	2301      	movs	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f383 8810 	msr	PRIMASK, r3
}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	495a      	ldr	r1, [pc, #360]	; (8002d80 <HAL_UART_IRQHandler+0x648>)
 8002c18:	400a      	ands	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	228c      	movs	r2, #140	; 0x8c
 8002c2e:	2120      	movs	r1, #32
 8002c30:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c46:	2480      	movs	r4, #128	; 0x80
 8002c48:	193a      	adds	r2, r7, r4
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	f383 8810 	msr	PRIMASK, r3
}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2110      	movs	r1, #16
 8002c64:	438a      	bics	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	f383 8810 	msr	PRIMASK, r3
}
 8002c74:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	881a      	ldrh	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7fd fe57 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c8a:	e06f      	b.n	8002d6c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c8c:	23a4      	movs	r3, #164	; 0xa4
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	035b      	lsls	r3, r3, #13
 8002c96:	4013      	ands	r3, r2
 8002c98:	d010      	beq.n	8002cbc <HAL_UART_IRQHandler+0x584>
 8002c9a:	239c      	movs	r3, #156	; 0x9c
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	03db      	lsls	r3, r3, #15
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	0352      	lsls	r2, r2, #13
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 ff98 	bl	8003bea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cba:	e05a      	b.n	8002d72 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cbc:	23a4      	movs	r3, #164	; 0xa4
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d016      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc8:	23a0      	movs	r3, #160	; 0xa0
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d106      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cd4:	239c      	movs	r3, #156	; 0x9c
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d042      	beq.n	8002d70 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	4798      	blx	r3
    }
    return;
 8002cf4:	e03c      	b.n	8002d70 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cf6:	23a4      	movs	r3, #164	; 0xa4
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d00a      	beq.n	8002d18 <HAL_UART_IRQHandler+0x5e0>
 8002d02:	23a0      	movs	r3, #160	; 0xa0
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 ff3e 	bl	8003b92 <UART_EndTransmit_IT>
    return;
 8002d16:	e02c      	b.n	8002d72 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d18:	23a4      	movs	r3, #164	; 0xa4
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	4013      	ands	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <HAL_UART_IRQHandler+0x606>
 8002d26:	23a0      	movs	r3, #160	; 0xa0
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	05db      	lsls	r3, r3, #23
 8002d30:	4013      	ands	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f000 ff67 	bl	8003c0a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d3c:	e019      	b.n	8002d72 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d3e:	23a4      	movs	r3, #164	; 0xa4
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	045b      	lsls	r3, r3, #17
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d012      	beq.n	8002d72 <HAL_UART_IRQHandler+0x63a>
 8002d4c:	23a0      	movs	r3, #160	; 0xa0
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	da0d      	bge.n	8002d72 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 ff4e 	bl	8003bfa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d5e:	e008      	b.n	8002d72 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	e006      	b.n	8002d72 <HAL_UART_IRQHandler+0x63a>
    return;
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	e004      	b.n	8002d72 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	e002      	b.n	8002d72 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	e000      	b.n	8002d72 <HAL_UART_IRQHandler+0x63a>
    return;
 8002d70:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b02a      	add	sp, #168	; 0xa8
 8002d76:	bdb0      	pop	{r4, r5, r7, pc}
 8002d78:	fffffeff 	.word	0xfffffeff
 8002d7c:	fffffedf 	.word	0xfffffedf
 8002d80:	effffffe 	.word	0xeffffffe

08002d84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc4:	b5b0      	push	{r4, r5, r7, lr}
 8002dc6:	b090      	sub	sp, #64	; 0x40
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dcc:	231a      	movs	r3, #26
 8002dce:	2220      	movs	r2, #32
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	19db      	adds	r3, r3, r7
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4aaf      	ldr	r2, [pc, #700]	; (80030b4 <UART_SetConfig+0x2f0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e02:	430b      	orrs	r3, r1
 8002e04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4aaa      	ldr	r2, [pc, #680]	; (80030b8 <UART_SetConfig+0x2f4>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	0018      	movs	r0, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4aa4      	ldr	r2, [pc, #656]	; (80030bc <UART_SetConfig+0x2f8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e36:	4313      	orrs	r3, r2
 8002e38:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a9f      	ldr	r2, [pc, #636]	; (80030c0 <UART_SetConfig+0x2fc>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	0019      	movs	r1, r3
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	220f      	movs	r2, #15
 8002e58:	4393      	bics	r3, r2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	0003      	movs	r3, r0
 8002e66:	430b      	orrs	r3, r1
 8002e68:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a95      	ldr	r2, [pc, #596]	; (80030c4 <UART_SetConfig+0x300>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d131      	bne.n	8002ed8 <UART_SetConfig+0x114>
 8002e74:	4b94      	ldr	r3, [pc, #592]	; (80030c8 <UART_SetConfig+0x304>)
 8002e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d01d      	beq.n	8002ebc <UART_SetConfig+0xf8>
 8002e80:	d823      	bhi.n	8002eca <UART_SetConfig+0x106>
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d00c      	beq.n	8002ea0 <UART_SetConfig+0xdc>
 8002e86:	d820      	bhi.n	8002eca <UART_SetConfig+0x106>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <UART_SetConfig+0xce>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d00e      	beq.n	8002eae <UART_SetConfig+0xea>
 8002e90:	e01b      	b.n	8002eca <UART_SetConfig+0x106>
 8002e92:	231b      	movs	r3, #27
 8002e94:	2220      	movs	r2, #32
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	19db      	adds	r3, r3, r7
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e0b4      	b.n	800300a <UART_SetConfig+0x246>
 8002ea0:	231b      	movs	r3, #27
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	189b      	adds	r3, r3, r2
 8002ea6:	19db      	adds	r3, r3, r7
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e0ad      	b.n	800300a <UART_SetConfig+0x246>
 8002eae:	231b      	movs	r3, #27
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	19db      	adds	r3, r3, r7
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e0a6      	b.n	800300a <UART_SetConfig+0x246>
 8002ebc:	231b      	movs	r3, #27
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	189b      	adds	r3, r3, r2
 8002ec2:	19db      	adds	r3, r3, r7
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e09f      	b.n	800300a <UART_SetConfig+0x246>
 8002eca:	231b      	movs	r3, #27
 8002ecc:	2220      	movs	r2, #32
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	19db      	adds	r3, r3, r7
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e098      	b.n	800300a <UART_SetConfig+0x246>
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7b      	ldr	r2, [pc, #492]	; (80030cc <UART_SetConfig+0x308>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d131      	bne.n	8002f46 <UART_SetConfig+0x182>
 8002ee2:	4b79      	ldr	r3, [pc, #484]	; (80030c8 <UART_SetConfig+0x304>)
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	d01d      	beq.n	8002f2a <UART_SetConfig+0x166>
 8002eee:	d823      	bhi.n	8002f38 <UART_SetConfig+0x174>
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d00c      	beq.n	8002f0e <UART_SetConfig+0x14a>
 8002ef4:	d820      	bhi.n	8002f38 <UART_SetConfig+0x174>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <UART_SetConfig+0x13c>
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d00e      	beq.n	8002f1c <UART_SetConfig+0x158>
 8002efe:	e01b      	b.n	8002f38 <UART_SetConfig+0x174>
 8002f00:	231b      	movs	r3, #27
 8002f02:	2220      	movs	r2, #32
 8002f04:	189b      	adds	r3, r3, r2
 8002f06:	19db      	adds	r3, r3, r7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e07d      	b.n	800300a <UART_SetConfig+0x246>
 8002f0e:	231b      	movs	r3, #27
 8002f10:	2220      	movs	r2, #32
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	19db      	adds	r3, r3, r7
 8002f16:	2202      	movs	r2, #2
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e076      	b.n	800300a <UART_SetConfig+0x246>
 8002f1c:	231b      	movs	r3, #27
 8002f1e:	2220      	movs	r2, #32
 8002f20:	189b      	adds	r3, r3, r2
 8002f22:	19db      	adds	r3, r3, r7
 8002f24:	2204      	movs	r2, #4
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e06f      	b.n	800300a <UART_SetConfig+0x246>
 8002f2a:	231b      	movs	r3, #27
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	19db      	adds	r3, r3, r7
 8002f32:	2208      	movs	r2, #8
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e068      	b.n	800300a <UART_SetConfig+0x246>
 8002f38:	231b      	movs	r3, #27
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	189b      	adds	r3, r3, r2
 8002f3e:	19db      	adds	r3, r3, r7
 8002f40:	2210      	movs	r2, #16
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e061      	b.n	800300a <UART_SetConfig+0x246>
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a61      	ldr	r2, [pc, #388]	; (80030d0 <UART_SetConfig+0x30c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d106      	bne.n	8002f5e <UART_SetConfig+0x19a>
 8002f50:	231b      	movs	r3, #27
 8002f52:	2220      	movs	r2, #32
 8002f54:	189b      	adds	r3, r3, r2
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e055      	b.n	800300a <UART_SetConfig+0x246>
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5c      	ldr	r2, [pc, #368]	; (80030d4 <UART_SetConfig+0x310>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d106      	bne.n	8002f76 <UART_SetConfig+0x1b2>
 8002f68:	231b      	movs	r3, #27
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	189b      	adds	r3, r3, r2
 8002f6e:	19db      	adds	r3, r3, r7
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e049      	b.n	800300a <UART_SetConfig+0x246>
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a50      	ldr	r2, [pc, #320]	; (80030bc <UART_SetConfig+0x2f8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d13e      	bne.n	8002ffe <UART_SetConfig+0x23a>
 8002f80:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <UART_SetConfig+0x304>)
 8002f82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f84:	23c0      	movs	r3, #192	; 0xc0
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	4013      	ands	r3, r2
 8002f8a:	22c0      	movs	r2, #192	; 0xc0
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d027      	beq.n	8002fe2 <UART_SetConfig+0x21e>
 8002f92:	22c0      	movs	r2, #192	; 0xc0
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d82a      	bhi.n	8002ff0 <UART_SetConfig+0x22c>
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d011      	beq.n	8002fc6 <UART_SetConfig+0x202>
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	0112      	lsls	r2, r2, #4
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d822      	bhi.n	8002ff0 <UART_SetConfig+0x22c>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <UART_SetConfig+0x1f4>
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	00d2      	lsls	r2, r2, #3
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00e      	beq.n	8002fd4 <UART_SetConfig+0x210>
 8002fb6:	e01b      	b.n	8002ff0 <UART_SetConfig+0x22c>
 8002fb8:	231b      	movs	r3, #27
 8002fba:	2220      	movs	r2, #32
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	19db      	adds	r3, r3, r7
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e021      	b.n	800300a <UART_SetConfig+0x246>
 8002fc6:	231b      	movs	r3, #27
 8002fc8:	2220      	movs	r2, #32
 8002fca:	189b      	adds	r3, r3, r2
 8002fcc:	19db      	adds	r3, r3, r7
 8002fce:	2202      	movs	r2, #2
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e01a      	b.n	800300a <UART_SetConfig+0x246>
 8002fd4:	231b      	movs	r3, #27
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	189b      	adds	r3, r3, r2
 8002fda:	19db      	adds	r3, r3, r7
 8002fdc:	2204      	movs	r2, #4
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e013      	b.n	800300a <UART_SetConfig+0x246>
 8002fe2:	231b      	movs	r3, #27
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	189b      	adds	r3, r3, r2
 8002fe8:	19db      	adds	r3, r3, r7
 8002fea:	2208      	movs	r2, #8
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e00c      	b.n	800300a <UART_SetConfig+0x246>
 8002ff0:	231b      	movs	r3, #27
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	189b      	adds	r3, r3, r2
 8002ff6:	19db      	adds	r3, r3, r7
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e005      	b.n	800300a <UART_SetConfig+0x246>
 8002ffe:	231b      	movs	r3, #27
 8003000:	2220      	movs	r2, #32
 8003002:	189b      	adds	r3, r3, r2
 8003004:	19db      	adds	r3, r3, r7
 8003006:	2210      	movs	r2, #16
 8003008:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2b      	ldr	r2, [pc, #172]	; (80030bc <UART_SetConfig+0x2f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d000      	beq.n	8003016 <UART_SetConfig+0x252>
 8003014:	e0a9      	b.n	800316a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003016:	231b      	movs	r3, #27
 8003018:	2220      	movs	r2, #32
 800301a:	189b      	adds	r3, r3, r2
 800301c:	19db      	adds	r3, r3, r7
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d015      	beq.n	8003050 <UART_SetConfig+0x28c>
 8003024:	dc18      	bgt.n	8003058 <UART_SetConfig+0x294>
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00d      	beq.n	8003046 <UART_SetConfig+0x282>
 800302a:	dc15      	bgt.n	8003058 <UART_SetConfig+0x294>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <UART_SetConfig+0x272>
 8003030:	2b02      	cmp	r3, #2
 8003032:	d005      	beq.n	8003040 <UART_SetConfig+0x27c>
 8003034:	e010      	b.n	8003058 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003036:	f7ff f8bf 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 800303a:	0003      	movs	r3, r0
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800303e:	e014      	b.n	800306a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003040:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <UART_SetConfig+0x314>)
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003044:	e011      	b.n	800306a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003046:	f7ff f82b 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800304a:	0003      	movs	r3, r0
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800304e:	e00c      	b.n	800306a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003056:	e008      	b.n	800306a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800305c:	231a      	movs	r3, #26
 800305e:	2220      	movs	r2, #32
 8003060:	189b      	adds	r3, r3, r2
 8003062:	19db      	adds	r3, r3, r7
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
        break;
 8003068:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	2b00      	cmp	r3, #0
 800306e:	d100      	bne.n	8003072 <UART_SetConfig+0x2ae>
 8003070:	e14b      	b.n	800330a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <UART_SetConfig+0x318>)
 8003078:	0052      	lsls	r2, r2, #1
 800307a:	5ad3      	ldrh	r3, [r2, r3]
 800307c:	0019      	movs	r1, r3
 800307e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003080:	f7fd f848 	bl	8000114 <__udivsi3>
 8003084:	0003      	movs	r3, r0
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	0013      	movs	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	189b      	adds	r3, r3, r2
 8003092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003094:	429a      	cmp	r2, r3
 8003096:	d305      	bcc.n	80030a4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800309e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d91d      	bls.n	80030e0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80030a4:	231a      	movs	r3, #26
 80030a6:	2220      	movs	r2, #32
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	19db      	adds	r3, r3, r7
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e12b      	b.n	800330a <UART_SetConfig+0x546>
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	cfff69f3 	.word	0xcfff69f3
 80030b8:	ffffcfff 	.word	0xffffcfff
 80030bc:	40008000 	.word	0x40008000
 80030c0:	11fff4ff 	.word	0x11fff4ff
 80030c4:	40013800 	.word	0x40013800
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40004400 	.word	0x40004400
 80030d0:	40004800 	.word	0x40004800
 80030d4:	40004c00 	.word	0x40004c00
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	08004024 	.word	0x08004024
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e2:	61bb      	str	r3, [r7, #24]
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ec:	4b92      	ldr	r3, [pc, #584]	; (8003338 <UART_SetConfig+0x574>)
 80030ee:	0052      	lsls	r2, r2, #1
 80030f0:	5ad3      	ldrh	r3, [r2, r3]
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	69b8      	ldr	r0, [r7, #24]
 80030fe:	69f9      	ldr	r1, [r7, #28]
 8003100:	f7fd f97e 	bl	8000400 <__aeabi_uldivmod>
 8003104:	0002      	movs	r2, r0
 8003106:	000b      	movs	r3, r1
 8003108:	0e11      	lsrs	r1, r2, #24
 800310a:	021d      	lsls	r5, r3, #8
 800310c:	430d      	orrs	r5, r1
 800310e:	0214      	lsls	r4, r2, #8
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68b8      	ldr	r0, [r7, #8]
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	1900      	adds	r0, r0, r4
 8003122:	4169      	adcs	r1, r5
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f7fd f965 	bl	8000400 <__aeabi_uldivmod>
 8003136:	0002      	movs	r2, r0
 8003138:	000b      	movs	r3, r1
 800313a:	0013      	movs	r3, r2
 800313c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800313e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003140:	23c0      	movs	r3, #192	; 0xc0
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	429a      	cmp	r2, r3
 8003146:	d309      	bcc.n	800315c <UART_SetConfig+0x398>
 8003148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	035b      	lsls	r3, r3, #13
 800314e:	429a      	cmp	r2, r3
 8003150:	d204      	bcs.n	800315c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	e0d6      	b.n	800330a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800315c:	231a      	movs	r3, #26
 800315e:	2220      	movs	r2, #32
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e0cf      	b.n	800330a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	429a      	cmp	r2, r3
 8003174:	d000      	beq.n	8003178 <UART_SetConfig+0x3b4>
 8003176:	e070      	b.n	800325a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003178:	231b      	movs	r3, #27
 800317a:	2220      	movs	r2, #32
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b08      	cmp	r3, #8
 8003184:	d015      	beq.n	80031b2 <UART_SetConfig+0x3ee>
 8003186:	dc18      	bgt.n	80031ba <UART_SetConfig+0x3f6>
 8003188:	2b04      	cmp	r3, #4
 800318a:	d00d      	beq.n	80031a8 <UART_SetConfig+0x3e4>
 800318c:	dc15      	bgt.n	80031ba <UART_SetConfig+0x3f6>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <UART_SetConfig+0x3d4>
 8003192:	2b02      	cmp	r3, #2
 8003194:	d005      	beq.n	80031a2 <UART_SetConfig+0x3de>
 8003196:	e010      	b.n	80031ba <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003198:	f7ff f80e 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 800319c:	0003      	movs	r3, r0
 800319e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031a0:	e014      	b.n	80031cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a2:	4b66      	ldr	r3, [pc, #408]	; (800333c <UART_SetConfig+0x578>)
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031a6:	e011      	b.n	80031cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a8:	f7fe ff7a 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 80031ac:	0003      	movs	r3, r0
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031b0:	e00c      	b.n	80031cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031b8:	e008      	b.n	80031cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80031be:	231a      	movs	r3, #26
 80031c0:	2220      	movs	r2, #32
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	19db      	adds	r3, r3, r7
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
        break;
 80031ca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d100      	bne.n	80031d4 <UART_SetConfig+0x410>
 80031d2:	e09a      	b.n	800330a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031d8:	4b57      	ldr	r3, [pc, #348]	; (8003338 <UART_SetConfig+0x574>)
 80031da:	0052      	lsls	r2, r2, #1
 80031dc:	5ad3      	ldrh	r3, [r2, r3]
 80031de:	0019      	movs	r1, r3
 80031e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031e2:	f7fc ff97 	bl	8000114 <__udivsi3>
 80031e6:	0003      	movs	r3, r0
 80031e8:	005a      	lsls	r2, r3, #1
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	18d2      	adds	r2, r2, r3
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	0019      	movs	r1, r3
 80031f8:	0010      	movs	r0, r2
 80031fa:	f7fc ff8b 	bl	8000114 <__udivsi3>
 80031fe:	0003      	movs	r3, r0
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d921      	bls.n	800324c <UART_SetConfig+0x488>
 8003208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	025b      	lsls	r3, r3, #9
 800320e:	429a      	cmp	r2, r3
 8003210:	d21c      	bcs.n	800324c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	b29a      	uxth	r2, r3
 8003216:	200e      	movs	r0, #14
 8003218:	2420      	movs	r4, #32
 800321a:	1903      	adds	r3, r0, r4
 800321c:	19db      	adds	r3, r3, r7
 800321e:	210f      	movs	r1, #15
 8003220:	438a      	bics	r2, r1
 8003222:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	085b      	lsrs	r3, r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	2207      	movs	r2, #7
 800322c:	4013      	ands	r3, r2
 800322e:	b299      	uxth	r1, r3
 8003230:	1903      	adds	r3, r0, r4
 8003232:	19db      	adds	r3, r3, r7
 8003234:	1902      	adds	r2, r0, r4
 8003236:	19d2      	adds	r2, r2, r7
 8003238:	8812      	ldrh	r2, [r2, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	1902      	adds	r2, r0, r4
 8003244:	19d2      	adds	r2, r2, r7
 8003246:	8812      	ldrh	r2, [r2, #0]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	e05e      	b.n	800330a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800324c:	231a      	movs	r3, #26
 800324e:	2220      	movs	r2, #32
 8003250:	189b      	adds	r3, r3, r2
 8003252:	19db      	adds	r3, r3, r7
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e057      	b.n	800330a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800325a:	231b      	movs	r3, #27
 800325c:	2220      	movs	r2, #32
 800325e:	189b      	adds	r3, r3, r2
 8003260:	19db      	adds	r3, r3, r7
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d015      	beq.n	8003294 <UART_SetConfig+0x4d0>
 8003268:	dc18      	bgt.n	800329c <UART_SetConfig+0x4d8>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00d      	beq.n	800328a <UART_SetConfig+0x4c6>
 800326e:	dc15      	bgt.n	800329c <UART_SetConfig+0x4d8>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <UART_SetConfig+0x4b6>
 8003274:	2b02      	cmp	r3, #2
 8003276:	d005      	beq.n	8003284 <UART_SetConfig+0x4c0>
 8003278:	e010      	b.n	800329c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327a:	f7fe ff9d 	bl	80021b8 <HAL_RCC_GetPCLK1Freq>
 800327e:	0003      	movs	r3, r0
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003282:	e014      	b.n	80032ae <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <UART_SetConfig+0x578>)
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003288:	e011      	b.n	80032ae <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328a:	f7fe ff09 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 800328e:	0003      	movs	r3, r0
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003292:	e00c      	b.n	80032ae <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800329a:	e008      	b.n	80032ae <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80032a0:	231a      	movs	r3, #26
 80032a2:	2220      	movs	r2, #32
 80032a4:	189b      	adds	r3, r3, r2
 80032a6:	19db      	adds	r3, r3, r7
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
        break;
 80032ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02a      	beq.n	800330a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b8:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <UART_SetConfig+0x574>)
 80032ba:	0052      	lsls	r2, r2, #1
 80032bc:	5ad3      	ldrh	r3, [r2, r3]
 80032be:	0019      	movs	r1, r3
 80032c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032c2:	f7fc ff27 	bl	8000114 <__udivsi3>
 80032c6:	0003      	movs	r3, r0
 80032c8:	001a      	movs	r2, r3
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	18d2      	adds	r2, r2, r3
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0019      	movs	r1, r3
 80032d8:	0010      	movs	r0, r2
 80032da:	f7fc ff1b 	bl	8000114 <__udivsi3>
 80032de:	0003      	movs	r3, r0
 80032e0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d90a      	bls.n	80032fe <UART_SetConfig+0x53a>
 80032e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	025b      	lsls	r3, r3, #9
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d205      	bcs.n	80032fe <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	e005      	b.n	800330a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80032fe:	231a      	movs	r3, #26
 8003300:	2220      	movs	r2, #32
 8003302:	189b      	adds	r3, r3, r2
 8003304:	19db      	adds	r3, r3, r7
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	226a      	movs	r2, #106	; 0x6a
 800330e:	2101      	movs	r1, #1
 8003310:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	2268      	movs	r2, #104	; 0x68
 8003316:	2101      	movs	r1, #1
 8003318:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	2200      	movs	r2, #0
 800331e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	2200      	movs	r2, #0
 8003324:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003326:	231a      	movs	r3, #26
 8003328:	2220      	movs	r2, #32
 800332a:	189b      	adds	r3, r3, r2
 800332c:	19db      	adds	r3, r3, r7
 800332e:	781b      	ldrb	r3, [r3, #0]
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b010      	add	sp, #64	; 0x40
 8003336:	bdb0      	pop	{r4, r5, r7, pc}
 8003338:	08004024 	.word	0x08004024
 800333c:	00f42400 	.word	0x00f42400

08003340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	d00b      	beq.n	800336a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a4a      	ldr	r2, [pc, #296]	; (8003484 <UART_AdvFeatureConfig+0x144>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d00b      	beq.n	800338c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a43      	ldr	r2, [pc, #268]	; (8003488 <UART_AdvFeatureConfig+0x148>)
 800337c:	4013      	ands	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2204      	movs	r2, #4
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a3b      	ldr	r2, [pc, #236]	; (800348c <UART_AdvFeatureConfig+0x14c>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	2208      	movs	r2, #8
 80033b4:	4013      	ands	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a34      	ldr	r2, [pc, #208]	; (8003490 <UART_AdvFeatureConfig+0x150>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2210      	movs	r2, #16
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <UART_AdvFeatureConfig+0x154>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	2220      	movs	r2, #32
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4a25      	ldr	r2, [pc, #148]	; (8003498 <UART_AdvFeatureConfig+0x158>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	4013      	ands	r3, r2
 800341c:	d01d      	beq.n	800345a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <UART_AdvFeatureConfig+0x15c>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	035b      	lsls	r3, r3, #13
 800343e:	429a      	cmp	r2, r3
 8003440:	d10b      	bne.n	800345a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <UART_AdvFeatureConfig+0x160>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	4013      	ands	r3, r2
 8003462:	d00b      	beq.n	800347c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <UART_AdvFeatureConfig+0x164>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}
 8003484:	fffdffff 	.word	0xfffdffff
 8003488:	fffeffff 	.word	0xfffeffff
 800348c:	fffbffff 	.word	0xfffbffff
 8003490:	ffff7fff 	.word	0xffff7fff
 8003494:	ffffefff 	.word	0xffffefff
 8003498:	ffffdfff 	.word	0xffffdfff
 800349c:	ffefffff 	.word	0xffefffff
 80034a0:	ff9fffff 	.word	0xff9fffff
 80034a4:	fff7ffff 	.word	0xfff7ffff

080034a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2290      	movs	r2, #144	; 0x90
 80034b4:	2100      	movs	r1, #0
 80034b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b8:	f7fd fbfc 	bl	8000cb4 <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2208      	movs	r2, #8
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d10c      	bne.n	80034e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	0391      	lsls	r1, r2, #14
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <UART_CheckIdleState+0x98>)
 80034d8:	9200      	str	r2, [sp, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	f000 f832 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d001      	beq.n	80034e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e026      	b.n	8003536 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2204      	movs	r2, #4
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d10c      	bne.n	8003510 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2280      	movs	r2, #128	; 0x80
 80034fa:	03d1      	lsls	r1, r2, #15
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <UART_CheckIdleState+0x98>)
 8003500:	9200      	str	r2, [sp, #0]
 8003502:	2200      	movs	r2, #0
 8003504:	f000 f81e 	bl	8003544 <UART_WaitOnFlagUntilTimeout>
 8003508:	1e03      	subs	r3, r0, #0
 800350a:	d001      	beq.n	8003510 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e012      	b.n	8003536 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2288      	movs	r2, #136	; 0x88
 8003514:	2120      	movs	r1, #32
 8003516:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	228c      	movs	r2, #140	; 0x8c
 800351c:	2120      	movs	r1, #32
 800351e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2284      	movs	r2, #132	; 0x84
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	01ffffff 	.word	0x01ffffff

08003544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b094      	sub	sp, #80	; 0x50
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	1dfb      	adds	r3, r7, #7
 8003552:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003554:	e0a7      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003558:	3301      	adds	r3, #1
 800355a:	d100      	bne.n	800355e <UART_WaitOnFlagUntilTimeout+0x1a>
 800355c:	e0a3      	b.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fd fba9 	bl	8000cb4 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <UART_WaitOnFlagUntilTimeout+0x30>
 800356e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003570:	2b00      	cmp	r3, #0
 8003572:	d13f      	bne.n	80035f4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800357c:	647b      	str	r3, [r7, #68]	; 0x44
 800357e:	2301      	movs	r3, #1
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	f383 8810 	msr	PRIMASK, r3
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	494e      	ldr	r1, [pc, #312]	; (80036d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003596:	400a      	ands	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
 80035b0:	2301      	movs	r3, #1
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2101      	movs	r1, #1
 80035c8:	438a      	bics	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2288      	movs	r2, #136	; 0x88
 80035dc:	2120      	movs	r1, #32
 80035de:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	228c      	movs	r2, #140	; 0x8c
 80035e4:	2120      	movs	r1, #32
 80035e6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2284      	movs	r2, #132	; 0x84
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e069      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2204      	movs	r2, #4
 80035fc:	4013      	ands	r3, r2
 80035fe:	d052      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	401a      	ands	r2, r3
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	429a      	cmp	r2, r3
 8003612:	d148      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361e:	f3ef 8310 	mrs	r3, PRIMASK
 8003622:	613b      	str	r3, [r7, #16]
  return(result);
 8003624:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4924      	ldr	r1, [pc, #144]	; (80036d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003640:	400a      	ands	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003646:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003650:	f3ef 8310 	mrs	r3, PRIMASK
 8003654:	61fb      	str	r3, [r7, #28]
  return(result);
 8003656:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	64bb      	str	r3, [r7, #72]	; 0x48
 800365a:	2301      	movs	r3, #1
 800365c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	438a      	bics	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2288      	movs	r2, #136	; 0x88
 8003686:	2120      	movs	r1, #32
 8003688:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	228c      	movs	r2, #140	; 0x8c
 800368e:	2120      	movs	r1, #32
 8003690:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2290      	movs	r2, #144	; 0x90
 8003696:	2120      	movs	r1, #32
 8003698:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2284      	movs	r2, #132	; 0x84
 800369e:	2100      	movs	r1, #0
 80036a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e010      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	425a      	negs	r2, r3
 80036b6:	4153      	adcs	r3, r2
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	001a      	movs	r2, r3
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d100      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x182>
 80036c4:	e747      	b.n	8003556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b014      	add	sp, #80	; 0x50
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	fffffe5f 	.word	0xfffffe5f

080036d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b090      	sub	sp, #64	; 0x40
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	1dbb      	adds	r3, r7, #6
 80036e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1dba      	adds	r2, r7, #6
 80036ec:	215c      	movs	r1, #92	; 0x5c
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2290      	movs	r2, #144	; 0x90
 80036f6:	2100      	movs	r1, #0
 80036f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	228c      	movs	r2, #140	; 0x8c
 80036fe:	2122      	movs	r1, #34	; 0x22
 8003700:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	589b      	ldr	r3, [r3, r2]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02d      	beq.n	8003768 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	589b      	ldr	r3, [r3, r2]
 8003712:	4a40      	ldr	r2, [pc, #256]	; (8003814 <UART_Start_Receive_DMA+0x140>)
 8003714:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	589b      	ldr	r3, [r3, r2]
 800371c:	4a3e      	ldr	r2, [pc, #248]	; (8003818 <UART_Start_Receive_DMA+0x144>)
 800371e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	589b      	ldr	r3, [r3, r2]
 8003726:	4a3d      	ldr	r2, [pc, #244]	; (800381c <UART_Start_Receive_DMA+0x148>)
 8003728:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	589b      	ldr	r3, [r3, r2]
 8003730:	2200      	movs	r2, #0
 8003732:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	5898      	ldr	r0, [r3, r2]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3324      	adds	r3, #36	; 0x24
 8003740:	0019      	movs	r1, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	001a      	movs	r2, r3
 8003748:	1dbb      	adds	r3, r7, #6
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	f7fd fc24 	bl	8000f98 <HAL_DMA_Start_IT>
 8003750:	1e03      	subs	r3, r0, #0
 8003752:	d009      	beq.n	8003768 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2290      	movs	r2, #144	; 0x90
 8003758:	2110      	movs	r1, #16
 800375a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	228c      	movs	r2, #140	; 0x8c
 8003760:	2120      	movs	r1, #32
 8003762:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e050      	b.n	800380a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d019      	beq.n	80037a4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003770:	f3ef 8310 	mrs	r3, PRIMASK
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377a:	2301      	movs	r3, #1
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	f383 8810 	msr	PRIMASK, r3
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	0049      	lsls	r1, r1, #1
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f383 8810 	msr	PRIMASK, r3
}
 80037a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a4:	f3ef 8310 	mrs	r3, PRIMASK
 80037a8:	613b      	str	r3, [r7, #16]
  return(result);
 80037aa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ae:	2301      	movs	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f383 8810 	msr	PRIMASK, r3
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f383 8810 	msr	PRIMASK, r3
}
 80037d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d6:	f3ef 8310 	mrs	r3, PRIMASK
 80037da:	61fb      	str	r3, [r7, #28]
  return(result);
 80037dc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
 80037e0:	2301      	movs	r3, #1
 80037e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f383 8810 	msr	PRIMASK, r3
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2140      	movs	r1, #64	; 0x40
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f383 8810 	msr	PRIMASK, r3
}
 8003806:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b010      	add	sp, #64	; 0x40
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	0800396d 	.word	0x0800396d
 8003818:	08003a9d 	.word	0x08003a9d
 800381c:	08003adf 	.word	0x08003adf

08003820 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	; 0x28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003828:	f3ef 8310 	mrs	r3, PRIMASK
 800382c:	60bb      	str	r3, [r7, #8]
  return(result);
 800382e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
 8003832:	2301      	movs	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f383 8810 	msr	PRIMASK, r3
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	21c0      	movs	r1, #192	; 0xc0
 800384a:	438a      	bics	r2, r1
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f383 8810 	msr	PRIMASK, r3
}
 8003858:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385a:	f3ef 8310 	mrs	r3, PRIMASK
 800385e:	617b      	str	r3, [r7, #20]
  return(result);
 8003860:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	2301      	movs	r3, #1
 8003866:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f383 8810 	msr	PRIMASK, r3
}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4908      	ldr	r1, [pc, #32]	; (800389c <UART_EndTxTransfer+0x7c>)
 800387c:	400a      	ands	r2, r1
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f383 8810 	msr	PRIMASK, r3
}
 800388a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2288      	movs	r2, #136	; 0x88
 8003890:	2120      	movs	r1, #32
 8003892:	5099      	str	r1, [r3, r2]
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b00a      	add	sp, #40	; 0x28
 800389a:	bd80      	pop	{r7, pc}
 800389c:	ff7fffff 	.word	0xff7fffff

080038a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08e      	sub	sp, #56	; 0x38
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	617b      	str	r3, [r7, #20]
  return(result);
 80038ae:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
 80038b2:	2301      	movs	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4926      	ldr	r1, [pc, #152]	; (8003964 <UART_EndRxTransfer+0xc4>)
 80038ca:	400a      	ands	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038da:	f3ef 8310 	mrs	r3, PRIMASK
 80038de:	623b      	str	r3, [r7, #32]
  return(result);
 80038e0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
 80038e4:	2301      	movs	r3, #1
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	491b      	ldr	r1, [pc, #108]	; (8003968 <UART_EndRxTransfer+0xc8>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d118      	bne.n	8003946 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003914:	f3ef 8310 	mrs	r3, PRIMASK
 8003918:	60bb      	str	r3, [r7, #8]
  return(result);
 800391a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391e:	2301      	movs	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f383 8810 	msr	PRIMASK, r3
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2110      	movs	r1, #16
 8003936:	438a      	bics	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f383 8810 	msr	PRIMASK, r3
}
 8003944:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	228c      	movs	r2, #140	; 0x8c
 800394a:	2120      	movs	r1, #32
 800394c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	675a      	str	r2, [r3, #116]	; 0x74
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b00e      	add	sp, #56	; 0x38
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	fffffedf 	.word	0xfffffedf
 8003968:	effffffe 	.word	0xeffffffe

0800396c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b094      	sub	sp, #80	; 0x50
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2220      	movs	r2, #32
 8003982:	4013      	ands	r3, r2
 8003984:	d16f      	bne.n	8003a66 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003988:	225e      	movs	r2, #94	; 0x5e
 800398a:	2100      	movs	r1, #0
 800398c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800398e:	f3ef 8310 	mrs	r3, PRIMASK
 8003992:	61bb      	str	r3, [r7, #24]
  return(result);
 8003994:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003996:	64bb      	str	r3, [r7, #72]	; 0x48
 8003998:	2301      	movs	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f383 8810 	msr	PRIMASK, r3
}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	493a      	ldr	r1, [pc, #232]	; (8003a98 <UART_DMAReceiveCplt+0x12c>)
 80039b0:	400a      	ands	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	f383 8810 	msr	PRIMASK, r3
}
 80039be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8310 	mrs	r3, PRIMASK
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ca:	2301      	movs	r3, #1
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	f383 8810 	msr	PRIMASK, r3
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	438a      	bics	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	f383 8810 	msr	PRIMASK, r3
}
 80039f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f2:	f3ef 8310 	mrs	r3, PRIMASK
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
 80039fc:	2301      	movs	r3, #1
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	f383 8810 	msr	PRIMASK, r3
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2140      	movs	r1, #64	; 0x40
 8003a14:	438a      	bics	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a26:	228c      	movs	r2, #140	; 0x8c
 8003a28:	2120      	movs	r1, #32
 8003a2a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d118      	bne.n	8003a66 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a34:	f3ef 8310 	mrs	r3, PRIMASK
 8003a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3e:	2301      	movs	r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2110      	movs	r1, #16
 8003a56:	438a      	bics	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f383 8810 	msr	PRIMASK, r3
}
 8003a64:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a68:	2200      	movs	r2, #0
 8003a6a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d108      	bne.n	8003a86 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a76:	225c      	movs	r2, #92	; 0x5c
 8003a78:	5a9a      	ldrh	r2, [r3, r2]
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7c:	0011      	movs	r1, r2
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f7fc ff5a 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a84:	e003      	b.n	8003a8e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff f983 	bl	8002d94 <HAL_UART_RxCpltCallback>
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b014      	add	sp, #80	; 0x50
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	fffffeff 	.word	0xfffffeff

08003a9c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d10a      	bne.n	8003ace <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	225c      	movs	r2, #92	; 0x5c
 8003abc:	5a9b      	ldrh	r3, [r3, r2]
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	0011      	movs	r1, r2
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7fc ff36 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003acc:	e003      	b.n	8003ad6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7ff f967 	bl	8002da4 <HAL_UART_RxHalfCpltCallback>
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}

08003ade <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2288      	movs	r2, #136	; 0x88
 8003af0:	589b      	ldr	r3, [r3, r2]
 8003af2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	228c      	movs	r2, #140	; 0x8c
 8003af8:	589b      	ldr	r3, [r3, r2]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d10a      	bne.n	8003b20 <UART_DMAError+0x42>
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b21      	cmp	r3, #33	; 0x21
 8003b0e:	d107      	bne.n	8003b20 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2256      	movs	r2, #86	; 0x56
 8003b14:	2100      	movs	r1, #0
 8003b16:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7ff fe80 	bl	8003820 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d10a      	bne.n	8003b44 <UART_DMAError+0x66>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b22      	cmp	r3, #34	; 0x22
 8003b32:	d107      	bne.n	8003b44 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	225e      	movs	r2, #94	; 0x5e
 8003b38:	2100      	movs	r1, #0
 8003b3a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7ff feae 	bl	80038a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2290      	movs	r2, #144	; 0x90
 8003b48:	589b      	ldr	r3, [r3, r2]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2190      	movs	r1, #144	; 0x90
 8003b52:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7ff f92c 	bl	8002db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b006      	add	sp, #24
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	225e      	movs	r2, #94	; 0x5e
 8003b76:	2100      	movs	r1, #0
 8003b78:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2256      	movs	r2, #86	; 0x56
 8003b7e:	2100      	movs	r1, #0
 8003b80:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff f915 	bl	8002db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f383 8810 	msr	PRIMASK, r3
}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	438a      	bics	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	f383 8810 	msr	PRIMASK, r3
}
 8003bca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2288      	movs	r2, #136	; 0x88
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff f8d1 	bl	8002d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b006      	add	sp, #24
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b002      	add	sp, #8
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2284      	movs	r2, #132	; 0x84
 8003c28:	5c9b      	ldrb	r3, [r3, r2]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e027      	b.n	8003c82 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2284      	movs	r2, #132	; 0x84
 8003c36:	2101      	movs	r1, #1
 8003c38:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2288      	movs	r2, #136	; 0x88
 8003c3e:	2124      	movs	r1, #36	; 0x24
 8003c40:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	438a      	bics	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2288      	movs	r2, #136	; 0x88
 8003c74:	2120      	movs	r1, #32
 8003c76:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2284      	movs	r2, #132	; 0x84
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b004      	add	sp, #16
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	dfffffff 	.word	0xdfffffff

08003c90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2284      	movs	r2, #132	; 0x84
 8003c9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e02e      	b.n	8003d06 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2284      	movs	r2, #132	; 0x84
 8003cac:	2101      	movs	r1, #1
 8003cae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2288      	movs	r2, #136	; 0x88
 8003cb4:	2124      	movs	r1, #36	; 0x24
 8003cb6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	438a      	bics	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	08d9      	lsrs	r1, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 f8bc 	bl	8003e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2288      	movs	r2, #136	; 0x88
 8003cf8:	2120      	movs	r1, #32
 8003cfa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2284      	movs	r2, #132	; 0x84
 8003d00:	2100      	movs	r1, #0
 8003d02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2284      	movs	r2, #132	; 0x84
 8003d1e:	5c9b      	ldrb	r3, [r3, r2]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e02f      	b.n	8003d88 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2284      	movs	r2, #132	; 0x84
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2288      	movs	r2, #136	; 0x88
 8003d34:	2124      	movs	r1, #36	; 0x24
 8003d36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	438a      	bics	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 f87b 	bl	8003e64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2288      	movs	r2, #136	; 0x88
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2284      	movs	r2, #132	; 0x84
 8003d82:	2100      	movs	r1, #0
 8003d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	f1ffffff 	.word	0xf1ffffff

08003d94 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d94:	b5b0      	push	{r4, r5, r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	1dbb      	adds	r3, r7, #6
 8003da0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	228c      	movs	r2, #140	; 0x8c
 8003da6:	589b      	ldr	r3, [r3, r2]
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d156      	bne.n	8003e5a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003db2:	1dbb      	adds	r3, r7, #6
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e04e      	b.n	8003e5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	015b      	lsls	r3, r3, #5
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d109      	bne.n	8003dde <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d001      	beq.n	8003dde <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e03e      	b.n	8003e5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003dea:	2527      	movs	r5, #39	; 0x27
 8003dec:	197c      	adds	r4, r7, r5
 8003dee:	1dbb      	adds	r3, r7, #6
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff fc6c 	bl	80036d4 <UART_Start_Receive_DMA>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003e00:	197b      	adds	r3, r7, r5
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d124      	bne.n	8003e52 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d11c      	bne.n	8003e4a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2210      	movs	r2, #16
 8003e16:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e1e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	2301      	movs	r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	f383 8810 	msr	PRIMASK, r3
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2110      	movs	r1, #16
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	e003      	b.n	8003e52 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003e4a:	2327      	movs	r3, #39	; 0x27
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	2201      	movs	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003e52:	2327      	movs	r3, #39	; 0x27
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	e000      	b.n	8003e5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
  }
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b00a      	add	sp, #40	; 0x28
 8003e62:	bdb0      	pop	{r4, r5, r7, pc}

08003e64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d108      	bne.n	8003e86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	226a      	movs	r2, #106	; 0x6a
 8003e78:	2101      	movs	r1, #1
 8003e7a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2268      	movs	r2, #104	; 0x68
 8003e80:	2101      	movs	r1, #1
 8003e82:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e84:	e043      	b.n	8003f0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e86:	260f      	movs	r6, #15
 8003e88:	19bb      	adds	r3, r7, r6
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e8e:	200e      	movs	r0, #14
 8003e90:	183b      	adds	r3, r7, r0
 8003e92:	2208      	movs	r2, #8
 8003e94:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	0e5b      	lsrs	r3, r3, #25
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	240d      	movs	r4, #13
 8003ea2:	193b      	adds	r3, r7, r4
 8003ea4:	2107      	movs	r1, #7
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	0f5b      	lsrs	r3, r3, #29
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	250c      	movs	r5, #12
 8003eb6:	197b      	adds	r3, r7, r5
 8003eb8:	2107      	movs	r1, #7
 8003eba:	400a      	ands	r2, r1
 8003ebc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ebe:	183b      	adds	r3, r7, r0
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	197a      	adds	r2, r7, r5
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	4914      	ldr	r1, [pc, #80]	; (8003f18 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ec8:	5c8a      	ldrb	r2, [r1, r2]
 8003eca:	435a      	muls	r2, r3
 8003ecc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ece:	197b      	adds	r3, r7, r5
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <UARTEx_SetNbDataToProcess+0xb8>)
 8003ed4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	f7fc f9a6 	bl	8000228 <__divsi3>
 8003edc:	0003      	movs	r3, r0
 8003ede:	b299      	uxth	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	226a      	movs	r2, #106	; 0x6a
 8003ee4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ee6:	19bb      	adds	r3, r7, r6
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	193a      	adds	r2, r7, r4
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	490a      	ldr	r1, [pc, #40]	; (8003f18 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ef0:	5c8a      	ldrb	r2, [r1, r2]
 8003ef2:	435a      	muls	r2, r3
 8003ef4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ef6:	193b      	adds	r3, r7, r4
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <UARTEx_SetNbDataToProcess+0xb8>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003efe:	0019      	movs	r1, r3
 8003f00:	f7fc f992 	bl	8000228 <__divsi3>
 8003f04:	0003      	movs	r3, r0
 8003f06:	b299      	uxth	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2268      	movs	r2, #104	; 0x68
 8003f0c:	5299      	strh	r1, [r3, r2]
}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b005      	add	sp, #20
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	0800403c 	.word	0x0800403c
 8003f1c:	08004044 	.word	0x08004044

08003f20 <__libc_init_array>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	2600      	movs	r6, #0
 8003f24:	4d0c      	ldr	r5, [pc, #48]	; (8003f58 <__libc_init_array+0x38>)
 8003f26:	4c0d      	ldr	r4, [pc, #52]	; (8003f5c <__libc_init_array+0x3c>)
 8003f28:	1b64      	subs	r4, r4, r5
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	42a6      	cmp	r6, r4
 8003f2e:	d109      	bne.n	8003f44 <__libc_init_array+0x24>
 8003f30:	2600      	movs	r6, #0
 8003f32:	f000 f833 	bl	8003f9c <_init>
 8003f36:	4d0a      	ldr	r5, [pc, #40]	; (8003f60 <__libc_init_array+0x40>)
 8003f38:	4c0a      	ldr	r4, [pc, #40]	; (8003f64 <__libc_init_array+0x44>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	42a6      	cmp	r6, r4
 8003f40:	d105      	bne.n	8003f4e <__libc_init_array+0x2e>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	00b3      	lsls	r3, r6, #2
 8003f46:	58eb      	ldr	r3, [r5, r3]
 8003f48:	4798      	blx	r3
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7ee      	b.n	8003f2c <__libc_init_array+0xc>
 8003f4e:	00b3      	lsls	r3, r6, #2
 8003f50:	58eb      	ldr	r3, [r5, r3]
 8003f52:	4798      	blx	r3
 8003f54:	3601      	adds	r6, #1
 8003f56:	e7f2      	b.n	8003f3e <__libc_init_array+0x1e>
 8003f58:	08004054 	.word	0x08004054
 8003f5c:	08004054 	.word	0x08004054
 8003f60:	08004054 	.word	0x08004054
 8003f64:	08004058 	.word	0x08004058

08003f68 <memset>:
 8003f68:	0003      	movs	r3, r0
 8003f6a:	1882      	adds	r2, r0, r2
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d100      	bne.n	8003f72 <memset+0xa>
 8003f70:	4770      	bx	lr
 8003f72:	7019      	strb	r1, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	e7f9      	b.n	8003f6c <memset+0x4>

08003f78 <strncmp>:
 8003f78:	b530      	push	{r4, r5, lr}
 8003f7a:	0005      	movs	r5, r0
 8003f7c:	1e10      	subs	r0, r2, #0
 8003f7e:	d008      	beq.n	8003f92 <strncmp+0x1a>
 8003f80:	2400      	movs	r4, #0
 8003f82:	3a01      	subs	r2, #1
 8003f84:	5d2b      	ldrb	r3, [r5, r4]
 8003f86:	5d08      	ldrb	r0, [r1, r4]
 8003f88:	4283      	cmp	r3, r0
 8003f8a:	d101      	bne.n	8003f90 <strncmp+0x18>
 8003f8c:	4294      	cmp	r4, r2
 8003f8e:	d101      	bne.n	8003f94 <strncmp+0x1c>
 8003f90:	1a18      	subs	r0, r3, r0
 8003f92:	bd30      	pop	{r4, r5, pc}
 8003f94:	3401      	adds	r4, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f4      	bne.n	8003f84 <strncmp+0xc>
 8003f9a:	e7f9      	b.n	8003f90 <strncmp+0x18>

08003f9c <_init>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr

08003fa8 <_fini>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr
